
STM32 SD FLASH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ae8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a1c  08012c88  08012c88  00022c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080136a4  080136a4  0003030c  2**0
                  CONTENTS
  4 .ARM          00000008  080136a4  080136a4  000236a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080136ac  080136ac  0003030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080136ac  080136ac  000236ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080136b0  080136b0  000236b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000030c  20000000  080136b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003088  2000030c  080139c0  0003030c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003394  080139c0  00033394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003030c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000200ef  00000000  00000000  0003033c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d52  00000000  00000000  0005042b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00055180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001980  00000000  00000000  00056d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e1d2  00000000  00000000  000586c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026725  00000000  00000000  0007689a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000979d4  00000000  00000000  0009cfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134993  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085d4  00000000  00000000  001349e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000030c 	.word	0x2000030c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012c70 	.word	0x08012c70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000310 	.word	0x20000310
 80001dc:	08012c70 	.word	0x08012c70

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <ACC_INIT>:
 *      Author: rhett
 */

#include "LIS3DHTR.h"

HAL_StatusTypeDef ACC_INIT(void){
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b0ba      	sub	sp, #232	; 0xe8
 8000f60:	af04      	add	r7, sp, #16
	uint8_t WHOAMI_REG; //Expect 0x33
	uint8_t ctr_reg1=0x77; // 400Hz all axes enabled, low power mode disabled
 8000f62:	2377      	movs	r3, #119	; 0x77
 8000f64:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
	uint8_t ctr_reg4=0x30; // Set range to +/- 16g
 8000f68:	2330      	movs	r3, #48	; 0x30
 8000f6a:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
	char I2C_ERR[]="Error initialising accelerometer";
 8000f6e:	4b49      	ldr	r3, [pc, #292]	; (8001094 <ACC_INIT+0x138>)
 8000f70:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000f74:	461d      	mov	r5, r3
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	7023      	strb	r3, [r4, #0]
	char CONFIG_ERR[]="Error configuring control register";
 8000f82:	4b45      	ldr	r3, [pc, #276]	; (8001098 <ACC_INIT+0x13c>)
 8000f84:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000f88:	461d      	mov	r5, r3
 8000f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f92:	682b      	ldr	r3, [r5, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	8022      	strh	r2, [r4, #0]
 8000f98:	3402      	adds	r4, #2
 8000f9a:	0c1b      	lsrs	r3, r3, #16
 8000f9c:	7023      	strb	r3, [r4, #0]
	char CONFIG_CPLT[]="Control registers configured successfully";
 8000f9e:	4b3f      	ldr	r3, [pc, #252]	; (800109c <ACC_INIT+0x140>)
 8000fa0:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000fa4:	461d      	mov	r5, r3
 8000fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb2:	c403      	stmia	r4!, {r0, r1}
 8000fb4:	8022      	strh	r2, [r4, #0]
	char I2C_CPLT[100];

	if(HAL_I2C_Mem_Read(&hi2c1,LIS3DH_I2C_ADDR<<1 , 0x0F, 1, &WHOAMI_REG, 1, 100)!=HAL_OK){
 8000fb6:	2364      	movs	r3, #100	; 0x64
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	f107 03d7 	add.w	r3, r7, #215	; 0xd7
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	2130      	movs	r1, #48	; 0x30
 8000fca:	4835      	ldr	r0, [pc, #212]	; (80010a0 <ACC_INIT+0x144>)
 8000fcc:	f002 fd34 	bl	8003a38 <HAL_I2C_Mem_Read>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d011      	beq.n	8000ffa <ACC_INIT+0x9e>
				//CDC_Transmit_FS((uint8_t*)I2C_ERR, strlen(I2C_ERR));
				HAL_GPIO_WritePin(GPIOB, I2C_LED, 1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2120      	movs	r1, #32
 8000fda:	4832      	ldr	r0, [pc, #200]	; (80010a4 <ACC_INIT+0x148>)
 8000fdc:	f002 fad4 	bl	8003588 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000fe0:	2064      	movs	r0, #100	; 0x64
 8000fe2:	f001 ffff 	bl	8002fe4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, I2C_LED, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2120      	movs	r1, #32
 8000fea:	482e      	ldr	r0, [pc, #184]	; (80010a4 <ACC_INIT+0x148>)
 8000fec:	f002 facc 	bl	8003588 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000ff0:	2064      	movs	r0, #100	; 0x64
 8000ff2:	f001 fff7 	bl	8002fe4 <HAL_Delay>
				return(HAL_ERROR);
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e048      	b.n	800108c <ACC_INIT+0x130>
		}

		else{
				sprintf(I2C_CPLT,"Accelerometer connection successful. The value of the who am I register is 0x%x\n\r",WHOAMI_REG);
 8000ffa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000ffe:	461a      	mov	r2, r3
 8001000:	463b      	mov	r3, r7
 8001002:	4929      	ldr	r1, [pc, #164]	; (80010a8 <ACC_INIT+0x14c>)
 8001004:	4618      	mov	r0, r3
 8001006:	f00f fbb9 	bl	801077c <siprintf>
				//CDC_Transmit_FS((uint8_t*)I2C_CPLT, strlen(I2C_CPLT));
				HAL_GPIO_WritePin(GPIOB, I2C_LED, 1);
 800100a:	2201      	movs	r2, #1
 800100c:	2120      	movs	r1, #32
 800100e:	4825      	ldr	r0, [pc, #148]	; (80010a4 <ACC_INIT+0x148>)
 8001010:	f002 faba 	bl	8003588 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8001014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001018:	f001 ffe4 	bl	8002fe4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, I2C_LED, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2120      	movs	r1, #32
 8001020:	4820      	ldr	r0, [pc, #128]	; (80010a4 <ACC_INIT+0x148>)
 8001022:	f002 fab1 	bl	8003588 <HAL_GPIO_WritePin>

			if(HAL_I2C_Mem_Write(&hi2c1, LIS3DH_I2C_ADDR<<1, 0x20, 1, &ctr_reg1, 1, 100)!=HAL_OK || HAL_I2C_Mem_Write(&hi2c1, LIS3DH_I2C_ADDR<<1, 0x23, 1, &ctr_reg4, 1, 100)!=HAL_OK){
 8001026:	2364      	movs	r3, #100	; 0x64
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	2301      	movs	r3, #1
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	2220      	movs	r2, #32
 8001038:	2130      	movs	r1, #48	; 0x30
 800103a:	4819      	ldr	r0, [pc, #100]	; (80010a0 <ACC_INIT+0x144>)
 800103c:	f002 fc02 	bl	8003844 <HAL_I2C_Mem_Write>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10f      	bne.n	8001066 <ACC_INIT+0x10a>
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	2301      	movs	r3, #1
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	f107 03d5 	add.w	r3, r7, #213	; 0xd5
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	2223      	movs	r2, #35	; 0x23
 8001058:	2130      	movs	r1, #48	; 0x30
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <ACC_INIT+0x144>)
 800105c:	f002 fbf2 	bl	8003844 <HAL_I2C_Mem_Write>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d011      	beq.n	800108a <ACC_INIT+0x12e>
						//CDC_Transmit_FS(CONFIG_ERR, strlen(CONFIG_ERR));
						HAL_GPIO_WritePin(GPIOB, I2C_LED, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	2120      	movs	r1, #32
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <ACC_INIT+0x148>)
 800106c:	f002 fa8c 	bl	8003588 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 8001070:	2064      	movs	r0, #100	; 0x64
 8001072:	f001 ffb7 	bl	8002fe4 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOB, I2C_LED, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2120      	movs	r1, #32
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <ACC_INIT+0x148>)
 800107c:	f002 fa84 	bl	8003588 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 8001080:	2064      	movs	r0, #100	; 0x64
 8001082:	f001 ffaf 	bl	8002fe4 <HAL_Delay>
						return(HAL_ERROR);
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <ACC_INIT+0x130>
					}

			else{
					//CDC_Transmit_FS(CONFIG_CPLT, strlen(CONFIG_CPLT));
					return(HAL_OK);
 800108a:	2300      	movs	r3, #0
				}

			}
}
 800108c:	4618      	mov	r0, r3
 800108e:	37d8      	adds	r7, #216	; 0xd8
 8001090:	46bd      	mov	sp, r7
 8001092:	bdb0      	pop	{r4, r5, r7, pc}
 8001094:	08012cdc 	.word	0x08012cdc
 8001098:	08012d00 	.word	0x08012d00
 800109c:	08012d24 	.word	0x08012d24
 80010a0:	2000032c 	.word	0x2000032c
 80010a4:	40020400 	.word	0x40020400
 80010a8:	08012c88 	.word	0x08012c88
 80010ac:	00000000 	.word	0x00000000

080010b0 <ACC_R>:

HAL_StatusTypeDef ACC_R(float* result){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0a8      	sub	sp, #160	; 0xa0
 80010b4:	af04      	add	r7, sp, #16
 80010b6:	6078      	str	r0, [r7, #4]
	uint8_t x_stat,y_stat,z_stat;
	float X_ACC,Y_ACC,Z_ACC;

	char mess[100];

	x_stat=HAL_I2C_Mem_Read(&hi2c1,  LIS3DH_I2C_ADDR<<1,0x28, 1, &X_L, 1, 100); //X_L
 80010b8:	2364      	movs	r3, #100	; 0x64
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	2228      	movs	r2, #40	; 0x28
 80010ca:	2130      	movs	r1, #48	; 0x30
 80010cc:	487c      	ldr	r0, [pc, #496]	; (80012c0 <ACC_R+0x210>)
 80010ce:	f002 fcb3 	bl	8003a38 <HAL_I2C_Mem_Read>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	HAL_I2C_Mem_Read(&hi2c1,  LIS3DH_I2C_ADDR<<1,0x29, 1, &X_H, 1, 100); //X_H
 80010d8:	2364      	movs	r3, #100	; 0x64
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	f107 0377 	add.w	r3, r7, #119	; 0x77
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2229      	movs	r2, #41	; 0x29
 80010ea:	2130      	movs	r1, #48	; 0x30
 80010ec:	4874      	ldr	r0, [pc, #464]	; (80012c0 <ACC_R+0x210>)
 80010ee:	f002 fca3 	bl	8003a38 <HAL_I2C_Mem_Read>
	y_stat=HAL_I2C_Mem_Read(&hi2c1,  LIS3DH_I2C_ADDR<<1,0x2A, 1, &Y_L, 1, 100); //Y_L
 80010f2:	2364      	movs	r3, #100	; 0x64
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	2301      	movs	r3, #1
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	222a      	movs	r2, #42	; 0x2a
 8001104:	2130      	movs	r1, #48	; 0x30
 8001106:	486e      	ldr	r0, [pc, #440]	; (80012c0 <ACC_R+0x210>)
 8001108:	f002 fc96 	bl	8003a38 <HAL_I2C_Mem_Read>
 800110c:	4603      	mov	r3, r0
 800110e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	HAL_I2C_Mem_Read(&hi2c1,  LIS3DH_I2C_ADDR<<1,0x2B, 1, &Y_H, 1, 100); //Y_H
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2301      	movs	r3, #1
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	f107 0375 	add.w	r3, r7, #117	; 0x75
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	222b      	movs	r2, #43	; 0x2b
 8001124:	2130      	movs	r1, #48	; 0x30
 8001126:	4866      	ldr	r0, [pc, #408]	; (80012c0 <ACC_R+0x210>)
 8001128:	f002 fc86 	bl	8003a38 <HAL_I2C_Mem_Read>
	z_stat=HAL_I2C_Mem_Read(&hi2c1,  LIS3DH_I2C_ADDR<<1,0x2C, 1, &Z_L, 1, 100); //Z_L
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	2301      	movs	r3, #1
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	f107 0372 	add.w	r3, r7, #114	; 0x72
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	222c      	movs	r2, #44	; 0x2c
 800113e:	2130      	movs	r1, #48	; 0x30
 8001140:	485f      	ldr	r0, [pc, #380]	; (80012c0 <ACC_R+0x210>)
 8001142:	f002 fc79 	bl	8003a38 <HAL_I2C_Mem_Read>
 8001146:	4603      	mov	r3, r0
 8001148:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	HAL_I2C_Mem_Read(&hi2c1,  LIS3DH_I2C_ADDR<<1,0x2D, 1, &Z_H, 1, 100); //Z_H
 800114c:	2364      	movs	r3, #100	; 0x64
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	2301      	movs	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	222d      	movs	r2, #45	; 0x2d
 800115e:	2130      	movs	r1, #48	; 0x30
 8001160:	4857      	ldr	r0, [pc, #348]	; (80012c0 <ACC_R+0x210>)
 8001162:	f002 fc69 	bl	8003a38 <HAL_I2C_Mem_Read>

	if(x_stat!=HAL_OK || y_stat!=HAL_OK || z_stat!=HAL_OK){
 8001166:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800116a:	2b00      	cmp	r3, #0
 800116c:	d107      	bne.n	800117e <ACC_R+0xce>
 800116e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <ACC_R+0xce>
 8001176:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <ACC_R+0xd2>
			return(HAL_ERROR);
 800117e:	2301      	movs	r3, #1
 8001180:	e094      	b.n	80012ac <ACC_R+0x1fc>
		}

	else{
			X_INT=X_H;
 8001182:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001186:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
			X_INT<<=8;
 800118a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
			X_INT|=X_L;
 8001194:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001198:	b21a      	sxth	r2, r3
 800119a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800119e:	4313      	orrs	r3, r2
 80011a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
			X_INT>>=6;
 80011a4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80011a8:	119b      	asrs	r3, r3, #6
 80011aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

			Y_INT=Y_H;
 80011ae:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80011b2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
			Y_INT<<=8;
 80011b6:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
			Y_INT|=Y_L;
 80011c0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80011ca:	4313      	orrs	r3, r2
 80011cc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
			Y_INT>>=6;
 80011d0:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 80011d4:	119b      	asrs	r3, r3, #6
 80011d6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

			Z_INT=Z_H;
 80011da:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80011de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			Z_INT<<=8;
 80011e2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			Z_INT|=Z_L;
 80011ec:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80011f6:	4313      	orrs	r3, r2
 80011f8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			Z_INT>>=6;
 80011fc:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8001200:	119b      	asrs	r3, r3, #6
 8001202:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

			X_ACC=(float)X_INT*0.048;
 8001206:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001212:	ee17 0a90 	vmov	r0, s15
 8001216:	f7ff f99f 	bl	8000558 <__aeabi_f2d>
 800121a:	a327      	add	r3, pc, #156	; (adr r3, 80012b8 <ACC_R+0x208>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff f9f2 	bl	8000608 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fcc4 	bl	8000bb8 <__aeabi_d2f>
 8001230:	4603      	mov	r3, r0
 8001232:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			Y_ACC=(float)Y_INT*0.048;
 8001236:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001242:	ee17 0a90 	vmov	r0, s15
 8001246:	f7ff f987 	bl	8000558 <__aeabi_f2d>
 800124a:	a31b      	add	r3, pc, #108	; (adr r3, 80012b8 <ACC_R+0x208>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff f9da 	bl	8000608 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fcac 	bl	8000bb8 <__aeabi_d2f>
 8001260:	4603      	mov	r3, r0
 8001262:	67fb      	str	r3, [r7, #124]	; 0x7c
			Z_ACC=(float)Z_INT*0.048;
 8001264:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001270:	ee17 0a90 	vmov	r0, s15
 8001274:	f7ff f970 	bl	8000558 <__aeabi_f2d>
 8001278:	a30f      	add	r3, pc, #60	; (adr r3, 80012b8 <ACC_R+0x208>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff f9c3 	bl	8000608 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fc95 	bl	8000bb8 <__aeabi_d2f>
 800128e:	4603      	mov	r3, r0
 8001290:	67bb      	str	r3, [r7, #120]	; 0x78

			result[0]=X_ACC;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001298:	601a      	str	r2, [r3, #0]
			result[1]=Y_ACC;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3304      	adds	r3, #4
 800129e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80012a0:	601a      	str	r2, [r3, #0]
			result[2]=Z_ACC;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3308      	adds	r3, #8
 80012a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80012a8:	601a      	str	r2, [r3, #0]

			return(HAL_OK);
 80012aa:	2300      	movs	r3, #0
		}
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3790      	adds	r7, #144	; 0x90
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	f3af 8000 	nop.w
 80012b8:	bc6a7efa 	.word	0xbc6a7efa
 80012bc:	3fa89374 	.word	0x3fa89374
 80012c0:	2000032c 	.word	0x2000032c

080012c4 <delay>:
#include "SST25VF010A.h"
#include "stdio.h"

extern TIM_HandleTypeDef htim1;

void delay(uint16_t delay){
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1,0);
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <delay+0x30>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<delay);
 80012d6:	bf00      	nop
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <delay+0x30>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d3f9      	bcc.n	80012d8 <delay+0x14>

}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	200003d8 	.word	0x200003d8

080012f8 <MEM_Status_R>:

uint8_t MEM_Status_R(void){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af02      	add	r7, sp, #8

	uint8_t data[2]={0x05,0x00};
 80012fe:	2305      	movs	r3, #5
 8001300:	80bb      	strh	r3, [r7, #4]
	uint8_t stat_reg[2];


	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2108      	movs	r1, #8
 8001306:	480a      	ldr	r0, [pc, #40]	; (8001330 <MEM_Status_R+0x38>)
 8001308:	f002 f93e 	bl	8003588 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi1, data, stat_reg, 2, 100);
 800130c:	463a      	mov	r2, r7
 800130e:	1d39      	adds	r1, r7, #4
 8001310:	2364      	movs	r3, #100	; 0x64
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2302      	movs	r3, #2
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <MEM_Status_R+0x3c>)
 8001318:	f005 fa01 	bl	800671e <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800131c:	2201      	movs	r2, #1
 800131e:	2108      	movs	r1, #8
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <MEM_Status_R+0x38>)
 8001322:	f002 f931 	bl	8003588 <HAL_GPIO_WritePin>

	return(stat_reg[1]);
 8001326:	787b      	ldrb	r3, [r7, #1]


}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40020000 	.word	0x40020000
 8001334:	20000380 	.word	0x20000380

08001338 <W_EN>:

HAL_StatusTypeDef W_EN(void){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af02      	add	r7, sp, #8
	uint8_t write_en=0x06;
 800133e:	2306      	movs	r3, #6
 8001340:	71fb      	strb	r3, [r7, #7]
	uint8_t write_en_rec;

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2108      	movs	r1, #8
 8001346:	4814      	ldr	r0, [pc, #80]	; (8001398 <W_EN+0x60>)
 8001348:	f002 f91e 	bl	8003588 <HAL_GPIO_WritePin>

	if(HAL_SPI_TransmitReceive(&hspi1, &write_en, &write_en_rec, 1, 100)!=HAL_OK){
 800134c:	1dba      	adds	r2, r7, #6
 800134e:	1df9      	adds	r1, r7, #7
 8001350:	2364      	movs	r3, #100	; 0x64
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	4811      	ldr	r0, [pc, #68]	; (800139c <W_EN+0x64>)
 8001358:	f005 f9e1 	bl	800671e <HAL_SPI_TransmitReceive>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <W_EN+0x38>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001362:	2201      	movs	r2, #1
 8001364:	2108      	movs	r1, #8
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <W_EN+0x60>)
 8001368:	f002 f90e 	bl	8003588 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 800136c:	2301      	movs	r3, #1
 800136e:	e00f      	b.n	8001390 <W_EN+0x58>
	}

	else{
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001370:	2201      	movs	r2, #1
 8001372:	2108      	movs	r1, #8
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <W_EN+0x60>)
 8001376:	f002 f907 	bl	8003588 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800137a:	2001      	movs	r0, #1
 800137c:	f001 fe32 	bl	8002fe4 <HAL_Delay>
		if(MEM_Status_R()==0x00){
 8001380:	f7ff ffba 	bl	80012f8 <MEM_Status_R>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <W_EN+0x56>
			return(HAL_OK);
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <W_EN+0x58>
		}

		else{
			return(HAL_ERROR);
 800138e:	2301      	movs	r3, #1
		}
	}


}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40020000 	.word	0x40020000
 800139c:	20000380 	.word	0x20000380

080013a0 <W_DI>:

HAL_StatusTypeDef W_DI(void){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af02      	add	r7, sp, #8
	uint8_t write_dis=0x04;
 80013a6:	2304      	movs	r3, #4
 80013a8:	71fb      	strb	r3, [r7, #7]
	uint8_t write_dis_rec;

		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2108      	movs	r1, #8
 80013ae:	4814      	ldr	r0, [pc, #80]	; (8001400 <W_DI+0x60>)
 80013b0:	f002 f8ea 	bl	8003588 <HAL_GPIO_WritePin>

		if(HAL_SPI_TransmitReceive(&hspi1, &write_dis, &write_dis_rec, 1, 100)!=HAL_OK){
 80013b4:	1dba      	adds	r2, r7, #6
 80013b6:	1df9      	adds	r1, r7, #7
 80013b8:	2364      	movs	r3, #100	; 0x64
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	4811      	ldr	r0, [pc, #68]	; (8001404 <W_DI+0x64>)
 80013c0:	f005 f9ad 	bl	800671e <HAL_SPI_TransmitReceive>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <W_DI+0x38>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80013ca:	2201      	movs	r2, #1
 80013cc:	2108      	movs	r1, #8
 80013ce:	480c      	ldr	r0, [pc, #48]	; (8001400 <W_DI+0x60>)
 80013d0:	f002 f8da 	bl	8003588 <HAL_GPIO_WritePin>
			return(HAL_ERROR);
 80013d4:	2301      	movs	r3, #1
 80013d6:	e00f      	b.n	80013f8 <W_DI+0x58>
		}

		else{
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	2108      	movs	r1, #8
 80013dc:	4808      	ldr	r0, [pc, #32]	; (8001400 <W_DI+0x60>)
 80013de:	f002 f8d3 	bl	8003588 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f001 fdfe 	bl	8002fe4 <HAL_Delay>
			if(MEM_Status_R()==0x00){
 80013e8:	f7ff ff86 	bl	80012f8 <MEM_Status_R>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <W_DI+0x56>

				return(HAL_OK);
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <W_DI+0x58>
			}

			else{
				return(HAL_ERROR);
 80013f6:	2301      	movs	r3, #1
			}
		}
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40020000 	.word	0x40020000
 8001404:	20000380 	.word	0x20000380

08001408 <MEM_Status_W>:

HAL_StatusTypeDef MEM_Status_W(uint8_t value){
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af02      	add	r7, sp, #8
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]

	uint8_t EWSR=0x50;
 8001412:	2350      	movs	r3, #80	; 0x50
 8001414:	73fb      	strb	r3, [r7, #15]
	uint8_t EWSR_rec; //ignore
	uint8_t WRSR[2]={0x01,value};
 8001416:	2301      	movs	r3, #1
 8001418:	733b      	strb	r3, [r7, #12]
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	737b      	strb	r3, [r7, #13]
	uint8_t WRSR_rec[2]; //ignore

	while(MEM_Status_R()!=value){
 800141e:	e02d      	b.n	800147c <MEM_Status_W+0x74>


		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2108      	movs	r1, #8
 8001424:	4820      	ldr	r0, [pc, #128]	; (80014a8 <MEM_Status_W+0xa0>)
 8001426:	f002 f8af 	bl	8003588 <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(&hspi1, &EWSR, &EWSR_rec, 1, 100);
 800142a:	f107 020e 	add.w	r2, r7, #14
 800142e:	f107 010f 	add.w	r1, r7, #15
 8001432:	2364      	movs	r3, #100	; 0x64
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2301      	movs	r3, #1
 8001438:	481c      	ldr	r0, [pc, #112]	; (80014ac <MEM_Status_W+0xa4>)
 800143a:	f005 f970 	bl	800671e <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800143e:	2201      	movs	r2, #1
 8001440:	2108      	movs	r1, #8
 8001442:	4819      	ldr	r0, [pc, #100]	; (80014a8 <MEM_Status_W+0xa0>)
 8001444:	f002 f8a0 	bl	8003588 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8001448:	2032      	movs	r0, #50	; 0x32
 800144a:	f001 fdcb 	bl	8002fe4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2108      	movs	r1, #8
 8001452:	4815      	ldr	r0, [pc, #84]	; (80014a8 <MEM_Status_W+0xa0>)
 8001454:	f002 f898 	bl	8003588 <HAL_GPIO_WritePin>

		HAL_SPI_TransmitReceive(&hspi1, WRSR, WRSR_rec, 2, 100);
 8001458:	f107 0208 	add.w	r2, r7, #8
 800145c:	f107 010c 	add.w	r1, r7, #12
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2302      	movs	r3, #2
 8001466:	4811      	ldr	r0, [pc, #68]	; (80014ac <MEM_Status_W+0xa4>)
 8001468:	f005 f959 	bl	800671e <HAL_SPI_TransmitReceive>

		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800146c:	2201      	movs	r2, #1
 800146e:	2108      	movs	r1, #8
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <MEM_Status_W+0xa0>)
 8001472:	f002 f889 	bl	8003588 <HAL_GPIO_WritePin>


		HAL_Delay(100);
 8001476:	2064      	movs	r0, #100	; 0x64
 8001478:	f001 fdb4 	bl	8002fe4 <HAL_Delay>
	while(MEM_Status_R()!=value){
 800147c:	f7ff ff3c 	bl	80012f8 <MEM_Status_R>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4293      	cmp	r3, r2
 8001488:	d1ca      	bne.n	8001420 <MEM_Status_W+0x18>
	}


	if(MEM_Status_R()!=value){
 800148a:	f7ff ff35 	bl	80012f8 <MEM_Status_R>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4293      	cmp	r3, r2
 8001496:	d001      	beq.n	800149c <MEM_Status_W+0x94>
		return(HAL_ERROR);
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <MEM_Status_W+0x96>
	}

	else{
		return(HAL_OK);
 800149c:	2300      	movs	r3, #0
	}

}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40020000 	.word	0x40020000
 80014ac:	20000380 	.word	0x20000380

080014b0 <MEM_R>:

HAL_StatusTypeDef MEM_R(uint32_t addr,uint32_t bytes,uint8_t* data){
 80014b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b4:	b08f      	sub	sp, #60	; 0x3c
 80014b6:	af02      	add	r7, sp, #8
 80014b8:	6178      	str	r0, [r7, #20]
 80014ba:	6139      	str	r1, [r7, #16]
 80014bc:	60fa      	str	r2, [r7, #12]
 80014be:	466b      	mov	r3, sp
 80014c0:	461e      	mov	r6, r3

	uint8_t rec_data[bytes+4];
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1d19      	adds	r1, r3, #4
 80014c6:	460b      	mov	r3, r1
 80014c8:	3b01      	subs	r3, #1
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80014cc:	2300      	movs	r3, #0
 80014ce:	6039      	str	r1, [r7, #0]
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	00c3      	lsls	r3, r0, #3
 80014de:	6838      	ldr	r0, [r7, #0]
 80014e0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014e4:	6838      	ldr	r0, [r7, #0]
 80014e6:	00c2      	lsls	r2, r0, #3
 80014e8:	2300      	movs	r3, #0
 80014ea:	468a      	mov	sl, r1
 80014ec:	469b      	mov	fp, r3
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80014fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001502:	1dcb      	adds	r3, r1, #7
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	ebad 0d03 	sub.w	sp, sp, r3
 800150c:	ab02      	add	r3, sp, #8
 800150e:	3300      	adds	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t transaction[bytes+4];
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1d19      	adds	r1, r3, #4
 8001516:	460b      	mov	r3, r1
 8001518:	3b01      	subs	r3, #1
 800151a:	623b      	str	r3, [r7, #32]
 800151c:	2300      	movs	r3, #0
 800151e:	4688      	mov	r8, r1
 8001520:	4699      	mov	r9, r3
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800152e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001536:	2300      	movs	r3, #0
 8001538:	460c      	mov	r4, r1
 800153a:	461d      	mov	r5, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	00eb      	lsls	r3, r5, #3
 8001546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800154a:	00e2      	lsls	r2, r4, #3
 800154c:	1dcb      	adds	r3, r1, #7
 800154e:	08db      	lsrs	r3, r3, #3
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	ebad 0d03 	sub.w	sp, sp, r3
 8001556:	ab02      	add	r3, sp, #8
 8001558:	3300      	adds	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
	memset(transaction,0,bytes+4);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	3304      	adds	r3, #4
 8001560:	461a      	mov	r2, r3
 8001562:	2100      	movs	r1, #0
 8001564:	69f8      	ldr	r0, [r7, #28]
 8001566:	f00e fc97 	bl	800fe98 <memset>
	transaction[0]=0x03;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	2203      	movs	r2, #3
 800156e:	701a      	strb	r2, [r3, #0]
	transaction[1]=addr>>16;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	0c1b      	lsrs	r3, r3, #16
 8001574:	b2da      	uxtb	r2, r3
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	705a      	strb	r2, [r3, #1]
	transaction[2]=addr>>8;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	b2da      	uxtb	r2, r3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	709a      	strb	r2, [r3, #2]
	transaction[3]=addr;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	70da      	strb	r2, [r3, #3]



	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2108      	movs	r1, #8
 8001590:	481a      	ldr	r0, [pc, #104]	; (80015fc <MEM_R+0x14c>)
 8001592:	f001 fff9 	bl	8003588 <HAL_GPIO_WritePin>

	if(HAL_SPI_TransmitReceive(&hspi1, transaction, rec_data, bytes+4, 100)!=HAL_OK){
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	b29b      	uxth	r3, r3
 800159a:	3304      	adds	r3, #4
 800159c:	b29b      	uxth	r3, r3
 800159e:	2264      	movs	r2, #100	; 0x64
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a4:	69f9      	ldr	r1, [r7, #28]
 80015a6:	4816      	ldr	r0, [pc, #88]	; (8001600 <MEM_R+0x150>)
 80015a8:	f005 f8b9 	bl	800671e <HAL_SPI_TransmitReceive>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <MEM_R+0x110>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2108      	movs	r1, #8
 80015b6:	4811      	ldr	r0, [pc, #68]	; (80015fc <MEM_R+0x14c>)
 80015b8:	f001 ffe6 	bl	8003588 <HAL_GPIO_WritePin>
		return(HAL_ERROR);
 80015bc:	2301      	movs	r3, #1
 80015be:	e017      	b.n	80015f0 <MEM_R+0x140>

	}

	else{
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2108      	movs	r1, #8
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <MEM_R+0x14c>)
 80015c6:	f001 ffdf 	bl	8003588 <HAL_GPIO_WritePin>
		for(int i=0;i<bytes;i++){
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	e00a      	b.n	80015e6 <MEM_R+0x136>
			data[i]=rec_data[i+4];
 80015d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d2:	1d1a      	adds	r2, r3, #4
 80015d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d6:	68f9      	ldr	r1, [r7, #12]
 80015d8:	440b      	add	r3, r1
 80015da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015dc:	5c8a      	ldrb	r2, [r1, r2]
 80015de:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<bytes;i++){
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	3301      	adds	r3, #1
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d8f0      	bhi.n	80015d0 <MEM_R+0x120>
		}
		return(HAL_OK);
 80015ee:	2300      	movs	r3, #0
 80015f0:	46b5      	mov	sp, r6
	}



}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3734      	adds	r7, #52	; 0x34
 80015f6:	46bd      	mov	sp, r7
 80015f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015fc:	40020000 	.word	0x40020000
 8001600:	20000380 	.word	0x20000380

08001604 <MEM_AAI_W>:
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
		return(HAL_OK);
	}
}

HAL_StatusTypeDef MEM_AAI_W(uint32_t addr, uint32_t bytes,uint8_t* data){
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]

	uint8_t init_transac[5]={0xAF,addr>>16,addr>>8,addr,data[0]};
 8001610:	23af      	movs	r3, #175	; 0xaf
 8001612:	753b      	strb	r3, [r7, #20]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	0c1b      	lsrs	r3, r3, #16
 8001618:	b2db      	uxtb	r3, r3
 800161a:	757b      	strb	r3, [r7, #21]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	b2db      	uxtb	r3, r3
 8001622:	75bb      	strb	r3, [r7, #22]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	75fb      	strb	r3, [r7, #23]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	763b      	strb	r3, [r7, #24]

	while(MEM_Status_R()!=0x00){
 8001630:	bf00      	nop
 8001632:	f7ff fe61 	bl	80012f8 <MEM_Status_R>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1fa      	bne.n	8001632 <MEM_AAI_W+0x2e>

	}

	W_EN();
 800163c:	f7ff fe7c 	bl	8001338 <W_EN>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2108      	movs	r1, #8
 8001644:	4823      	ldr	r0, [pc, #140]	; (80016d4 <MEM_AAI_W+0xd0>)
 8001646:	f001 ff9f 	bl	8003588 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, init_transac, 5, 100);
 800164a:	f107 0114 	add.w	r1, r7, #20
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	2205      	movs	r2, #5
 8001652:	4821      	ldr	r0, [pc, #132]	; (80016d8 <MEM_AAI_W+0xd4>)
 8001654:	f004 ff27 	bl	80064a6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001658:	2201      	movs	r2, #1
 800165a:	2108      	movs	r1, #8
 800165c:	481d      	ldr	r0, [pc, #116]	; (80016d4 <MEM_AAI_W+0xd0>)
 800165e:	f001 ff93 	bl	8003588 <HAL_GPIO_WritePin>
	delay(100);
 8001662:	2064      	movs	r0, #100	; 0x64
 8001664:	f7ff fe2e 	bl	80012c4 <delay>


	for(int i=1;i<bytes;i++){
 8001668:	2301      	movs	r3, #1
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	e01f      	b.n	80016ae <MEM_AAI_W+0xaa>
		uint8_t data_write[2]={0xAF,data[i]};
 800166e:	23af      	movs	r3, #175	; 0xaf
 8001670:	743b      	strb	r3, [r7, #16]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	747b      	strb	r3, [r7, #17]
		W_EN();
 800167c:	f7ff fe5c 	bl	8001338 <W_EN>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2108      	movs	r1, #8
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <MEM_AAI_W+0xd0>)
 8001686:	f001 ff7f 	bl	8003588 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, data_write, 2, 100);
 800168a:	f107 0110 	add.w	r1, r7, #16
 800168e:	2364      	movs	r3, #100	; 0x64
 8001690:	2202      	movs	r2, #2
 8001692:	4811      	ldr	r0, [pc, #68]	; (80016d8 <MEM_AAI_W+0xd4>)
 8001694:	f004 ff07 	bl	80064a6 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8001698:	2201      	movs	r2, #1
 800169a:	2108      	movs	r1, #8
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <MEM_AAI_W+0xd0>)
 800169e:	f001 ff73 	bl	8003588 <HAL_GPIO_WritePin>
		delay(100);
 80016a2:	2064      	movs	r0, #100	; 0x64
 80016a4:	f7ff fe0e 	bl	80012c4 <delay>
	for(int i=1;i<bytes;i++){
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	3301      	adds	r3, #1
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d8db      	bhi.n	800166e <MEM_AAI_W+0x6a>

	}

	W_DI();
 80016b6:	f7ff fe73 	bl	80013a0 <W_DI>

	if(MEM_Status_R()==0x00){
 80016ba:	f7ff fe1d 	bl	80012f8 <MEM_Status_R>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <MEM_AAI_W+0xc4>
		return(HAL_OK);
 80016c4:	2300      	movs	r3, #0
 80016c6:	e000      	b.n	80016ca <MEM_AAI_W+0xc6>
	}

	else{
		return(HAL_ERROR);
 80016c8:	2301      	movs	r3, #1
	}
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40020000 	.word	0x40020000
 80016d8:	20000380 	.word	0x20000380

080016dc <Page_Erase>:
			return(HAL_OK);

	}
}

HAL_StatusTypeDef Page_Erase(uint32_t start_addr){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	uint8_t transaction[4]={0x52,start_addr>>16,start_addr>>8,start_addr};
 80016e4:	2352      	movs	r3, #82	; 0x52
 80016e6:	733b      	strb	r3, [r7, #12]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	737b      	strb	r3, [r7, #13]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	0a1b      	lsrs	r3, r3, #8
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	73bb      	strb	r3, [r7, #14]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	73fb      	strb	r3, [r7, #15]

	while(MEM_Status_R()!=0x00){
 80016fe:	bf00      	nop
 8001700:	f7ff fdfa 	bl	80012f8 <MEM_Status_R>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1fa      	bne.n	8001700 <Page_Erase+0x24>

		}

	W_EN();
 800170a:	f7ff fe15 	bl	8001338 <W_EN>

	HAL_GPIO_WritePin(GPIOA, CS_MEM, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2108      	movs	r1, #8
 8001712:	480f      	ldr	r0, [pc, #60]	; (8001750 <Page_Erase+0x74>)
 8001714:	f001 ff38 	bl	8003588 <HAL_GPIO_WritePin>


	if(HAL_SPI_Transmit(&hspi1, transaction, 4, 100)!=HAL_OK){
 8001718:	f107 010c 	add.w	r1, r7, #12
 800171c:	2364      	movs	r3, #100	; 0x64
 800171e:	2204      	movs	r2, #4
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <Page_Erase+0x78>)
 8001722:	f004 fec0 	bl	80064a6 <HAL_SPI_Transmit>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <Page_Erase+0x5e>
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800172c:	2201      	movs	r2, #1
 800172e:	2108      	movs	r1, #8
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <Page_Erase+0x74>)
 8001732:	f001 ff29 	bl	8003588 <HAL_GPIO_WritePin>
			return(HAL_ERROR);
 8001736:	2301      	movs	r3, #1
 8001738:	e005      	b.n	8001746 <Page_Erase+0x6a>
	}

	else{
			HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 800173a:	2201      	movs	r2, #1
 800173c:	2108      	movs	r1, #8
 800173e:	4804      	ldr	r0, [pc, #16]	; (8001750 <Page_Erase+0x74>)
 8001740:	f001 ff22 	bl	8003588 <HAL_GPIO_WritePin>
			return(HAL_OK);
 8001744:	2300      	movs	r3, #0

	}

}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40020000 	.word	0x40020000
 8001754:	20000380 	.word	0x20000380

08001758 <SELECT>:

extern SPI_HandleTypeDef hspi1;

/* SPI Chip Select */
static void SELECT(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	2110      	movs	r1, #16
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <SELECT+0x14>)
 8001762:	f001 ff11 	bl	8003588 <HAL_GPIO_WritePin>
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40020000 	.word	0x40020000

08001770 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	2110      	movs	r1, #16
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DESELECT+0x14>)
 800177a:	f001 ff05 	bl	8003588 <HAL_GPIO_WritePin>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40020000 	.word	0x40020000

08001788 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001792:	bf00      	nop
 8001794:	4808      	ldr	r0, [pc, #32]	; (80017b8 <SPI_TxByte+0x30>)
 8001796:	f005 f964 	bl	8006a62 <HAL_SPI_GetState>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d1f9      	bne.n	8001794 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80017a0:	1df9      	adds	r1, r7, #7
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	2201      	movs	r2, #1
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <SPI_TxByte+0x30>)
 80017aa:	f004 fe7c 	bl	80064a6 <HAL_SPI_Transmit>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000380 	.word	0x20000380

080017bc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80017c2:	23ff      	movs	r3, #255	; 0xff
 80017c4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80017ca:	bf00      	nop
 80017cc:	4809      	ldr	r0, [pc, #36]	; (80017f4 <SPI_RxByte+0x38>)
 80017ce:	f005 f948 	bl	8006a62 <HAL_SPI_GetState>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d1f9      	bne.n	80017cc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80017d8:	1dba      	adds	r2, r7, #6
 80017da:	1df9      	adds	r1, r7, #7
 80017dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2301      	movs	r3, #1
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <SPI_RxByte+0x38>)
 80017e6:	f004 ff9a 	bl	800671e <HAL_SPI_TransmitReceive>

  return data;
 80017ea:	79bb      	ldrb	r3, [r7, #6]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000380 	.word	0x20000380

080017f8 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001800:	f7ff ffdc 	bl	80017bc <SPI_RxByte>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	701a      	strb	r2, [r3, #0]
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <SD_ReadyWait+0x34>)
 800181c:	2232      	movs	r2, #50	; 0x32
 800181e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001820:	f7ff ffcc 	bl	80017bc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001824:	f7ff ffca 	bl	80017bc <SPI_RxByte>
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d004      	beq.n	800183c <SD_ReadyWait+0x28>
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <SD_ReadyWait+0x34>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f3      	bne.n	8001824 <SD_ReadyWait+0x10>

  return res;
 800183c:	79fb      	ldrb	r3, [r7, #7]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200024db 	.word	0x200024db

0800184c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001852:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001856:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001858:	f7ff ff8a 	bl	8001770 <DESELECT>

  for(int i = 0; i < 10; i++)
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	e005      	b.n	800186e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001862:	20ff      	movs	r0, #255	; 0xff
 8001864:	f7ff ff90 	bl	8001788 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	3301      	adds	r3, #1
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2b09      	cmp	r3, #9
 8001872:	ddf6      	ble.n	8001862 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001874:	f7ff ff70 	bl	8001758 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001878:	2340      	movs	r3, #64	; 0x40
 800187a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800188c:	2395      	movs	r3, #149	; 0x95
 800188e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e009      	b.n	80018aa <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001896:	1d3a      	adds	r2, r7, #4
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff72 	bl	8001788 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b05      	cmp	r3, #5
 80018ae:	ddf2      	ble.n	8001896 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80018b0:	e002      	b.n	80018b8 <SD_PowerOn+0x6c>
  {
    Count--;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80018b8:	f7ff ff80 	bl	80017bc <SPI_RxByte>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d002      	beq.n	80018c8 <SD_PowerOn+0x7c>
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f4      	bne.n	80018b2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80018c8:	f7ff ff52 	bl	8001770 <DESELECT>
  SPI_TxByte(0XFF);
 80018cc:	20ff      	movs	r0, #255	; 0xff
 80018ce:	f7ff ff5b 	bl	8001788 <SPI_TxByte>

  PowerFlag = 1;
 80018d2:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <SD_PowerOn+0x94>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000329 	.word	0x20000329

080018e4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <SD_PowerOff+0x14>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	20000329 	.word	0x20000329

080018fc <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <SD_CheckPower+0x14>)
 8001902:	781b      	ldrb	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000329 	.word	0x20000329

08001914 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <SD_RxDataBlock+0x68>)
 8001920:	220a      	movs	r2, #10
 8001922:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001924:	f7ff ff4a 	bl	80017bc <SPI_RxByte>
 8001928:	4603      	mov	r3, r0
 800192a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2bff      	cmp	r3, #255	; 0xff
 8001930:	d104      	bne.n	800193c <SD_RxDataBlock+0x28>
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <SD_RxDataBlock+0x68>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f3      	bne.n	8001924 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	2bfe      	cmp	r3, #254	; 0xfe
 8001940:	d001      	beq.n	8001946 <SD_RxDataBlock+0x32>
    return FALSE;
 8001942:	2300      	movs	r3, #0
 8001944:	e016      	b.n	8001974 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff53 	bl	80017f8 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff4d 	bl	80017f8 <SPI_RxBytePtr>
  } while(btr -= 2);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3b02      	subs	r3, #2
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ed      	bne.n	8001946 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800196a:	f7ff ff27 	bl	80017bc <SPI_RxByte>
  SPI_RxByte();
 800196e:	f7ff ff25 	bl	80017bc <SPI_RxByte>

  return TRUE;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200024da 	.word	0x200024da

08001980 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001990:	f7ff ff40 	bl	8001814 <SD_ReadyWait>
 8001994:	4603      	mov	r3, r0
 8001996:	2bff      	cmp	r3, #255	; 0xff
 8001998:	d001      	beq.n	800199e <SD_TxDataBlock+0x1e>
    return FALSE;
 800199a:	2300      	movs	r3, #0
 800199c:	e040      	b.n	8001a20 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fef1 	bl	8001788 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	2bfd      	cmp	r3, #253	; 0xfd
 80019aa:	d031      	beq.n	8001a10 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fee5 	bl	8001788 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fede 	bl	8001788 <SPI_TxByte>
    } while (--wc);
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	73bb      	strb	r3, [r7, #14]
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1eb      	bne.n	80019b0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80019d8:	f7ff fef0 	bl	80017bc <SPI_RxByte>
    SPI_RxByte();
 80019dc:	f7ff feee 	bl	80017bc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80019e0:	e00b      	b.n	80019fa <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80019e2:	f7ff feeb 	bl	80017bc <SPI_RxByte>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d006      	beq.n	8001a02 <SD_TxDataBlock+0x82>
        break;

      i++;
 80019f4:	7b7b      	ldrb	r3, [r7, #13]
 80019f6:	3301      	adds	r3, #1
 80019f8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80019fa:	7b7b      	ldrb	r3, [r7, #13]
 80019fc:	2b40      	cmp	r3, #64	; 0x40
 80019fe:	d9f0      	bls.n	80019e2 <SD_TxDataBlock+0x62>
 8001a00:	e000      	b.n	8001a04 <SD_TxDataBlock+0x84>
        break;
 8001a02:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001a04:	bf00      	nop
 8001a06:	f7ff fed9 	bl	80017bc <SPI_RxByte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0fa      	beq.n	8001a06 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d101      	bne.n	8001a1e <SD_TxDataBlock+0x9e>
    return TRUE;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001a34:	f7ff feee 	bl	8001814 <SD_ReadyWait>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2bff      	cmp	r3, #255	; 0xff
 8001a3c:	d001      	beq.n	8001a42 <SD_SendCmd+0x1a>
    return 0xFF;
 8001a3e:	23ff      	movs	r3, #255	; 0xff
 8001a40:	e040      	b.n	8001ac4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fe9f 	bl	8001788 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	0e1b      	lsrs	r3, r3, #24
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fe99 	bl	8001788 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fe93 	bl	8001788 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fe8d 	bl	8001788 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fe88 	bl	8001788 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b40      	cmp	r3, #64	; 0x40
 8001a80:	d101      	bne.n	8001a86 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001a82:	2395      	movs	r3, #149	; 0x95
 8001a84:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	2b48      	cmp	r3, #72	; 0x48
 8001a8a:	d101      	bne.n	8001a90 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001a8c:	2387      	movs	r3, #135	; 0x87
 8001a8e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fe78 	bl	8001788 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	2b4c      	cmp	r3, #76	; 0x4c
 8001a9c:	d101      	bne.n	8001aa2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001a9e:	f7ff fe8d 	bl	80017bc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001aa2:	230a      	movs	r3, #10
 8001aa4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001aa6:	f7ff fe89 	bl	80017bc <SPI_RxByte>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001aae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da05      	bge.n	8001ac2 <SD_SendCmd+0x9a>
 8001ab6:	7bbb      	ldrb	r3, [r7, #14]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	73bb      	strb	r3, [r7, #14]
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f1      	bne.n	8001aa6 <SD_SendCmd+0x7e>

  return res;
 8001ac2:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0d5      	b.n	8001c8c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001ae0:	4b6c      	ldr	r3, [pc, #432]	; (8001c94 <SD_disk_initialize+0x1c8>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <SD_disk_initialize+0x2a>
    return Stat;
 8001aee:	4b69      	ldr	r3, [pc, #420]	; (8001c94 <SD_disk_initialize+0x1c8>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	e0ca      	b.n	8001c8c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001af6:	f7ff fea9 	bl	800184c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001afa:	f7ff fe2d 	bl	8001758 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001b02:	2100      	movs	r1, #0
 8001b04:	2040      	movs	r0, #64	; 0x40
 8001b06:	f7ff ff8f 	bl	8001a28 <SD_SendCmd>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	f040 80a5 	bne.w	8001c5c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001b12:	4b61      	ldr	r3, [pc, #388]	; (8001c98 <SD_disk_initialize+0x1cc>)
 8001b14:	2264      	movs	r2, #100	; 0x64
 8001b16:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001b18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001b1c:	2048      	movs	r0, #72	; 0x48
 8001b1e:	f7ff ff83 	bl	8001a28 <SD_SendCmd>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d158      	bne.n	8001bda <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
 8001b2c:	e00c      	b.n	8001b48 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001b2e:	7bfc      	ldrb	r4, [r7, #15]
 8001b30:	f7ff fe44 	bl	80017bc <SPI_RxByte>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	f104 0310 	add.w	r3, r4, #16
 8001b3c:	443b      	add	r3, r7
 8001b3e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	3301      	adds	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d9ef      	bls.n	8001b2e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001b4e:	7abb      	ldrb	r3, [r7, #10]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	f040 8083 	bne.w	8001c5c <SD_disk_initialize+0x190>
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	2baa      	cmp	r3, #170	; 0xaa
 8001b5a:	d17f      	bne.n	8001c5c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2077      	movs	r0, #119	; 0x77
 8001b60:	f7ff ff62 	bl	8001a28 <SD_SendCmd>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d807      	bhi.n	8001b7a <SD_disk_initialize+0xae>
 8001b6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b6e:	2069      	movs	r0, #105	; 0x69
 8001b70:	f7ff ff5a 	bl	8001a28 <SD_SendCmd>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d005      	beq.n	8001b86 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001b7a:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <SD_disk_initialize+0x1cc>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1eb      	bne.n	8001b5c <SD_disk_initialize+0x90>
 8001b84:	e000      	b.n	8001b88 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001b86:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b88:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <SD_disk_initialize+0x1cc>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d064      	beq.n	8001c5c <SD_disk_initialize+0x190>
 8001b92:	2100      	movs	r1, #0
 8001b94:	207a      	movs	r0, #122	; 0x7a
 8001b96:	f7ff ff47 	bl	8001a28 <SD_SendCmd>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d15d      	bne.n	8001c5c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e00c      	b.n	8001bc0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001ba6:	7bfc      	ldrb	r4, [r7, #15]
 8001ba8:	f7ff fe08 	bl	80017bc <SPI_RxByte>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f104 0310 	add.w	r3, r4, #16
 8001bb4:	443b      	add	r3, r7
 8001bb6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d9ef      	bls.n	8001ba6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001bc6:	7a3b      	ldrb	r3, [r7, #8]
 8001bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <SD_disk_initialize+0x108>
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	e000      	b.n	8001bd6 <SD_disk_initialize+0x10a>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	73bb      	strb	r3, [r7, #14]
 8001bd8:	e040      	b.n	8001c5c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2077      	movs	r0, #119	; 0x77
 8001bde:	f7ff ff23 	bl	8001a28 <SD_SendCmd>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d808      	bhi.n	8001bfa <SD_disk_initialize+0x12e>
 8001be8:	2100      	movs	r1, #0
 8001bea:	2069      	movs	r0, #105	; 0x69
 8001bec:	f7ff ff1c 	bl	8001a28 <SD_SendCmd>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d801      	bhi.n	8001bfa <SD_disk_initialize+0x12e>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e000      	b.n	8001bfc <SD_disk_initialize+0x130>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001bfe:	7bbb      	ldrb	r3, [r7, #14]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d10e      	bne.n	8001c22 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001c04:	2100      	movs	r1, #0
 8001c06:	2077      	movs	r0, #119	; 0x77
 8001c08:	f7ff ff0e 	bl	8001a28 <SD_SendCmd>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d80e      	bhi.n	8001c30 <SD_disk_initialize+0x164>
 8001c12:	2100      	movs	r1, #0
 8001c14:	2069      	movs	r0, #105	; 0x69
 8001c16:	f7ff ff07 	bl	8001a28 <SD_SendCmd>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d107      	bne.n	8001c30 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001c20:	e00d      	b.n	8001c3e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001c22:	2100      	movs	r1, #0
 8001c24:	2041      	movs	r0, #65	; 0x41
 8001c26:	f7ff feff 	bl	8001a28 <SD_SendCmd>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <SD_disk_initialize+0x1cc>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1e1      	bne.n	8001bfe <SD_disk_initialize+0x132>
 8001c3a:	e000      	b.n	8001c3e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001c3c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <SD_disk_initialize+0x1cc>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d007      	beq.n	8001c58 <SD_disk_initialize+0x18c>
 8001c48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c4c:	2050      	movs	r0, #80	; 0x50
 8001c4e:	f7ff feeb 	bl	8001a28 <SD_SendCmd>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <SD_disk_initialize+0x1d0>)
 8001c5e:	7bbb      	ldrb	r3, [r7, #14]
 8001c60:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001c62:	f7ff fd85 	bl	8001770 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001c66:	f7ff fda9 	bl	80017bc <SPI_RxByte>

  if (type)
 8001c6a:	7bbb      	ldrb	r3, [r7, #14]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <SD_disk_initialize+0x1c8>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SD_disk_initialize+0x1c8>)
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	e001      	b.n	8001c86 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001c82:	f7ff fe2f 	bl	80018e4 <SD_PowerOff>
  }

  return Stat;
 8001c86:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <SD_disk_initialize+0x1c8>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b2db      	uxtb	r3, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd90      	pop	{r4, r7, pc}
 8001c94:	20000000 	.word	0x20000000
 8001c98:	200024da 	.word	0x200024da
 8001c9c:	20000328 	.word	0x20000328

08001ca0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e002      	b.n	8001cba <SD_disk_status+0x1a>

  return Stat;
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <SD_disk_status+0x28>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000000 	.word	0x20000000

08001ccc <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	4603      	mov	r3, r0
 8001cda:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <SD_disk_read+0x1c>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <SD_disk_read+0x20>
    return RES_PARERR;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	e051      	b.n	8001d90 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <SD_disk_read+0xcc>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e048      	b.n	8001d90 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <SD_disk_read+0xd0>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	025b      	lsls	r3, r3, #9
 8001d0e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001d10:	f7ff fd22 	bl	8001758 <SELECT>

  if (count == 1)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d111      	bne.n	8001d3e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	2051      	movs	r0, #81	; 0x51
 8001d1e:	f7ff fe83 	bl	8001a28 <SD_SendCmd>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d129      	bne.n	8001d7c <SD_disk_read+0xb0>
 8001d28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d2c:	68b8      	ldr	r0, [r7, #8]
 8001d2e:	f7ff fdf1 	bl	8001914 <SD_RxDataBlock>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d021      	beq.n	8001d7c <SD_disk_read+0xb0>
      count = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	e01e      	b.n	8001d7c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	2052      	movs	r0, #82	; 0x52
 8001d42:	f7ff fe71 	bl	8001a28 <SD_SendCmd>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d117      	bne.n	8001d7c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d50:	68b8      	ldr	r0, [r7, #8]
 8001d52:	f7ff fddf 	bl	8001914 <SD_RxDataBlock>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00a      	beq.n	8001d72 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d62:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ed      	bne.n	8001d4c <SD_disk_read+0x80>
 8001d70:	e000      	b.n	8001d74 <SD_disk_read+0xa8>
          break;
 8001d72:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001d74:	2100      	movs	r1, #0
 8001d76:	204c      	movs	r0, #76	; 0x4c
 8001d78:	f7ff fe56 	bl	8001a28 <SD_SendCmd>
    }
  }

  DESELECT();
 8001d7c:	f7ff fcf8 	bl	8001770 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001d80:	f7ff fd1c 	bl	80017bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	bf14      	ite	ne
 8001d8a:	2301      	movne	r3, #1
 8001d8c:	2300      	moveq	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000328 	.word	0x20000328

08001da0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	4603      	mov	r3, r0
 8001dae:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <SD_disk_write+0x1c>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <SD_disk_write+0x20>
    return RES_PARERR;
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	e06b      	b.n	8001e98 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001dc0:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <SD_disk_write+0x100>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e062      	b.n	8001e98 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001dd2:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <SD_disk_write+0x100>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001de0:	2302      	movs	r3, #2
 8001de2:	e059      	b.n	8001e98 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001de4:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <SD_disk_write+0x104>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	025b      	lsls	r3, r3, #9
 8001df4:	607b      	str	r3, [r7, #4]

  SELECT();
 8001df6:	f7ff fcaf 	bl	8001758 <SELECT>

  if (count == 1)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d110      	bne.n	8001e22 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	2058      	movs	r0, #88	; 0x58
 8001e04:	f7ff fe10 	bl	8001a28 <SD_SendCmd>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d13a      	bne.n	8001e84 <SD_disk_write+0xe4>
 8001e0e:	21fe      	movs	r1, #254	; 0xfe
 8001e10:	68b8      	ldr	r0, [r7, #8]
 8001e12:	f7ff fdb5 	bl	8001980 <SD_TxDataBlock>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d033      	beq.n	8001e84 <SD_disk_write+0xe4>
      count = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	e030      	b.n	8001e84 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001e22:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <SD_disk_write+0x104>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2077      	movs	r0, #119	; 0x77
 8001e32:	f7ff fdf9 	bl	8001a28 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	2057      	movs	r0, #87	; 0x57
 8001e3a:	f7ff fdf5 	bl	8001a28 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	2059      	movs	r0, #89	; 0x59
 8001e42:	f7ff fdf1 	bl	8001a28 <SD_SendCmd>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d11b      	bne.n	8001e84 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001e4c:	21fc      	movs	r1, #252	; 0xfc
 8001e4e:	68b8      	ldr	r0, [r7, #8]
 8001e50:	f7ff fd96 	bl	8001980 <SD_TxDataBlock>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e60:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ee      	bne.n	8001e4c <SD_disk_write+0xac>
 8001e6e:	e000      	b.n	8001e72 <SD_disk_write+0xd2>
          break;
 8001e70:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001e72:	21fd      	movs	r1, #253	; 0xfd
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fd83 	bl	8001980 <SD_TxDataBlock>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <SD_disk_write+0xe4>
      {
        count = 1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001e84:	f7ff fc74 	bl	8001770 <DESELECT>
  SPI_RxByte();
 8001e88:	f7ff fc98 	bl	80017bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf14      	ite	ne
 8001e92:	2301      	movne	r3, #1
 8001e94:	2300      	moveq	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000328 	.word	0x20000328

08001ea8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b08b      	sub	sp, #44	; 0x2c
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	603a      	str	r2, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e11b      	b.n	80020fe <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001ecc:	79bb      	ldrb	r3, [r7, #6]
 8001ece:	2b05      	cmp	r3, #5
 8001ed0:	d129      	bne.n	8001f26 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d017      	beq.n	8001f0a <SD_disk_ioctl+0x62>
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	dc1f      	bgt.n	8001f1e <SD_disk_ioctl+0x76>
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <SD_disk_ioctl+0x40>
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d00b      	beq.n	8001efe <SD_disk_ioctl+0x56>
 8001ee6:	e01a      	b.n	8001f1e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001ee8:	f7ff fd08 	bl	80018fc <SD_CheckPower>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001ef2:	f7ff fcf7 	bl	80018e4 <SD_PowerOff>
      res = RES_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001efc:	e0fd      	b.n	80020fa <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001efe:	f7ff fca5 	bl	800184c <SD_PowerOn>
      res = RES_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f08:	e0f7      	b.n	80020fa <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	1c5c      	adds	r4, r3, #1
 8001f0e:	f7ff fcf5 	bl	80018fc <SD_CheckPower>
 8001f12:	4603      	mov	r3, r0
 8001f14:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001f16:	2300      	movs	r3, #0
 8001f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f1c:	e0ed      	b.n	80020fa <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f24:	e0e9      	b.n	80020fa <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001f26:	4b78      	ldr	r3, [pc, #480]	; (8002108 <SD_disk_ioctl+0x260>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0e2      	b.n	80020fe <SD_disk_ioctl+0x256>

    SELECT();
 8001f38:	f7ff fc0e 	bl	8001758 <SELECT>

    switch (ctrl)
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	2b0d      	cmp	r3, #13
 8001f40:	f200 80cc 	bhi.w	80020dc <SD_disk_ioctl+0x234>
 8001f44:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <SD_disk_ioctl+0xa4>)
 8001f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4a:	bf00      	nop
 8001f4c:	08002047 	.word	0x08002047
 8001f50:	08001f85 	.word	0x08001f85
 8001f54:	08002037 	.word	0x08002037
 8001f58:	080020dd 	.word	0x080020dd
 8001f5c:	080020dd 	.word	0x080020dd
 8001f60:	080020dd 	.word	0x080020dd
 8001f64:	080020dd 	.word	0x080020dd
 8001f68:	080020dd 	.word	0x080020dd
 8001f6c:	080020dd 	.word	0x080020dd
 8001f70:	080020dd 	.word	0x080020dd
 8001f74:	080020dd 	.word	0x080020dd
 8001f78:	08002059 	.word	0x08002059
 8001f7c:	0800207d 	.word	0x0800207d
 8001f80:	080020a1 	.word	0x080020a1
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001f84:	2100      	movs	r1, #0
 8001f86:	2049      	movs	r0, #73	; 0x49
 8001f88:	f7ff fd4e 	bl	8001a28 <SD_SendCmd>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80a8 	bne.w	80020e4 <SD_disk_ioctl+0x23c>
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	2110      	movs	r1, #16
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fcba 	bl	8001914 <SD_RxDataBlock>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 809e 	beq.w	80020e4 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001fa8:	7b3b      	ldrb	r3, [r7, #12]
 8001faa:	099b      	lsrs	r3, r3, #6
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10e      	bne.n	8001fd0 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001fb2:	7d7b      	ldrb	r3, [r7, #21]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	7d3b      	ldrb	r3, [r7, #20]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001fc6:	8bfb      	ldrh	r3, [r7, #30]
 8001fc8:	029a      	lsls	r2, r3, #10
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e02e      	b.n	800202e <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001fd0:	7c7b      	ldrb	r3, [r7, #17]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	7dbb      	ldrb	r3, [r7, #22]
 8001fda:	09db      	lsrs	r3, r3, #7
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	7d7b      	ldrb	r3, [r7, #21]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f003 0306 	and.w	r3, r3, #6
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001ff8:	7d3b      	ldrb	r3, [r7, #20]
 8001ffa:	099b      	lsrs	r3, r3, #6
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	b29b      	uxth	r3, r3
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	b29b      	uxth	r3, r3
 8002008:	4413      	add	r3, r2
 800200a:	b29a      	uxth	r2, r3
 800200c:	7cbb      	ldrb	r3, [r7, #18]
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	b29b      	uxth	r3, r3
 8002012:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002016:	b29b      	uxth	r3, r3
 8002018:	4413      	add	r3, r2
 800201a:	b29b      	uxth	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002020:	8bfa      	ldrh	r2, [r7, #30]
 8002022:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002026:	3b09      	subs	r3, #9
 8002028:	409a      	lsls	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8002034:	e056      	b.n	80020e4 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800203c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002044:	e055      	b.n	80020f2 <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002046:	f7ff fbe5 	bl	8001814 <SD_ReadyWait>
 800204a:	4603      	mov	r3, r0
 800204c:	2bff      	cmp	r3, #255	; 0xff
 800204e:	d14b      	bne.n	80020e8 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002056:	e047      	b.n	80020e8 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002058:	2100      	movs	r1, #0
 800205a:	2049      	movs	r0, #73	; 0x49
 800205c:	f7ff fce4 	bl	8001a28 <SD_SendCmd>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d142      	bne.n	80020ec <SD_disk_ioctl+0x244>
 8002066:	2110      	movs	r1, #16
 8002068:	6a38      	ldr	r0, [r7, #32]
 800206a:	f7ff fc53 	bl	8001914 <SD_RxDataBlock>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d03b      	beq.n	80020ec <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800207a:	e037      	b.n	80020ec <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800207c:	2100      	movs	r1, #0
 800207e:	204a      	movs	r0, #74	; 0x4a
 8002080:	f7ff fcd2 	bl	8001a28 <SD_SendCmd>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d132      	bne.n	80020f0 <SD_disk_ioctl+0x248>
 800208a:	2110      	movs	r1, #16
 800208c:	6a38      	ldr	r0, [r7, #32]
 800208e:	f7ff fc41 	bl	8001914 <SD_RxDataBlock>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d02b      	beq.n	80020f0 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800209e:	e027      	b.n	80020f0 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80020a0:	2100      	movs	r1, #0
 80020a2:	207a      	movs	r0, #122	; 0x7a
 80020a4:	f7ff fcc0 	bl	8001a28 <SD_SendCmd>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020b4:	e00b      	b.n	80020ce <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80020b6:	6a3c      	ldr	r4, [r7, #32]
 80020b8:	1c63      	adds	r3, r4, #1
 80020ba:	623b      	str	r3, [r7, #32]
 80020bc:	f7ff fb7e 	bl	80017bc <SPI_RxByte>
 80020c0:	4603      	mov	r3, r0
 80020c2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80020c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020c8:	3301      	adds	r3, #1
 80020ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d9ef      	bls.n	80020b6 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80020dc:	2304      	movs	r3, #4
 80020de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020e2:	e006      	b.n	80020f2 <SD_disk_ioctl+0x24a>
      break;
 80020e4:	bf00      	nop
 80020e6:	e004      	b.n	80020f2 <SD_disk_ioctl+0x24a>
      break;
 80020e8:	bf00      	nop
 80020ea:	e002      	b.n	80020f2 <SD_disk_ioctl+0x24a>
      break;
 80020ec:	bf00      	nop
 80020ee:	e000      	b.n	80020f2 <SD_disk_ioctl+0x24a>
      break;
 80020f0:	bf00      	nop
    }

    DESELECT();
 80020f2:	f7ff fb3d 	bl	8001770 <DESELECT>
    SPI_RxByte();
 80020f6:	f7ff fb61 	bl	80017bc <SPI_RxByte>
  }

  return res;
 80020fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020fe:	4618      	mov	r0, r3
 8002100:	372c      	adds	r7, #44	; 0x2c
 8002102:	46bd      	mov	sp, r7
 8002104:	bd90      	pop	{r4, r7, pc}
 8002106:	bf00      	nop
 8002108:	20000000 	.word	0x20000000

0800210c <float_8bit>:
	CDC_Transmit_FS(&var8bit[3], 1);
	HAL_Delay(200);

}

void float_8bit(float value, uint8_t* data){
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	ed87 0a01 	vstr	s0, [r7, #4]
 8002116:	6038      	str	r0, [r7, #0]
	int16_t a=value*100;
 8002118:	edd7 7a01 	vldr	s15, [r7, #4]
 800211c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002154 <float_8bit+0x48>
 8002120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002128:	ee17 3a90 	vmov	r3, s15
 800212c:	81fb      	strh	r3, [r7, #14]
	data[0]=a;
 800212e:	89fb      	ldrh	r3, [r7, #14]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	701a      	strb	r2, [r3, #0]
	data[1]=a>>8;
 8002136:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800213a:	121b      	asrs	r3, r3, #8
 800213c:	b21a      	sxth	r2, r3
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]

}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	42c80000 	.word	0x42c80000

08002158 <bit8_to_float>:

float bit8_to_float(uint8_t* data){
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	int16_t a = ((uint16_t)data[1]<<8)|data[0];
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3301      	adds	r3, #1
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b21b      	sxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	81fb      	strh	r3, [r7, #14]
	return(((float)a)/100);
 8002174:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002178:	ee07 3a90 	vmov	s15, r3
 800217c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002180:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800219c <bit8_to_float+0x44>
 8002184:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002188:	eef0 7a66 	vmov.f32	s15, s13
}
 800218c:	eeb0 0a67 	vmov.f32	s0, s15
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	42c80000 	.word	0x42c80000

080021a0 <write_seq>:

void write_seq(uint32_t x_addr,uint32_t y_addr, uint32_t z_addr,uint32_t t_addr){
 80021a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021a4:	b0ac      	sub	sp, #176	; 0xb0
 80021a6:	af08      	add	r7, sp, #32
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	603b      	str	r3, [r7, #0]
	uint8_t y_acc[2];
	uint8_t z_acc[2];
	uint8_t t_8bit[2];
	char mess[100];

	ACC_R(ACC);
 80021b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe ff7b 	bl	80010b0 <ACC_R>
	t_last+=((float)__HAL_TIM_GET_COUNTER(&htim2))*(0.000001);
 80021ba:	4b51      	ldr	r3, [pc, #324]	; (8002300 <write_seq+0x160>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c8:	ee17 0a90 	vmov	r0, s15
 80021cc:	f7fe f9c4 	bl	8000558 <__aeabi_f2d>
 80021d0:	a349      	add	r3, pc, #292	; (adr r3, 80022f8 <write_seq+0x158>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fe fa17 	bl	8000608 <__aeabi_dmul>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4614      	mov	r4, r2
 80021e0:	461d      	mov	r5, r3
 80021e2:	4b48      	ldr	r3, [pc, #288]	; (8002304 <write_seq+0x164>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f9b6 	bl	8000558 <__aeabi_f2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4620      	mov	r0, r4
 80021f2:	4629      	mov	r1, r5
 80021f4:	f7fe f852 	bl	800029c <__adddf3>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fcda 	bl	8000bb8 <__aeabi_d2f>
 8002204:	4603      	mov	r3, r0
 8002206:	4a3f      	ldr	r2, [pc, #252]	; (8002304 <write_seq+0x164>)
 8002208:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <write_seq+0x160>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2200      	movs	r2, #0
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
	float_8bit(ACC[0], x_acc);
 8002212:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002216:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800221a:	4618      	mov	r0, r3
 800221c:	eeb0 0a67 	vmov.f32	s0, s15
 8002220:	f7ff ff74 	bl	800210c <float_8bit>
	float_8bit(ACC[1], y_acc);
 8002224:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002228:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800222c:	4618      	mov	r0, r3
 800222e:	eeb0 0a67 	vmov.f32	s0, s15
 8002232:	f7ff ff6b 	bl	800210c <float_8bit>
	float_8bit(ACC[2], z_acc);
 8002236:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800223a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800223e:	4618      	mov	r0, r3
 8002240:	eeb0 0a67 	vmov.f32	s0, s15
 8002244:	f7ff ff62 	bl	800210c <float_8bit>
	float_8bit(t_last, t_8bit);
 8002248:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <write_seq+0x164>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002252:	4618      	mov	r0, r3
 8002254:	eeb0 0a67 	vmov.f32	s0, s15
 8002258:	f7ff ff58 	bl	800210c <float_8bit>
	MEM_AAI_W(x_addr, 2, x_acc);
 800225c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002260:	461a      	mov	r2, r3
 8002262:	2102      	movs	r1, #2
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f7ff f9cd 	bl	8001604 <MEM_AAI_W>
	MEM_AAI_W(y_addr, 2, y_acc);
 800226a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800226e:	461a      	mov	r2, r3
 8002270:	2102      	movs	r1, #2
 8002272:	68b8      	ldr	r0, [r7, #8]
 8002274:	f7ff f9c6 	bl	8001604 <MEM_AAI_W>
	MEM_AAI_W(z_addr, 2, z_acc);
 8002278:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800227c:	461a      	mov	r2, r3
 800227e:	2102      	movs	r1, #2
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff f9bf 	bl	8001604 <MEM_AAI_W>
	MEM_AAI_W(t_addr, 2, t_8bit);
 8002286:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800228a:	461a      	mov	r2, r3
 800228c:	2102      	movs	r1, #2
 800228e:	6838      	ldr	r0, [r7, #0]
 8002290:	f7ff f9b8 	bl	8001604 <MEM_AAI_W>
	sprintf(mess,"Writing %.2f, %.2f,  %.2f, %.2f at address 0x%X\r\n",ACC[0],ACC[1],ACC[2],t_last,x_addr);
 8002294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f95d 	bl	8000558 <__aeabi_f2d>
 800229e:	4682      	mov	sl, r0
 80022a0:	468b      	mov	fp, r1
 80022a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f956 	bl	8000558 <__aeabi_f2d>
 80022ac:	4604      	mov	r4, r0
 80022ae:	460d      	mov	r5, r1
 80022b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe f94f 	bl	8000558 <__aeabi_f2d>
 80022ba:	4680      	mov	r8, r0
 80022bc:	4689      	mov	r9, r1
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <write_seq+0x164>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f948 	bl	8000558 <__aeabi_f2d>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	f107 0010 	add.w	r0, r7, #16
 80022d0:	68f9      	ldr	r1, [r7, #12]
 80022d2:	9106      	str	r1, [sp, #24]
 80022d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80022d8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80022dc:	e9cd 4500 	strd	r4, r5, [sp]
 80022e0:	4652      	mov	r2, sl
 80022e2:	465b      	mov	r3, fp
 80022e4:	4908      	ldr	r1, [pc, #32]	; (8002308 <write_seq+0x168>)
 80022e6:	f00e fa49 	bl	801077c <siprintf>
	//CDC_Transmit_FS(mess, strlen(mess));
}
 80022ea:	bf00      	nop
 80022ec:	3790      	adds	r7, #144	; 0x90
 80022ee:	46bd      	mov	sp, r7
 80022f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022f4:	f3af 8000 	nop.w
 80022f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80022fc:	3eb0c6f7 	.word	0x3eb0c6f7
 8002300:	20000420 	.word	0x20000420
 8002304:	200024d4 	.word	0x200024d4
 8002308:	08012d50 	.word	0x08012d50

0800230c <read_seq>:
 *	z_addr(uint32_t):24 bit address from within Z_PAGE to begin reading from
 *	t (float): Time in seconds since beginning read
 *
 * */

uint8_t read_seq(uint32_t x_addr,uint32_t y_addr, uint32_t z_addr,uint32_t t_addr){
 800230c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002310:	b0ac      	sub	sp, #176	; 0xb0
 8002312:	af06      	add	r7, sp, #24
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	603b      	str	r3, [r7, #0]
	uint8_t x_rec[2];
	uint8_t y_rec[2];
	uint8_t z_rec[2];
	uint8_t t_rec[2];

	MEM_R(x_addr, 2, x_rec);
 800231c:	f107 0320 	add.w	r3, r7, #32
 8002320:	461a      	mov	r2, r3
 8002322:	2102      	movs	r1, #2
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7ff f8c3 	bl	80014b0 <MEM_R>
	HAL_Delay(1);
 800232a:	2001      	movs	r0, #1
 800232c:	f000 fe5a 	bl	8002fe4 <HAL_Delay>
	MEM_R(y_addr, 2, y_rec);
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	461a      	mov	r2, r3
 8002336:	2102      	movs	r1, #2
 8002338:	68b8      	ldr	r0, [r7, #8]
 800233a:	f7ff f8b9 	bl	80014b0 <MEM_R>
	HAL_Delay(1);
 800233e:	2001      	movs	r0, #1
 8002340:	f000 fe50 	bl	8002fe4 <HAL_Delay>
	MEM_R(z_addr, 2, z_rec);
 8002344:	f107 0318 	add.w	r3, r7, #24
 8002348:	461a      	mov	r2, r3
 800234a:	2102      	movs	r1, #2
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff f8af 	bl	80014b0 <MEM_R>
	HAL_Delay(1);
 8002352:	2001      	movs	r0, #1
 8002354:	f000 fe46 	bl	8002fe4 <HAL_Delay>
	MEM_R(t_addr, 2, t_rec);
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	461a      	mov	r2, r3
 800235e:	2102      	movs	r1, #2
 8002360:	6838      	ldr	r0, [r7, #0]
 8002362:	f7ff f8a5 	bl	80014b0 <MEM_R>
	HAL_Delay(1);
 8002366:	2001      	movs	r0, #1
 8002368:	f000 fe3c 	bl	8002fe4 <HAL_Delay>
	x_f=bit8_to_float(x_rec);
 800236c:	f107 0320 	add.w	r3, r7, #32
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fef1 	bl	8002158 <bit8_to_float>
 8002376:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	y_f=bit8_to_float(y_rec);
 800237a:	f107 031c 	add.w	r3, r7, #28
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff feea 	bl	8002158 <bit8_to_float>
 8002384:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
	z_f=bit8_to_float(z_rec);
 8002388:	f107 0318 	add.w	r3, r7, #24
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fee3 	bl	8002158 <bit8_to_float>
 8002392:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	t=bit8_to_float(t_rec);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fedc 	bl	8002158 <bit8_to_float>
 80023a0:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
	if((int)(t*100)==-1){
 80023a4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80023a8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002430 <read_seq+0x124>
 80023ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b4:	ee17 3a90 	vmov	r3, s15
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d101      	bne.n	80023c2 <read_seq+0xb6>
		return(1);
 80023be:	2301      	movs	r3, #1
 80023c0:	e031      	b.n	8002426 <read_seq+0x11a>
	}
	sprintf(mess,"%.2f, %.2f, %.2f, %.2f \r\n",t,x_f,y_f,z_f);
 80023c2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80023c6:	f7fe f8c7 	bl	8000558 <__aeabi_f2d>
 80023ca:	4682      	mov	sl, r0
 80023cc:	468b      	mov	fp, r1
 80023ce:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80023d2:	f7fe f8c1 	bl	8000558 <__aeabi_f2d>
 80023d6:	4604      	mov	r4, r0
 80023d8:	460d      	mov	r5, r1
 80023da:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80023de:	f7fe f8bb 	bl	8000558 <__aeabi_f2d>
 80023e2:	4680      	mov	r8, r0
 80023e4:	4689      	mov	r9, r1
 80023e6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80023ea:	f7fe f8b5 	bl	8000558 <__aeabi_f2d>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80023f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80023fe:	e9cd 4500 	strd	r4, r5, [sp]
 8002402:	4652      	mov	r2, sl
 8002404:	465b      	mov	r3, fp
 8002406:	490b      	ldr	r1, [pc, #44]	; (8002434 <read_seq+0x128>)
 8002408:	f00e f9b8 	bl	801077c <siprintf>
	f_write(&fil, mess, strlen(mess), &bw);
 800240c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002410:	4618      	mov	r0, r3
 8002412:	f7fd fee5 	bl	80001e0 <strlen>
 8002416:	4602      	mov	r2, r0
 8002418:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <read_seq+0x12c>)
 800241e:	4807      	ldr	r0, [pc, #28]	; (800243c <read_seq+0x130>)
 8002420:	f00c fb80 	bl	800eb24 <f_write>
	//CDC_Transmit_FS(mess, strlen(mess));
	return(0);
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3798      	adds	r7, #152	; 0x98
 800242a:	46bd      	mov	sp, r7
 800242c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002430:	42c80000 	.word	0x42c80000
 8002434:	08012d84 	.word	0x08012d84
 8002438:	200024d0 	.word	0x200024d0
 800243c:	200014a0 	.word	0x200014a0

08002440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002446:	f000 fd5b 	bl	8002f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800244a:	f000 f925 	bl	8002698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800244e:	f000 fa8f 	bl	8002970 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002452:	f000 f98d 	bl	8002770 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002456:	f000 f9b9 	bl	80027cc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800245a:	f00d f807 	bl	800f46c <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 800245e:	f006 fb21 	bl	8008aa4 <MX_FATFS_Init>
  MX_TIM1_Init();
 8002462:	f000 f9e9 	bl	8002838 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002466:	f000 fa37 	bl	80028d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800246a:	2201      	movs	r2, #1
 800246c:	2104      	movs	r1, #4
 800246e:	4880      	ldr	r0, [pc, #512]	; (8002670 <main+0x230>)
 8002470:	f001 f88a 	bl	8003588 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim1); //used for delay() function
 8002474:	487f      	ldr	r0, [pc, #508]	; (8002674 <main+0x234>)
 8002476:	f004 fc1d 	bl	8006cb4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2); //used for timing acceleration measurements
 800247a:	487f      	ldr	r0, [pc, #508]	; (8002678 <main+0x238>)
 800247c:	f004 fc1a 	bl	8006cb4 <HAL_TIM_Base_Start>
  HAL_Delay(3000);
 8002480:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002484:	f000 fdae 	bl	8002fe4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, CS_SD, 1);
 8002488:	2201      	movs	r2, #1
 800248a:	2110      	movs	r1, #16
 800248c:	4878      	ldr	r0, [pc, #480]	; (8002670 <main+0x230>)
 800248e:	f001 f87b 	bl	8003588 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_MEM, 1);
 8002492:	2201      	movs	r2, #1
 8002494:	2108      	movs	r1, #8
 8002496:	4876      	ldr	r0, [pc, #472]	; (8002670 <main+0x230>)
 8002498:	f001 f876 	bl	8003588 <HAL_GPIO_WritePin>
  while(ACC_INIT()!=HAL_OK){
 800249c:	e00f      	b.n	80024be <main+0x7e>
	  HAL_GPIO_WritePin(GPIOB, I2C_LED, 1);
 800249e:	2201      	movs	r2, #1
 80024a0:	2120      	movs	r1, #32
 80024a2:	4876      	ldr	r0, [pc, #472]	; (800267c <main+0x23c>)
 80024a4:	f001 f870 	bl	8003588 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80024a8:	2064      	movs	r0, #100	; 0x64
 80024aa:	f000 fd9b 	bl	8002fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, I2C_LED, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2120      	movs	r1, #32
 80024b2:	4872      	ldr	r0, [pc, #456]	; (800267c <main+0x23c>)
 80024b4:	f001 f868 	bl	8003588 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80024b8:	2064      	movs	r0, #100	; 0x64
 80024ba:	f000 fd93 	bl	8002fe4 <HAL_Delay>
  while(ACC_INIT()!=HAL_OK){
 80024be:	f7fe fd4d 	bl	8000f5c <ACC_INIT>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ea      	bne.n	800249e <main+0x5e>
  }

  HAL_GPIO_WritePin(GPIOB, I2C_LED, 1);
 80024c8:	2201      	movs	r2, #1
 80024ca:	2120      	movs	r1, #32
 80024cc:	486b      	ldr	r0, [pc, #428]	; (800267c <main+0x23c>)
 80024ce:	f001 f85b 	bl	8003588 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80024d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024d6:	f000 fd85 	bl	8002fe4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, I2C_LED, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2120      	movs	r1, #32
 80024de:	4867      	ldr	r0, [pc, #412]	; (800267c <main+0x23c>)
 80024e0:	f001 f852 	bl	8003588 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80024e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024e8:	f000 fd7c 	bl	8002fe4 <HAL_Delay>

  while(MEM_Status_W(0x00)!=HAL_OK){
 80024ec:	e00f      	b.n	800250e <main+0xce>
	  HAL_GPIO_WritePin(GPIOB, MEM_LED, 1);
 80024ee:	2201      	movs	r2, #1
 80024f0:	2102      	movs	r1, #2
 80024f2:	4862      	ldr	r0, [pc, #392]	; (800267c <main+0x23c>)
 80024f4:	f001 f848 	bl	8003588 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80024f8:	2064      	movs	r0, #100	; 0x64
 80024fa:	f000 fd73 	bl	8002fe4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, MEM_LED, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2102      	movs	r1, #2
 8002502:	485e      	ldr	r0, [pc, #376]	; (800267c <main+0x23c>)
 8002504:	f001 f840 	bl	8003588 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002508:	2064      	movs	r0, #100	; 0x64
 800250a:	f000 fd6b 	bl	8002fe4 <HAL_Delay>
  while(MEM_Status_W(0x00)!=HAL_OK){
 800250e:	2000      	movs	r0, #0
 8002510:	f7fe ff7a 	bl	8001408 <MEM_Status_W>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1e9      	bne.n	80024ee <main+0xae>
  }

  HAL_GPIO_WritePin(GPIOB, MEM_LED, 1);
 800251a:	2201      	movs	r2, #1
 800251c:	2102      	movs	r1, #2
 800251e:	4857      	ldr	r0, [pc, #348]	; (800267c <main+0x23c>)
 8002520:	f001 f832 	bl	8003588 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8002524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002528:	f000 fd5c 	bl	8002fe4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, MEM_LED, 0);
 800252c:	2200      	movs	r2, #0
 800252e:	2102      	movs	r1, #2
 8002530:	4852      	ldr	r0, [pc, #328]	; (800267c <main+0x23c>)
 8002532:	f001 f829 	bl	8003588 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8002536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800253a:	f000 fd53 	bl	8002fe4 <HAL_Delay>

  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)!=1){
 800253e:	2101      	movs	r1, #1
 8002540:	484e      	ldr	r0, [pc, #312]	; (800267c <main+0x23c>)
 8002542:	f001 f809 	bl	8003558 <HAL_GPIO_ReadPin>
 8002546:	4603      	mov	r3, r0
 8002548:	2b01      	cmp	r3, #1
 800254a:	d01a      	beq.n	8002582 <main+0x142>
	 Page_Erase(X_PAGE); //25ms max
 800254c:	2000      	movs	r0, #0
 800254e:	f7ff f8c5 	bl	80016dc <Page_Erase>
	 HAL_Delay(100);
 8002552:	2064      	movs	r0, #100	; 0x64
 8002554:	f000 fd46 	bl	8002fe4 <HAL_Delay>
	 Page_Erase(Y_PAGE); //25ms max
 8002558:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800255c:	f7ff f8be 	bl	80016dc <Page_Erase>
	 HAL_Delay(100);
 8002560:	2064      	movs	r0, #100	; 0x64
 8002562:	f000 fd3f 	bl	8002fe4 <HAL_Delay>
	 Page_Erase(Z_PAGE); //25ms max
 8002566:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800256a:	f7ff f8b7 	bl	80016dc <Page_Erase>
	 HAL_Delay(100);
 800256e:	2064      	movs	r0, #100	; 0x64
 8002570:	f000 fd38 	bl	8002fe4 <HAL_Delay>
	 Page_Erase(t_PAGE); //25ms max
 8002574:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
 8002578:	f7ff f8b0 	bl	80016dc <Page_Erase>
	 HAL_Delay(100);
 800257c:	2064      	movs	r0, #100	; 0x64
 800257e:	f000 fd31 	bl	8002fe4 <HAL_Delay>
  }

  int i=0;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_TIM_Base_Start(&htim1);
 8002586:	483b      	ldr	r0, [pc, #236]	; (8002674 <main+0x234>)
 8002588:	f004 fb94 	bl	8006cb4 <HAL_TIM_Base_Start>
	  HAL_TIM_Base_Start(&htim2);
 800258c:	483a      	ldr	r0, [pc, #232]	; (8002678 <main+0x238>)
 800258e:	f004 fb91 	bl	8006cb4 <HAL_TIM_Base_Start>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==1){ //SD card can interrupt to retrieve whatever data has been written so far
 8002592:	2101      	movs	r1, #1
 8002594:	4839      	ldr	r0, [pc, #228]	; (800267c <main+0x23c>)
 8002596:	f000 ffdf 	bl	8003558 <HAL_GPIO_ReadPin>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	d14a      	bne.n	8002636 <main+0x1f6>
		  card_pres=1;
 80025a0:	4b37      	ldr	r3, [pc, #220]	; (8002680 <main+0x240>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1000);
 80025a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025aa:	f000 fd1b 	bl	8002fe4 <HAL_Delay>
		  int j=0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
		  float t=0;
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	607b      	str	r3, [r7, #4]
		  f_mount(&fs, "", 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	4932      	ldr	r1, [pc, #200]	; (8002684 <main+0x244>)
 80025bc:	4832      	ldr	r0, [pc, #200]	; (8002688 <main+0x248>)
 80025be:	f00c f89f 	bl	800e700 <f_mount>
		  f_unlink("Acceleration.csv");
 80025c2:	4832      	ldr	r0, [pc, #200]	; (800268c <main+0x24c>)
 80025c4:	f00c fcea 	bl	800ef9c <f_unlink>
		  f_open(&fil, "Acceleration.csv", FA_OPEN_ALWAYS|FA_READ|FA_WRITE);
 80025c8:	2213      	movs	r2, #19
 80025ca:	4930      	ldr	r1, [pc, #192]	; (800268c <main+0x24c>)
 80025cc:	4830      	ldr	r0, [pc, #192]	; (8002690 <main+0x250>)
 80025ce:	f00c f8dd 	bl	800e78c <f_open>
		  f_puts("t,x,y,z \r\n", &fil);
 80025d2:	492f      	ldr	r1, [pc, #188]	; (8002690 <main+0x250>)
 80025d4:	482f      	ldr	r0, [pc, #188]	; (8002694 <main+0x254>)
 80025d6:	f00c fe03 	bl	800f1e0 <f_puts>
			  while(read_seq(X_PAGE+j, Y_PAGE+j, Z_PAGE+j, t_PAGE+j)!=1){
 80025da:	e002      	b.n	80025e2 <main+0x1a2>
				  j+=2;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	3302      	adds	r3, #2
 80025e0:	60bb      	str	r3, [r7, #8]
			  while(read_seq(X_PAGE+j, Y_PAGE+j, Z_PAGE+j, t_PAGE+j)!=1){
 80025e2:	68b8      	ldr	r0, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025ea:	4619      	mov	r1, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80025f2:	461a      	mov	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80025fa:	f7ff fe87 	bl	800230c <read_seq>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b01      	cmp	r3, #1
 8002602:	d1eb      	bne.n	80025dc <main+0x19c>
			  }
			  f_close(&fil);
 8002604:	4822      	ldr	r0, [pc, #136]	; (8002690 <main+0x250>)
 8002606:	f00c fc9f 	bl	800ef48 <f_close>
			  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==1){ //Hang until sd card is removed
 800260a:	e004      	b.n	8002616 <main+0x1d6>
				  HAL_GPIO_WritePin(GPIOB, SD_LED, 1);
 800260c:	2201      	movs	r2, #1
 800260e:	2104      	movs	r1, #4
 8002610:	481a      	ldr	r0, [pc, #104]	; (800267c <main+0x23c>)
 8002612:	f000 ffb9 	bl	8003588 <HAL_GPIO_WritePin>
			  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)==1){ //Hang until sd card is removed
 8002616:	2101      	movs	r1, #1
 8002618:	4818      	ldr	r0, [pc, #96]	; (800267c <main+0x23c>)
 800261a:	f000 ff9d 	bl	8003558 <HAL_GPIO_ReadPin>
 800261e:	4603      	mov	r3, r0
 8002620:	2b01      	cmp	r3, #1
 8002622:	d0f3      	beq.n	800260c <main+0x1cc>
			  }
			  HAL_GPIO_WritePin(GPIOB, SD_LED, 0);
 8002624:	2200      	movs	r2, #0
 8002626:	2104      	movs	r1, #4
 8002628:	4814      	ldr	r0, [pc, #80]	; (800267c <main+0x23c>)
 800262a:	f000 ffad 	bl	8003588 <HAL_GPIO_WritePin>
			  card_pres=0;
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <main+0x240>)
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e7a7      	b.n	8002586 <main+0x146>

	  }

	  else{
		  if(X_PAGE+i==0x1000){
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800263c:	d105      	bne.n	800264a <main+0x20a>
			  HAL_GPIO_WritePin(GPIOB, MEM_LED, 1);
 800263e:	2201      	movs	r2, #1
 8002640:	2102      	movs	r1, #2
 8002642:	480e      	ldr	r0, [pc, #56]	; (800267c <main+0x23c>)
 8002644:	f000 ffa0 	bl	8003588 <HAL_GPIO_WritePin>
 8002648:	e79d      	b.n	8002586 <main+0x146>
		  }
		  else{
			  write_seq(X_PAGE+i, Y_PAGE+i, Z_PAGE+i,t_PAGE+i);
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002652:	4619      	mov	r1, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8002662:	f7ff fd9d 	bl	80021a0 <write_seq>
			  i+=2;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3302      	adds	r3, #2
 800266a:	60fb      	str	r3, [r7, #12]
	  HAL_TIM_Base_Start(&htim1);
 800266c:	e78b      	b.n	8002586 <main+0x146>
 800266e:	bf00      	nop
 8002670:	40020000 	.word	0x40020000
 8002674:	200003d8 	.word	0x200003d8
 8002678:	20000420 	.word	0x20000420
 800267c:	40020400 	.word	0x40020400
 8002680:	200024d8 	.word	0x200024d8
 8002684:	08012da0 	.word	0x08012da0
 8002688:	20000468 	.word	0x20000468
 800268c:	08012da4 	.word	0x08012da4
 8002690:	200014a0 	.word	0x200014a0
 8002694:	08012db8 	.word	0x08012db8

08002698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b094      	sub	sp, #80	; 0x50
 800269c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800269e:	f107 0320 	add.w	r3, r7, #32
 80026a2:	2230      	movs	r2, #48	; 0x30
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f00d fbf6 	bl	800fe98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	4b29      	ldr	r3, [pc, #164]	; (8002768 <SystemClock_Config+0xd0>)
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	4a28      	ldr	r2, [pc, #160]	; (8002768 <SystemClock_Config+0xd0>)
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ca:	6413      	str	r3, [r2, #64]	; 0x40
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <SystemClock_Config+0xd0>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80026d8:	2300      	movs	r3, #0
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <SystemClock_Config+0xd4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026e4:	4a21      	ldr	r2, [pc, #132]	; (800276c <SystemClock_Config+0xd4>)
 80026e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b1f      	ldr	r3, [pc, #124]	; (800276c <SystemClock_Config+0xd4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026f8:	2301      	movs	r3, #1
 80026fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002702:	2302      	movs	r3, #2
 8002704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800270c:	2308      	movs	r3, #8
 800270e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002710:	2360      	movs	r3, #96	; 0x60
 8002712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002714:	2304      	movs	r3, #4
 8002716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002718:	2304      	movs	r3, #4
 800271a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800271c:	f107 0320 	add.w	r3, r7, #32
 8002720:	4618      	mov	r0, r3
 8002722:	f003 f9b5 	bl	8005a90 <HAL_RCC_OscConfig>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800272c:	f000 f986 	bl	8002a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002730:	230f      	movs	r3, #15
 8002732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002734:	2302      	movs	r3, #2
 8002736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800273c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	2101      	movs	r1, #1
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fc16 	bl	8005f80 <HAL_RCC_ClockConfig>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800275a:	f000 f96f 	bl	8002a3c <Error_Handler>
  }
}
 800275e:	bf00      	nop
 8002760:	3750      	adds	r7, #80	; 0x50
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	40007000 	.word	0x40007000

08002770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <MX_I2C1_Init+0x50>)
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <MX_I2C1_Init+0x54>)
 8002778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <MX_I2C1_Init+0x50>)
 800277c:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <MX_I2C1_Init+0x58>)
 800277e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <MX_I2C1_Init+0x50>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <MX_I2C1_Init+0x50>)
 8002788:	2200      	movs	r2, #0
 800278a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <MX_I2C1_Init+0x50>)
 800278e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <MX_I2C1_Init+0x50>)
 8002796:	2200      	movs	r2, #0
 8002798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <MX_I2C1_Init+0x50>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <MX_I2C1_Init+0x50>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <MX_I2C1_Init+0x50>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027ac:	4804      	ldr	r0, [pc, #16]	; (80027c0 <MX_I2C1_Init+0x50>)
 80027ae:	f000 ff05 	bl	80035bc <HAL_I2C_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027b8:	f000 f940 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027bc:	bf00      	nop
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	2000032c 	.word	0x2000032c
 80027c4:	40005400 	.word	0x40005400
 80027c8:	000186a0 	.word	0x000186a0

080027cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <MX_SPI1_Init+0x64>)
 80027d2:	4a18      	ldr	r2, [pc, #96]	; (8002834 <MX_SPI1_Init+0x68>)
 80027d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <MX_SPI1_Init+0x64>)
 80027d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <MX_SPI1_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <MX_SPI1_Init+0x64>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <MX_SPI1_Init+0x64>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <MX_SPI1_Init+0x64>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <MX_SPI1_Init+0x64>)
 80027f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <MX_SPI1_Init+0x64>)
 8002800:	2200      	movs	r2, #0
 8002802:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <MX_SPI1_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <MX_SPI1_Init+0x64>)
 800280c:	2200      	movs	r2, #0
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <MX_SPI1_Init+0x64>)
 8002812:	2200      	movs	r2, #0
 8002814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <MX_SPI1_Init+0x64>)
 8002818:	220a      	movs	r2, #10
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800281c:	4804      	ldr	r0, [pc, #16]	; (8002830 <MX_SPI1_Init+0x64>)
 800281e:	f003 fdb9 	bl	8006394 <HAL_SPI_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002828:	f000 f908 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000380 	.word	0x20000380
 8002834:	40013000 	.word	0x40013000

08002838 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284c:	463b      	mov	r3, r7
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <MX_TIM1_Init+0x98>)
 8002856:	4a1f      	ldr	r2, [pc, #124]	; (80028d4 <MX_TIM1_Init+0x9c>)
 8002858:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <MX_TIM1_Init+0x98>)
 800285c:	2253      	movs	r2, #83	; 0x53
 800285e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <MX_TIM1_Init+0x98>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <MX_TIM1_Init+0x98>)
 8002868:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800286c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <MX_TIM1_Init+0x98>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <MX_TIM1_Init+0x98>)
 8002876:	2200      	movs	r2, #0
 8002878:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <MX_TIM1_Init+0x98>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002880:	4813      	ldr	r0, [pc, #76]	; (80028d0 <MX_TIM1_Init+0x98>)
 8002882:	f004 f9c7 	bl	8006c14 <HAL_TIM_Base_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800288c:	f000 f8d6 	bl	8002a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002896:	f107 0308 	add.w	r3, r7, #8
 800289a:	4619      	mov	r1, r3
 800289c:	480c      	ldr	r0, [pc, #48]	; (80028d0 <MX_TIM1_Init+0x98>)
 800289e:	f004 fa63 	bl	8006d68 <HAL_TIM_ConfigClockSource>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80028a8:	f000 f8c8 	bl	8002a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ac:	2300      	movs	r3, #0
 80028ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028b4:	463b      	mov	r3, r7
 80028b6:	4619      	mov	r1, r3
 80028b8:	4805      	ldr	r0, [pc, #20]	; (80028d0 <MX_TIM1_Init+0x98>)
 80028ba:	f004 fc37 	bl	800712c <HAL_TIMEx_MasterConfigSynchronization>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80028c4:	f000 f8ba 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028c8:	bf00      	nop
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	200003d8 	.word	0x200003d8
 80028d4:	40010000 	.word	0x40010000

080028d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	609a      	str	r2, [r3, #8]
 80028ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ec:	463b      	mov	r3, r7
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <MX_TIM2_Init+0x94>)
 80028f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <MX_TIM2_Init+0x94>)
 80028fe:	2253      	movs	r2, #83	; 0x53
 8002900:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <MX_TIM2_Init+0x94>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002908:	4b18      	ldr	r3, [pc, #96]	; (800296c <MX_TIM2_Init+0x94>)
 800290a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800290e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <MX_TIM2_Init+0x94>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <MX_TIM2_Init+0x94>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800291c:	4813      	ldr	r0, [pc, #76]	; (800296c <MX_TIM2_Init+0x94>)
 800291e:	f004 f979 	bl	8006c14 <HAL_TIM_Base_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002928:	f000 f888 	bl	8002a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800292c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002930:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002932:	f107 0308 	add.w	r3, r7, #8
 8002936:	4619      	mov	r1, r3
 8002938:	480c      	ldr	r0, [pc, #48]	; (800296c <MX_TIM2_Init+0x94>)
 800293a:	f004 fa15 	bl	8006d68 <HAL_TIM_ConfigClockSource>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002944:	f000 f87a 	bl	8002a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002950:	463b      	mov	r3, r7
 8002952:	4619      	mov	r1, r3
 8002954:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_TIM2_Init+0x94>)
 8002956:	f004 fbe9 	bl	800712c <HAL_TIMEx_MasterConfigSynchronization>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002960:	f000 f86c 	bl	8002a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002964:	bf00      	nop
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000420 	.word	0x20000420

08002970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <MX_GPIO_Init+0xc0>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a28      	ldr	r2, [pc, #160]	; (8002a30 <MX_GPIO_Init+0xc0>)
 8002990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <MX_GPIO_Init+0xc0>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <MX_GPIO_Init+0xc0>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a21      	ldr	r2, [pc, #132]	; (8002a30 <MX_GPIO_Init+0xc0>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <MX_GPIO_Init+0xc0>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <MX_GPIO_Init+0xc0>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a1a      	ldr	r2, [pc, #104]	; (8002a30 <MX_GPIO_Init+0xc0>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <MX_GPIO_Init+0xc0>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, uC_ON_Pin|CS_MEM_Pin|CS_SD_Pin, GPIO_PIN_RESET);
 80029da:	2200      	movs	r2, #0
 80029dc:	211c      	movs	r1, #28
 80029de:	4815      	ldr	r0, [pc, #84]	; (8002a34 <MX_GPIO_Init+0xc4>)
 80029e0:	f000 fdd2 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_DETECT_Pin|MEM_CPLT_Pin|SD_CPLT_Pin|I2C_CPLT_Pin, GPIO_PIN_RESET);
 80029e4:	2200      	movs	r2, #0
 80029e6:	2127      	movs	r1, #39	; 0x27
 80029e8:	4813      	ldr	r0, [pc, #76]	; (8002a38 <MX_GPIO_Init+0xc8>)
 80029ea:	f000 fdcd 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : uC_ON_Pin CS_MEM_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = uC_ON_Pin|CS_MEM_Pin|CS_SD_Pin;
 80029ee:	231c      	movs	r3, #28
 80029f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f2:	2301      	movs	r3, #1
 80029f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	f107 030c 	add.w	r3, r7, #12
 8002a02:	4619      	mov	r1, r3
 8002a04:	480b      	ldr	r0, [pc, #44]	; (8002a34 <MX_GPIO_Init+0xc4>)
 8002a06:	f000 fc23 	bl	8003250 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_DETECT_Pin MEM_CPLT_Pin SD_CPLT_Pin I2C_CPLT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|MEM_CPLT_Pin|SD_CPLT_Pin|I2C_CPLT_Pin;
 8002a0a:	2327      	movs	r3, #39	; 0x27
 8002a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1a:	f107 030c 	add.w	r3, r7, #12
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4805      	ldr	r0, [pc, #20]	; (8002a38 <MX_GPIO_Init+0xc8>)
 8002a22:	f000 fc15 	bl	8003250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a26:	bf00      	nop
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40020400 	.word	0x40020400

08002a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a40:	b672      	cpsid	i
}
 8002a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <Error_Handler+0x8>
	...

08002a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a78:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_MspInit+0x4c>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800

08002a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a19      	ldr	r2, [pc, #100]	; (8002b1c <HAL_I2C_MspInit+0x84>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d12b      	bne.n	8002b12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ad6:	23c0      	movs	r3, #192	; 0xc0
 8002ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ada:	2312      	movs	r3, #18
 8002adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	480c      	ldr	r0, [pc, #48]	; (8002b24 <HAL_I2C_MspInit+0x8c>)
 8002af2:	f000 fbad 	bl	8003250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b04:	6413      	str	r3, [r2, #64]	; 0x40
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_I2C_MspInit+0x88>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b12:	bf00      	nop
 8002b14:	3728      	adds	r7, #40	; 0x28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40005400 	.word	0x40005400
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020400 	.word	0x40020400

08002b28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	; 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a19      	ldr	r2, [pc, #100]	; (8002bac <HAL_SPI_MspInit+0x84>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d12b      	bne.n	8002ba2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b58:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b82:	23e0      	movs	r3, #224	; 0xe0
 8002b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b92:	2305      	movs	r3, #5
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <HAL_SPI_MspInit+0x8c>)
 8002b9e:	f000 fb57 	bl	8003250 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	; 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40013000 	.word	0x40013000
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020000 	.word	0x40020000

08002bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <HAL_TIM_Base_MspInit+0x64>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <HAL_TIM_Base_MspInit+0x68>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <HAL_TIM_Base_MspInit+0x68>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <HAL_TIM_Base_MspInit+0x68>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002be6:	e012      	b.n	8002c0e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d10d      	bne.n	8002c0e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <HAL_TIM_Base_MspInit+0x68>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <HAL_TIM_Base_MspInit+0x68>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <HAL_TIM_Base_MspInit+0x68>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	40023800 	.word	0x40023800

08002c24 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1,Timer2;

void SDTimer_Handler(void){
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0

	if(Timer1 > 0){
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <SDTimer_Handler+0x40>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <SDTimer_Handler+0x1c>
		Timer1--;
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <SDTimer_Handler+0x40>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <SDTimer_Handler+0x40>)
 8002c3e:	701a      	strb	r2, [r3, #0]
	}

	if(Timer2 > 0){
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <SDTimer_Handler+0x44>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d006      	beq.n	8002c58 <SDTimer_Handler+0x34>
		Timer2--;
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <SDTimer_Handler+0x44>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <SDTimer_Handler+0x44>)
 8002c56:	701a      	strb	r2, [r3, #0]
	}
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	200024da 	.word	0x200024da
 8002c68:	200024db 	.word	0x200024db

08002c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <NMI_Handler+0x4>

08002c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <HardFault_Handler+0x4>

08002c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <MemManage_Handler+0x4>

08002c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c82:	e7fe      	b.n	8002c82 <BusFault_Handler+0x4>

08002c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <UsageFault_Handler+0x4>

08002c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <SysTick_Handler+0x30>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <SysTick_Handler+0x30>)
 8002cc4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >=10){
 8002cc6:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <SysTick_Handler+0x30>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	d904      	bls.n	8002cda <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <SysTick_Handler+0x30>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002cd6:	f7ff ffa5 	bl	8002c24 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cda:	f000 f963 	bl	8002fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200024d9 	.word	0x200024d9

08002ce8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <OTG_FS_IRQHandler+0x10>)
 8002cee:	f001 fd74 	bl	80047da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20002c00 	.word	0x20002c00

08002cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return 1;
 8002d00:	2301      	movs	r3, #1
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <_kill>:

int _kill(int pid, int sig)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d16:	f00d f895 	bl	800fe44 <__errno>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2216      	movs	r2, #22
 8002d1e:	601a      	str	r2, [r3, #0]
  return -1;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_exit>:

void _exit (int status)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ffe7 	bl	8002d0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d3e:	e7fe      	b.n	8002d3e <_exit+0x12>

08002d40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	e00a      	b.n	8002d68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d52:	f3af 8000 	nop.w
 8002d56:	4601      	mov	r1, r0
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	60ba      	str	r2, [r7, #8]
 8002d5e:	b2ca      	uxtb	r2, r1
 8002d60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	3301      	adds	r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	dbf0      	blt.n	8002d52 <_read+0x12>
  }

  return len;
 8002d70:	687b      	ldr	r3, [r7, #4]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e009      	b.n	8002da0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	60ba      	str	r2, [r7, #8]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	dbf1      	blt.n	8002d8c <_write+0x12>
  }
  return len;
 8002da8:	687b      	ldr	r3, [r7, #4]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <_close>:

int _close(int file)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dda:	605a      	str	r2, [r3, #4]
  return 0;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <_isatty>:

int _isatty(int file)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002df2:	2301      	movs	r3, #1
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e24:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <_sbrk+0x5c>)
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <_sbrk+0x60>)
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <_sbrk+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <_sbrk+0x64>)
 8002e3a:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <_sbrk+0x68>)
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <_sbrk+0x64>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d207      	bcs.n	8002e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e4c:	f00c fffa 	bl	800fe44 <__errno>
 8002e50:	4603      	mov	r3, r0
 8002e52:	220c      	movs	r2, #12
 8002e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	e009      	b.n	8002e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <_sbrk+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <_sbrk+0x64>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	4a05      	ldr	r2, [pc, #20]	; (8002e80 <_sbrk+0x64>)
 8002e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20010000 	.word	0x20010000
 8002e7c:	00000400 	.word	0x00000400
 8002e80:	200024dc 	.word	0x200024dc
 8002e84:	20003398 	.word	0x20003398

08002e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <SystemInit+0x20>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <SystemInit+0x20>)
 8002e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eb0:	480d      	ldr	r0, [pc, #52]	; (8002ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eb2:	490e      	ldr	r1, [pc, #56]	; (8002eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb8:	e002      	b.n	8002ec0 <LoopCopyDataInit>

08002eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ebe:	3304      	adds	r3, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec4:	d3f9      	bcc.n	8002eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ec8:	4c0b      	ldr	r4, [pc, #44]	; (8002ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ecc:	e001      	b.n	8002ed2 <LoopFillZerobss>

08002ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed0:	3204      	adds	r2, #4

08002ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed4:	d3fb      	bcc.n	8002ece <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ed6:	f7ff ffd7 	bl	8002e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eda:	f00c ffb9 	bl	800fe50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ede:	f7ff faaf 	bl	8002440 <main>
  bx  lr    
 8002ee2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ee4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eec:	2000030c 	.word	0x2000030c
  ldr r2, =_sidata
 8002ef0:	080136b4 	.word	0x080136b4
  ldr r2, =_sbss
 8002ef4:	2000030c 	.word	0x2000030c
  ldr r4, =_ebss
 8002ef8:	20003394 	.word	0x20003394

08002efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC_IRQHandler>
	...

08002f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f04:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_Init+0x40>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <HAL_Init+0x40>)
 8002f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_Init+0x40>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <HAL_Init+0x40>)
 8002f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_Init+0x40>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_Init+0x40>)
 8002f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f28:	2003      	movs	r0, #3
 8002f2a:	f000 f94f 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f2e:	200f      	movs	r0, #15
 8002f30:	f000 f808 	bl	8002f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f34:	f7ff fd88 	bl	8002a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00

08002f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_InitTick+0x54>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_InitTick+0x58>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f967 	bl	8003236 <HAL_SYSTICK_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00e      	b.n	8002f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b0f      	cmp	r3, #15
 8002f76:	d80a      	bhi.n	8002f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f80:	f000 f92f 	bl	80031e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f84:	4a06      	ldr	r2, [pc, #24]	; (8002fa0 <HAL_InitTick+0x5c>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000004 	.word	0x20000004
 8002f9c:	2000000c 	.word	0x2000000c
 8002fa0:	20000008 	.word	0x20000008

08002fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x20>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	2000000c 	.word	0x2000000c
 8002fc8:	200024e0 	.word	0x200024e0

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200024e0 	.word	0x200024e0

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff ffee 	bl	8002fcc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffde 	bl	8002fcc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2000000c 	.word	0x2000000c

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003198:	d301      	bcc.n	800319e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319a:	2301      	movs	r3, #1
 800319c:	e00f      	b.n	80031be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <SysTick_Config+0x40>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a6:	210f      	movs	r1, #15
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	f7ff ff8e 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <SysTick_Config+0x40>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <SysTick_Config+0x40>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	e000e010 	.word	0xe000e010

080031cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff29 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031f4:	f7ff ff3e 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7ff ff8e 	bl	8003120 <NVIC_EncodePriority>
 8003204:	4602      	mov	r2, r0
 8003206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff5d 	bl	80030cc <__NVIC_SetPriority>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff31 	bl	8003090 <__NVIC_EnableIRQ>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffa2 	bl	8003188 <SysTick_Config>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003250:	b480      	push	{r7}
 8003252:	b089      	sub	sp, #36	; 0x24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	e159      	b.n	8003520 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800326c:	2201      	movs	r2, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	429a      	cmp	r2, r3
 8003286:	f040 8148 	bne.w	800351a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d005      	beq.n	80032a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d130      	bne.n	8003304 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2203      	movs	r2, #3
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032d8:	2201      	movs	r2, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 0201 	and.w	r2, r3, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b03      	cmp	r3, #3
 800330e:	d017      	beq.n	8003340 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	2203      	movs	r2, #3
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d123      	bne.n	8003394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	08da      	lsrs	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3208      	adds	r2, #8
 8003354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	220f      	movs	r2, #15
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	08da      	lsrs	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3208      	adds	r2, #8
 800338e:	69b9      	ldr	r1, [r7, #24]
 8003390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0203 	and.w	r2, r3, #3
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80a2 	beq.w	800351a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b57      	ldr	r3, [pc, #348]	; (8003538 <HAL_GPIO_Init+0x2e8>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	4a56      	ldr	r2, [pc, #344]	; (8003538 <HAL_GPIO_Init+0x2e8>)
 80033e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e4:	6453      	str	r3, [r2, #68]	; 0x44
 80033e6:	4b54      	ldr	r3, [pc, #336]	; (8003538 <HAL_GPIO_Init+0x2e8>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f2:	4a52      	ldr	r2, [pc, #328]	; (800353c <HAL_GPIO_Init+0x2ec>)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	089b      	lsrs	r3, r3, #2
 80033f8:	3302      	adds	r3, #2
 80033fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	220f      	movs	r2, #15
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a49      	ldr	r2, [pc, #292]	; (8003540 <HAL_GPIO_Init+0x2f0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d019      	beq.n	8003452 <HAL_GPIO_Init+0x202>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a48      	ldr	r2, [pc, #288]	; (8003544 <HAL_GPIO_Init+0x2f4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_GPIO_Init+0x1fe>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a47      	ldr	r2, [pc, #284]	; (8003548 <HAL_GPIO_Init+0x2f8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00d      	beq.n	800344a <HAL_GPIO_Init+0x1fa>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a46      	ldr	r2, [pc, #280]	; (800354c <HAL_GPIO_Init+0x2fc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <HAL_GPIO_Init+0x1f6>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a45      	ldr	r2, [pc, #276]	; (8003550 <HAL_GPIO_Init+0x300>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_GPIO_Init+0x1f2>
 800343e:	2304      	movs	r3, #4
 8003440:	e008      	b.n	8003454 <HAL_GPIO_Init+0x204>
 8003442:	2307      	movs	r3, #7
 8003444:	e006      	b.n	8003454 <HAL_GPIO_Init+0x204>
 8003446:	2303      	movs	r3, #3
 8003448:	e004      	b.n	8003454 <HAL_GPIO_Init+0x204>
 800344a:	2302      	movs	r3, #2
 800344c:	e002      	b.n	8003454 <HAL_GPIO_Init+0x204>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <HAL_GPIO_Init+0x204>
 8003452:	2300      	movs	r3, #0
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	f002 0203 	and.w	r2, r2, #3
 800345a:	0092      	lsls	r2, r2, #2
 800345c:	4093      	lsls	r3, r2
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003464:	4935      	ldr	r1, [pc, #212]	; (800353c <HAL_GPIO_Init+0x2ec>)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	089b      	lsrs	r3, r3, #2
 800346a:	3302      	adds	r3, #2
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003472:	4b38      	ldr	r3, [pc, #224]	; (8003554 <HAL_GPIO_Init+0x304>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003496:	4a2f      	ldr	r2, [pc, #188]	; (8003554 <HAL_GPIO_Init+0x304>)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800349c:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_GPIO_Init+0x304>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034c0:	4a24      	ldr	r2, [pc, #144]	; (8003554 <HAL_GPIO_Init+0x304>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034c6:	4b23      	ldr	r3, [pc, #140]	; (8003554 <HAL_GPIO_Init+0x304>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ea:	4a1a      	ldr	r2, [pc, #104]	; (8003554 <HAL_GPIO_Init+0x304>)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <HAL_GPIO_Init+0x304>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003514:	4a0f      	ldr	r2, [pc, #60]	; (8003554 <HAL_GPIO_Init+0x304>)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3301      	adds	r3, #1
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	f67f aea2 	bls.w	800326c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800
 800353c:	40013800 	.word	0x40013800
 8003540:	40020000 	.word	0x40020000
 8003544:	40020400 	.word	0x40020400
 8003548:	40020800 	.word	0x40020800
 800354c:	40020c00 	.word	0x40020c00
 8003550:	40021000 	.word	0x40021000
 8003554:	40013c00 	.word	0x40013c00

08003558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	e001      	b.n	800357a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
 8003594:	4613      	mov	r3, r2
 8003596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003598:	787b      	ldrb	r3, [r7, #1]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035a4:	e003      	b.n	80035ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035a6:	887b      	ldrh	r3, [r7, #2]
 80035a8:	041a      	lsls	r2, r3, #16
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	619a      	str	r2, [r3, #24]
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e12b      	b.n	8003826 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff fa58 	bl	8002a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2224      	movs	r2, #36	; 0x24
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800360e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800361e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003620:	f002 fea4 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 8003624:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4a81      	ldr	r2, [pc, #516]	; (8003830 <HAL_I2C_Init+0x274>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d807      	bhi.n	8003640 <HAL_I2C_Init+0x84>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a80      	ldr	r2, [pc, #512]	; (8003834 <HAL_I2C_Init+0x278>)
 8003634:	4293      	cmp	r3, r2
 8003636:	bf94      	ite	ls
 8003638:	2301      	movls	r3, #1
 800363a:	2300      	movhi	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e006      	b.n	800364e <HAL_I2C_Init+0x92>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a7d      	ldr	r2, [pc, #500]	; (8003838 <HAL_I2C_Init+0x27c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	bf94      	ite	ls
 8003648:	2301      	movls	r3, #1
 800364a:	2300      	movhi	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0e7      	b.n	8003826 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a78      	ldr	r2, [pc, #480]	; (800383c <HAL_I2C_Init+0x280>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	0c9b      	lsrs	r3, r3, #18
 8003660:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a6a      	ldr	r2, [pc, #424]	; (8003830 <HAL_I2C_Init+0x274>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d802      	bhi.n	8003690 <HAL_I2C_Init+0xd4>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3301      	adds	r3, #1
 800368e:	e009      	b.n	80036a4 <HAL_I2C_Init+0xe8>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	4a69      	ldr	r2, [pc, #420]	; (8003840 <HAL_I2C_Init+0x284>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	3301      	adds	r3, #1
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	495c      	ldr	r1, [pc, #368]	; (8003830 <HAL_I2C_Init+0x274>)
 80036c0:	428b      	cmp	r3, r1
 80036c2:	d819      	bhi.n	80036f8 <HAL_I2C_Init+0x13c>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1e59      	subs	r1, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80036d2:	1c59      	adds	r1, r3, #1
 80036d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036d8:	400b      	ands	r3, r1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_I2C_Init+0x138>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1e59      	subs	r1, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f2:	e051      	b.n	8003798 <HAL_I2C_Init+0x1dc>
 80036f4:	2304      	movs	r3, #4
 80036f6:	e04f      	b.n	8003798 <HAL_I2C_Init+0x1dc>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d111      	bne.n	8003724 <HAL_I2C_Init+0x168>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1e58      	subs	r0, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	440b      	add	r3, r1
 800370e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e012      	b.n	800374a <HAL_I2C_Init+0x18e>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e58      	subs	r0, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	0099      	lsls	r1, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	fbb0 f3f3 	udiv	r3, r0, r3
 800373a:	3301      	adds	r3, #1
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Init+0x196>
 800374e:	2301      	movs	r3, #1
 8003750:	e022      	b.n	8003798 <HAL_I2C_Init+0x1dc>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10e      	bne.n	8003778 <HAL_I2C_Init+0x1bc>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1e58      	subs	r0, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6859      	ldr	r1, [r3, #4]
 8003762:	460b      	mov	r3, r1
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	440b      	add	r3, r1
 8003768:	fbb0 f3f3 	udiv	r3, r0, r3
 800376c:	3301      	adds	r3, #1
 800376e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003776:	e00f      	b.n	8003798 <HAL_I2C_Init+0x1dc>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e58      	subs	r0, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	0099      	lsls	r1, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	fbb0 f3f3 	udiv	r3, r0, r3
 800378e:	3301      	adds	r3, #1
 8003790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	6809      	ldr	r1, [r1, #0]
 800379c:	4313      	orrs	r3, r2
 800379e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6911      	ldr	r1, [r2, #16]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68d2      	ldr	r2, [r2, #12]
 80037d2:	4311      	orrs	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	430b      	orrs	r3, r1
 80037da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	000186a0 	.word	0x000186a0
 8003834:	001e847f 	.word	0x001e847f
 8003838:	003d08ff 	.word	0x003d08ff
 800383c:	431bde83 	.word	0x431bde83
 8003840:	10624dd3 	.word	0x10624dd3

08003844 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	4608      	mov	r0, r1
 800384e:	4611      	mov	r1, r2
 8003850:	461a      	mov	r2, r3
 8003852:	4603      	mov	r3, r0
 8003854:	817b      	strh	r3, [r7, #10]
 8003856:	460b      	mov	r3, r1
 8003858:	813b      	strh	r3, [r7, #8]
 800385a:	4613      	mov	r3, r2
 800385c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800385e:	f7ff fbb5 	bl	8002fcc <HAL_GetTick>
 8003862:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b20      	cmp	r3, #32
 800386e:	f040 80d9 	bne.w	8003a24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2319      	movs	r3, #25
 8003878:	2201      	movs	r2, #1
 800387a:	496d      	ldr	r1, [pc, #436]	; (8003a30 <HAL_I2C_Mem_Write+0x1ec>)
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fc7f 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
 800388a:	e0cc      	b.n	8003a26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_I2C_Mem_Write+0x56>
 8003896:	2302      	movs	r3, #2
 8003898:	e0c5      	b.n	8003a26 <HAL_I2C_Mem_Write+0x1e2>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d007      	beq.n	80038c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2221      	movs	r2, #33	; 0x21
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2240      	movs	r2, #64	; 0x40
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a3a      	ldr	r2, [r7, #32]
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4a4d      	ldr	r2, [pc, #308]	; (8003a34 <HAL_I2C_Mem_Write+0x1f0>)
 8003900:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003902:	88f8      	ldrh	r0, [r7, #6]
 8003904:	893a      	ldrh	r2, [r7, #8]
 8003906:	8979      	ldrh	r1, [r7, #10]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	4603      	mov	r3, r0
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fab6 	bl	8003e84 <I2C_RequestMemoryWrite>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d052      	beq.n	80039c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e081      	b.n	8003a26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fd00 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b04      	cmp	r3, #4
 8003938:	d107      	bne.n	800394a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003948:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e06b      	b.n	8003a26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	781a      	ldrb	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b04      	cmp	r3, #4
 800398a:	d11b      	bne.n	80039c4 <HAL_I2C_Mem_Write+0x180>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003990:	2b00      	cmp	r3, #0
 8003992:	d017      	beq.n	80039c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1aa      	bne.n	8003922 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 fcec 	bl	80043ae <I2C_WaitOnBTFFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00d      	beq.n	80039f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d107      	bne.n	80039f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e016      	b.n	8003a26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e000      	b.n	8003a26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	00100002 	.word	0x00100002
 8003a34:	ffff0000 	.word	0xffff0000

08003a38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08c      	sub	sp, #48	; 0x30
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	4608      	mov	r0, r1
 8003a42:	4611      	mov	r1, r2
 8003a44:	461a      	mov	r2, r3
 8003a46:	4603      	mov	r3, r0
 8003a48:	817b      	strh	r3, [r7, #10]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	813b      	strh	r3, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a52:	f7ff fabb 	bl	8002fcc <HAL_GetTick>
 8003a56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	f040 8208 	bne.w	8003e76 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	2319      	movs	r3, #25
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	497b      	ldr	r1, [pc, #492]	; (8003c5c <HAL_I2C_Mem_Read+0x224>)
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fb85 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e1fb      	b.n	8003e78 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_I2C_Mem_Read+0x56>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e1f4      	b.n	8003e78 <HAL_I2C_Mem_Read+0x440>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d007      	beq.n	8003ab4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ac2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2222      	movs	r2, #34	; 0x22
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2240      	movs	r2, #64	; 0x40
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a5b      	ldr	r2, [pc, #364]	; (8003c60 <HAL_I2C_Mem_Read+0x228>)
 8003af4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003af6:	88f8      	ldrh	r0, [r7, #6]
 8003af8:	893a      	ldrh	r2, [r7, #8]
 8003afa:	8979      	ldrh	r1, [r7, #10]
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	4603      	mov	r3, r0
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fa52 	bl	8003fb0 <I2C_RequestMemoryRead>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e1b0      	b.n	8003e78 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d113      	bne.n	8003b46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1e:	2300      	movs	r3, #0
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	623b      	str	r3, [r7, #32]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	e184      	b.n	8003e50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d11b      	bne.n	8003b86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	e164      	b.n	8003e50 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d11b      	bne.n	8003bc6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	e144      	b.n	8003e50 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bdc:	e138      	b.n	8003e50 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	f200 80f1 	bhi.w	8003dca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d123      	bne.n	8003c38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fc1b 	bl	8004430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e139      	b.n	8003e78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c36:	e10b      	b.n	8003e50 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d14e      	bne.n	8003cde <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	2200      	movs	r2, #0
 8003c48:	4906      	ldr	r1, [pc, #24]	; (8003c64 <HAL_I2C_Mem_Read+0x22c>)
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fa98 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e10e      	b.n	8003e78 <HAL_I2C_Mem_Read+0x440>
 8003c5a:	bf00      	nop
 8003c5c:	00100002 	.word	0x00100002
 8003c60:	ffff0000 	.word	0xffff0000
 8003c64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cdc:	e0b8      	b.n	8003e50 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	4966      	ldr	r1, [pc, #408]	; (8003e80 <HAL_I2C_Mem_Read+0x448>)
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fa49 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0bf      	b.n	8003e78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	2200      	movs	r2, #0
 8003d42:	494f      	ldr	r1, [pc, #316]	; (8003e80 <HAL_I2C_Mem_Read+0x448>)
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fa1b 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e091      	b.n	8003e78 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dc8:	e042      	b.n	8003e50 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fb2e 	bl	8004430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e04c      	b.n	8003e78 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d118      	bne.n	8003e50 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f47f aec2 	bne.w	8003bde <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	; 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	00010004 	.word	0x00010004

08003e84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	461a      	mov	r2, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	817b      	strh	r3, [r7, #10]
 8003e96:	460b      	mov	r3, r1
 8003e98:	813b      	strh	r3, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f960 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed4:	d103      	bne.n	8003ede <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e05f      	b.n	8003fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ee2:	897b      	ldrh	r3, [r7, #10]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	6a3a      	ldr	r2, [r7, #32]
 8003ef6:	492d      	ldr	r1, [pc, #180]	; (8003fac <I2C_RequestMemoryWrite+0x128>)
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f998 	bl	800422e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e04c      	b.n	8003fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f20:	6a39      	ldr	r1, [r7, #32]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fa02 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00d      	beq.n	8003f4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d107      	bne.n	8003f46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e02b      	b.n	8003fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d105      	bne.n	8003f5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f50:	893b      	ldrh	r3, [r7, #8]
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	611a      	str	r2, [r3, #16]
 8003f5a:	e021      	b.n	8003fa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f5c:	893b      	ldrh	r3, [r7, #8]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	6a39      	ldr	r1, [r7, #32]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f9dc 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d107      	bne.n	8003f92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e005      	b.n	8003fa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f96:	893b      	ldrh	r3, [r7, #8]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	00010002 	.word	0x00010002

08003fb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	4608      	mov	r0, r1
 8003fba:	4611      	mov	r1, r2
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	817b      	strh	r3, [r7, #10]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	813b      	strh	r3, [r7, #8]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f8c2 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004010:	d103      	bne.n	800401a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0aa      	b.n	8004174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800401e:	897b      	ldrh	r3, [r7, #10]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800402c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	6a3a      	ldr	r2, [r7, #32]
 8004032:	4952      	ldr	r1, [pc, #328]	; (800417c <I2C_RequestMemoryRead+0x1cc>)
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f8fa 	bl	800422e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e097      	b.n	8004174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800405a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405c:	6a39      	ldr	r1, [r7, #32]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f964 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	2b04      	cmp	r3, #4
 8004070:	d107      	bne.n	8004082 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004080:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e076      	b.n	8004174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800408c:	893b      	ldrh	r3, [r7, #8]
 800408e:	b2da      	uxtb	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	611a      	str	r2, [r3, #16]
 8004096:	e021      	b.n	80040dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004098:	893b      	ldrh	r3, [r7, #8]
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	b29b      	uxth	r3, r3
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a8:	6a39      	ldr	r1, [r7, #32]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f93e 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00d      	beq.n	80040d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d107      	bne.n	80040ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e050      	b.n	8004174 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040d2:	893b      	ldrh	r3, [r7, #8]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040de:	6a39      	ldr	r1, [r7, #32]
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f923 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00d      	beq.n	8004108 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d107      	bne.n	8004104 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004102:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e035      	b.n	8004174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004116:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	2200      	movs	r2, #0
 8004120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f82b 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00d      	beq.n	800414c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413e:	d103      	bne.n	8004148 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e013      	b.n	8004174 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800414c:	897b      	ldrh	r3, [r7, #10]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	6a3a      	ldr	r2, [r7, #32]
 8004160:	4906      	ldr	r1, [pc, #24]	; (800417c <I2C_RequestMemoryRead+0x1cc>)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f863 	bl	800422e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	00010002 	.word	0x00010002

08004180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004190:	e025      	b.n	80041de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d021      	beq.n	80041de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fe ff17 	bl	8002fcc <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d116      	bne.n	80041de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e023      	b.n	8004226 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d10d      	bne.n	8004204 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	43da      	mvns	r2, r3
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4013      	ands	r3, r2
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf0c      	ite	eq
 80041fa:	2301      	moveq	r3, #1
 80041fc:	2300      	movne	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	e00c      	b.n	800421e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	43da      	mvns	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4013      	ands	r3, r2
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	429a      	cmp	r2, r3
 8004222:	d0b6      	beq.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800423c:	e051      	b.n	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424c:	d123      	bne.n	8004296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004266:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f043 0204 	orr.w	r2, r3, #4
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e046      	b.n	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d021      	beq.n	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fe fe95 	bl	8002fcc <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d116      	bne.n	80042e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f043 0220 	orr.w	r2, r3, #32
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e020      	b.n	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d10c      	bne.n	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	43da      	mvns	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bf14      	ite	ne
 80042fe:	2301      	movne	r3, #1
 8004300:	2300      	moveq	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	e00b      	b.n	800431e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	43da      	mvns	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4013      	ands	r3, r2
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf14      	ite	ne
 8004318:	2301      	movne	r3, #1
 800431a:	2300      	moveq	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d18d      	bne.n	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004338:	e02d      	b.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f8ce 	bl	80044dc <I2C_IsAcknowledgeFailed>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e02d      	b.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d021      	beq.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fe fe3b 	bl	8002fcc <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d116      	bne.n	8004396 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e007      	b.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a0:	2b80      	cmp	r3, #128	; 0x80
 80043a2:	d1ca      	bne.n	800433a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043ba:	e02d      	b.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f88d 	bl	80044dc <I2C_IsAcknowledgeFailed>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e02d      	b.n	8004428 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d021      	beq.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d4:	f7fe fdfa 	bl	8002fcc <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d302      	bcc.n	80043ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d116      	bne.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e007      	b.n	8004428 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b04      	cmp	r3, #4
 8004424:	d1ca      	bne.n	80043bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800443c:	e042      	b.n	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b10      	cmp	r3, #16
 800444a:	d119      	bne.n	8004480 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0210 	mvn.w	r2, #16
 8004454:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e029      	b.n	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004480:	f7fe fda4 	bl	8002fcc <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	429a      	cmp	r2, r3
 800448e:	d302      	bcc.n	8004496 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d116      	bne.n	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	f043 0220 	orr.w	r2, r3, #32
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e007      	b.n	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	d1b5      	bne.n	800443e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f2:	d11b      	bne.n	800452c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f043 0204 	orr.w	r2, r3, #4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800453a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800453c:	b08f      	sub	sp, #60	; 0x3c
 800453e:	af0a      	add	r7, sp, #40	; 0x28
 8004540:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e10f      	b.n	800476c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f00b f942 	bl	800f7f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2203      	movs	r2, #3
 8004570:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d102      	bne.n	8004586 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f002 ff51 	bl	8007432 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	687e      	ldr	r6, [r7, #4]
 8004598:	466d      	mov	r5, sp
 800459a:	f106 0410 	add.w	r4, r6, #16
 800459e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80045ae:	1d33      	adds	r3, r6, #4
 80045b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045b2:	6838      	ldr	r0, [r7, #0]
 80045b4:	f002 fe28 	bl	8007208 <USB_CoreInit>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2202      	movs	r2, #2
 80045c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0d0      	b.n	800476c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2100      	movs	r1, #0
 80045d0:	4618      	mov	r0, r3
 80045d2:	f002 ff3f 	bl	8007454 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	73fb      	strb	r3, [r7, #15]
 80045da:	e04a      	b.n	8004672 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045dc:	7bfa      	ldrb	r2, [r7, #15]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	333d      	adds	r3, #61	; 0x3d
 80045ec:	2201      	movs	r2, #1
 80045ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045f0:	7bfa      	ldrb	r2, [r7, #15]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	333c      	adds	r3, #60	; 0x3c
 8004600:	7bfa      	ldrb	r2, [r7, #15]
 8004602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004604:	7bfa      	ldrb	r2, [r7, #15]
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	b298      	uxth	r0, r3
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	3344      	adds	r3, #68	; 0x44
 8004618:	4602      	mov	r2, r0
 800461a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800461c:	7bfa      	ldrb	r2, [r7, #15]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3340      	adds	r3, #64	; 0x40
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	3348      	adds	r3, #72	; 0x48
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	334c      	adds	r3, #76	; 0x4c
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	3354      	adds	r3, #84	; 0x54
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	3301      	adds	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
 8004672:	7bfa      	ldrb	r2, [r7, #15]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	d3af      	bcc.n	80045dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800467c:	2300      	movs	r3, #0
 800467e:	73fb      	strb	r3, [r7, #15]
 8004680:	e044      	b.n	800470c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004682:	7bfa      	ldrb	r2, [r7, #15]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004698:	7bfa      	ldrb	r2, [r7, #15]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80046aa:	7bfa      	ldrb	r2, [r7, #15]
 80046ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046ae:	7bfa      	ldrb	r2, [r7, #15]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046c0:	2200      	movs	r2, #0
 80046c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046c4:	7bfa      	ldrb	r2, [r7, #15]
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046da:	7bfa      	ldrb	r2, [r7, #15]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	3301      	adds	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
 800470c:	7bfa      	ldrb	r2, [r7, #15]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d3b5      	bcc.n	8004682 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	687e      	ldr	r6, [r7, #4]
 800471e:	466d      	mov	r5, sp
 8004720:	f106 0410 	add.w	r4, r6, #16
 8004724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800472a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800472c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004730:	e885 0003 	stmia.w	r5, {r0, r1}
 8004734:	1d33      	adds	r3, r6, #4
 8004736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004738:	6838      	ldr	r0, [r7, #0]
 800473a:	f002 fed7 	bl	80074ec <USB_DevInit>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e00d      	b.n	800476c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f004 f826 	bl	80087b6 <USB_DevDisconnect>

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004774 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_PCD_Start+0x1c>
 800478c:	2302      	movs	r3, #2
 800478e:	e020      	b.n	80047d2 <HAL_PCD_Start+0x5e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	2b01      	cmp	r3, #1
 800479e:	d109      	bne.n	80047b4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d005      	beq.n	80047b4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f002 fe29 	bl	8007410 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f003 ffd6 	bl	8008774 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80047da:	b590      	push	{r4, r7, lr}
 80047dc:	b08d      	sub	sp, #52	; 0x34
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f004 f894 	bl	800891e <USB_GetMode>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f040 848a 	bne.w	8005112 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f003 fff8 	bl	80087f8 <USB_ReadInterrupts>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8480 	beq.w	8005110 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	0a1b      	lsrs	r3, r3, #8
 800481a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f003 ffe5 	bl	80087f8 <USB_ReadInterrupts>
 800482e:	4603      	mov	r3, r0
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b02      	cmp	r3, #2
 8004836:	d107      	bne.n	8004848 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f002 0202 	and.w	r2, r2, #2
 8004846:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f003 ffd3 	bl	80087f8 <USB_ReadInterrupts>
 8004852:	4603      	mov	r3, r0
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b10      	cmp	r3, #16
 800485a:	d161      	bne.n	8004920 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0210 	bic.w	r2, r2, #16
 800486a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	f003 020f 	and.w	r2, r3, #15
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	4413      	add	r3, r2
 8004888:	3304      	adds	r3, #4
 800488a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	0c5b      	lsrs	r3, r3, #17
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	2b02      	cmp	r3, #2
 8004896:	d124      	bne.n	80048e2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d035      	beq.n	8004910 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	091b      	lsrs	r3, r3, #4
 80048ac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	6a38      	ldr	r0, [r7, #32]
 80048b8:	f003 fe0a 	bl	80084d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	091b      	lsrs	r3, r3, #4
 80048c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048c8:	441a      	add	r2, r3
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	6a1a      	ldr	r2, [r3, #32]
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	091b      	lsrs	r3, r3, #4
 80048d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048da:	441a      	add	r2, r3
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	621a      	str	r2, [r3, #32]
 80048e0:	e016      	b.n	8004910 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	0c5b      	lsrs	r3, r3, #17
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	d110      	bne.n	8004910 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048f4:	2208      	movs	r2, #8
 80048f6:	4619      	mov	r1, r3
 80048f8:	6a38      	ldr	r0, [r7, #32]
 80048fa:	f003 fde9 	bl	80084d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	6a1a      	ldr	r2, [r3, #32]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800490a:	441a      	add	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0210 	orr.w	r2, r2, #16
 800491e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f003 ff67 	bl	80087f8 <USB_ReadInterrupts>
 800492a:	4603      	mov	r3, r0
 800492c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004930:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004934:	f040 80a7 	bne.w	8004a86 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f003 ff6c 	bl	800881e <USB_ReadDevAllOutEpInterrupt>
 8004946:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004948:	e099      	b.n	8004a7e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 808e 	beq.w	8004a72 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f003 ff90 	bl	8008886 <USB_ReadDevOutEPInterrupt>
 8004966:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00c      	beq.n	800498c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497e:	461a      	mov	r2, r3
 8004980:	2301      	movs	r3, #1
 8004982:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fef0 	bl	800576c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00c      	beq.n	80049b0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a2:	461a      	mov	r2, r3
 80049a4:	2308      	movs	r3, #8
 80049a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80049a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 ffc6 	bl	800593c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	461a      	mov	r2, r3
 80049c8:	2310      	movs	r3, #16
 80049ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d030      	beq.n	8004a38 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b80      	cmp	r3, #128	; 0x80
 80049e0:	d109      	bne.n	80049f6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049f4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	4613      	mov	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	3304      	adds	r3, #4
 8004a0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	78db      	ldrb	r3, [r3, #3]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d108      	bne.n	8004a26 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f00a ffe1 	bl	800f9e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a32:	461a      	mov	r2, r3
 8004a34:	2302      	movs	r3, #2
 8004a36:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d008      	beq.n	8004a54 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4e:	461a      	mov	r2, r3
 8004a50:	2320      	movs	r3, #32
 8004a52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a70:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	3301      	adds	r3, #1
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	085b      	lsrs	r3, r3, #1
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f47f af62 	bne.w	800494a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f003 feb4 	bl	80087f8 <USB_ReadInterrupts>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a9a:	f040 80db 	bne.w	8004c54 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f003 fed5 	bl	8008852 <USB_ReadDevAllInEpInterrupt>
 8004aa8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004aae:	e0cd      	b.n	8004c4c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80c2 	beq.w	8004c40 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f003 fefb 	bl	80088c2 <USB_ReadDevInEPInterrupt>
 8004acc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d057      	beq.n	8004b88 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	2201      	movs	r2, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69f9      	ldr	r1, [r7, #28]
 8004af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004af8:	4013      	ands	r3, r2
 8004afa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d132      	bne.n	8004b7c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	334c      	adds	r3, #76	; 0x4c
 8004b26:	6819      	ldr	r1, [r3, #0]
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4403      	add	r3, r0
 8004b36:	3348      	adds	r3, #72	; 0x48
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4419      	add	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b40:	4613      	mov	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4403      	add	r3, r0
 8004b4a:	334c      	adds	r3, #76	; 0x4c
 8004b4c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d113      	bne.n	8004b7c <HAL_PCD_IRQHandler+0x3a2>
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b58:	4613      	mov	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	3354      	adds	r3, #84	; 0x54
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d108      	bne.n	8004b7c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b74:	461a      	mov	r2, r3
 8004b76:	2101      	movs	r1, #1
 8004b78:	f003 ff02 	bl	8008980 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f00a feb5 	bl	800f8f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d008      	beq.n	8004bc0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2340      	movs	r3, #64	; 0x40
 8004bda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d023      	beq.n	8004c2e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004be8:	6a38      	ldr	r0, [r7, #32]
 8004bea:	f002 fde3 	bl	80077b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	3338      	adds	r3, #56	; 0x38
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3304      	adds	r3, #4
 8004c00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	78db      	ldrb	r3, [r3, #3]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d108      	bne.n	8004c1c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f00a fef8 	bl	800fa0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fd08 	bl	8005650 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	3301      	adds	r3, #1
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f47f af2e 	bne.w	8004ab0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f003 fdcd 	bl	80087f8 <USB_ReadInterrupts>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c68:	d122      	bne.n	8004cb0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d108      	bne.n	8004c9a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c90:	2100      	movs	r1, #0
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fef0 	bl	8005a78 <HAL_PCDEx_LPM_Callback>
 8004c98:	e002      	b.n	8004ca0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f00a fe96 	bl	800f9cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f003 fd9f 	bl	80087f8 <USB_ReadInterrupts>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc4:	d112      	bne.n	8004cec <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d102      	bne.n	8004cdc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f00a fe52 	bl	800f980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004cea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f003 fd81 	bl	80087f8 <USB_ReadInterrupts>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d00:	f040 80b7 	bne.w	8004e72 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2110      	movs	r1, #16
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f002 fd48 	bl	80077b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d24:	2300      	movs	r3, #0
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d28:	e046      	b.n	8004db8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d36:	461a      	mov	r2, r3
 8004d38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d70:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004db0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	3301      	adds	r3, #1
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d3b3      	bcc.n	8004d2a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dd0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004dd4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dee:	f043 030b 	orr.w	r3, r3, #11
 8004df2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e04:	f043 030b 	orr.w	r3, r3, #11
 8004e08:	6453      	str	r3, [r2, #68]	; 0x44
 8004e0a:	e015      	b.n	8004e38 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e1e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e22:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e32:	f043 030b 	orr.w	r3, r3, #11
 8004e36:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e4a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	f003 fd8f 	bl	8008980 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695a      	ldr	r2, [r3, #20]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f003 fcbe 	bl	80087f8 <USB_ReadInterrupts>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e86:	d124      	bne.n	8004ed2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f003 fd54 	bl	800893a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f002 fd09 	bl	80078ae <USB_GetDevSpeed>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681c      	ldr	r4, [r3, #0]
 8004ea8:	f001 fa54 	bl	8006354 <HAL_RCC_GetHCLKFreq>
 8004eac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f002 fa08 	bl	80072cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f00a fd40 	bl	800f942 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f003 fc8e 	bl	80087f8 <USB_ReadInterrupts>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d10a      	bne.n	8004efc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f00a fd1d 	bl	800f926 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f002 0208 	and.w	r2, r2, #8
 8004efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f003 fc79 	bl	80087f8 <USB_ReadInterrupts>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0c:	2b80      	cmp	r3, #128	; 0x80
 8004f0e:	d122      	bne.n	8004f56 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f20:	e014      	b.n	8004f4c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fb27 	bl	8005594 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	3301      	adds	r3, #1
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d3e5      	bcc.n	8004f22 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f003 fc4c 	bl	80087f8 <USB_ReadInterrupts>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f6a:	d13b      	bne.n	8004fe4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f70:	e02b      	b.n	8004fca <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f86:	4613      	mov	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3340      	adds	r3, #64	; 0x40
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d115      	bne.n	8004fc4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004f98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	da12      	bge.n	8004fc4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	333f      	adds	r3, #63	; 0x3f
 8004fae:	2201      	movs	r2, #1
 8004fb0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fae8 	bl	8005594 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d3ce      	bcc.n	8004f72 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695a      	ldr	r2, [r3, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f003 fc05 	bl	80087f8 <USB_ReadInterrupts>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ff8:	d155      	bne.n	80050a6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffe:	e045      	b.n	800508c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d12e      	bne.n	8005086 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005028:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800502a:	2b00      	cmp	r3, #0
 800502c:	da2b      	bge.n	8005086 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800503a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800503e:	429a      	cmp	r2, r3
 8005040:	d121      	bne.n	8005086 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005046:	4613      	mov	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005054:	2201      	movs	r2, #1
 8005056:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800507e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005082:	6053      	str	r3, [r2, #4]
            break;
 8005084:	e007      	b.n	8005096 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	3301      	adds	r3, #1
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005092:	429a      	cmp	r2, r3
 8005094:	d3b4      	bcc.n	8005000 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	695a      	ldr	r2, [r3, #20]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80050a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f003 fba4 	bl	80087f8 <USB_ReadInterrupts>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	d10a      	bne.n	80050d2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f00a fcb7 	bl	800fa30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80050d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f003 fb8e 	bl	80087f8 <USB_ReadInterrupts>
 80050dc:	4603      	mov	r3, r0
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d115      	bne.n	8005112 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f00a fca7 	bl	800fa4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6859      	ldr	r1, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	e000      	b.n	8005112 <HAL_PCD_IRQHandler+0x938>
      return;
 8005110:	bf00      	nop
    }
  }
}
 8005112:	3734      	adds	r7, #52	; 0x34
 8005114:	46bd      	mov	sp, r7
 8005116:	bd90      	pop	{r4, r7, pc}

08005118 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_PCD_SetAddress+0x1a>
 800512e:	2302      	movs	r3, #2
 8005130:	e013      	b.n	800515a <HAL_PCD_SetAddress+0x42>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	78fa      	ldrb	r2, [r7, #3]
 800513e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	78fa      	ldrb	r2, [r7, #3]
 8005148:	4611      	mov	r1, r2
 800514a:	4618      	mov	r0, r3
 800514c:	f003 faec 	bl	8008728 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	4608      	mov	r0, r1
 800516c:	4611      	mov	r1, r2
 800516e:	461a      	mov	r2, r3
 8005170:	4603      	mov	r3, r0
 8005172:	70fb      	strb	r3, [r7, #3]
 8005174:	460b      	mov	r3, r1
 8005176:	803b      	strh	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005184:	2b00      	cmp	r3, #0
 8005186:	da0f      	bge.n	80051a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	f003 020f 	and.w	r2, r3, #15
 800518e:	4613      	mov	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	3338      	adds	r3, #56	; 0x38
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	4413      	add	r3, r2
 800519c:	3304      	adds	r3, #4
 800519e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	705a      	strb	r2, [r3, #1]
 80051a6:	e00f      	b.n	80051c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	f003 020f 	and.w	r2, r3, #15
 80051ae:	4613      	mov	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	3304      	adds	r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80051d4:	883a      	ldrh	r2, [r7, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	78ba      	ldrb	r2, [r7, #2]
 80051de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051f2:	78bb      	ldrb	r3, [r7, #2]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d102      	bne.n	80051fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_PCD_EP_Open+0xaa>
 8005208:	2302      	movs	r3, #2
 800520a:	e00e      	b.n	800522a <HAL_PCD_EP_Open+0xc8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68f9      	ldr	r1, [r7, #12]
 800521a:	4618      	mov	r0, r3
 800521c:	f002 fb6c 	bl	80078f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005228:	7afb      	ldrb	r3, [r7, #11]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	460b      	mov	r3, r1
 800523c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800523e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005242:	2b00      	cmp	r3, #0
 8005244:	da0f      	bge.n	8005266 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	f003 020f 	and.w	r2, r3, #15
 800524c:	4613      	mov	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	3338      	adds	r3, #56	; 0x38
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	4413      	add	r3, r2
 800525a:	3304      	adds	r3, #4
 800525c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	705a      	strb	r2, [r3, #1]
 8005264:	e00f      	b.n	8005286 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	4613      	mov	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	4413      	add	r3, r2
 800527c:	3304      	adds	r3, #4
 800527e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	b2da      	uxtb	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_PCD_EP_Close+0x6e>
 800529c:	2302      	movs	r3, #2
 800529e:	e00e      	b.n	80052be <HAL_PCD_EP_Close+0x8c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68f9      	ldr	r1, [r7, #12]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f002 fbaa 	bl	8007a08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	460b      	mov	r3, r1
 80052d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052d6:	7afb      	ldrb	r3, [r7, #11]
 80052d8:	f003 020f 	and.w	r2, r3, #15
 80052dc:	4613      	mov	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	4413      	add	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	3304      	adds	r3, #4
 80052ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2200      	movs	r2, #0
 8005300:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2200      	movs	r2, #0
 8005306:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005308:	7afb      	ldrb	r3, [r7, #11]
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	b2da      	uxtb	r2, r3
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d102      	bne.n	8005322 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005322:	7afb      	ldrb	r3, [r7, #11]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	2b00      	cmp	r3, #0
 800532a:	d109      	bne.n	8005340 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	6979      	ldr	r1, [r7, #20]
 800533a:	f002 fe89 	bl	8008050 <USB_EP0StartXfer>
 800533e:	e008      	b.n	8005352 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	6979      	ldr	r1, [r7, #20]
 800534e:	f002 fc37 	bl	8007bc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	f003 020f 	and.w	r2, r3, #15
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	4613      	mov	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800537e:	681b      	ldr	r3, [r3, #0]
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	460b      	mov	r3, r1
 800539a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800539c:	7afb      	ldrb	r3, [r7, #11]
 800539e:	f003 020f 	and.w	r2, r3, #15
 80053a2:	4613      	mov	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	3338      	adds	r3, #56	; 0x38
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	3304      	adds	r3, #4
 80053b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2200      	movs	r2, #0
 80053c4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2201      	movs	r2, #1
 80053ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053cc:	7afb      	ldrb	r3, [r7, #11]
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d102      	bne.n	80053e6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053e6:	7afb      	ldrb	r3, [r7, #11]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	6979      	ldr	r1, [r7, #20]
 80053fe:	f002 fe27 	bl	8008050 <USB_EP0StartXfer>
 8005402:	e008      	b.n	8005416 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	461a      	mov	r2, r3
 8005410:	6979      	ldr	r1, [r7, #20]
 8005412:	f002 fbd5 	bl	8007bc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	f003 020f 	and.w	r2, r3, #15
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d901      	bls.n	800543e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e050      	b.n	80054e0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800543e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005442:	2b00      	cmp	r3, #0
 8005444:	da0f      	bge.n	8005466 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	f003 020f 	and.w	r2, r3, #15
 800544c:	4613      	mov	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	3338      	adds	r3, #56	; 0x38
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	4413      	add	r3, r2
 800545a:	3304      	adds	r3, #4
 800545c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	705a      	strb	r2, [r3, #1]
 8005464:	e00d      	b.n	8005482 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005466:	78fa      	ldrb	r2, [r7, #3]
 8005468:	4613      	mov	r3, r2
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	4413      	add	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4413      	add	r3, r2
 8005478:	3304      	adds	r3, #4
 800547a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	b2da      	uxtb	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_PCD_EP_SetStall+0x82>
 800549e:	2302      	movs	r3, #2
 80054a0:	e01e      	b.n	80054e0 <HAL_PCD_EP_SetStall+0xc0>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f003 f865 	bl	8008580 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	b2d9      	uxtb	r1, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054d0:	461a      	mov	r2, r3
 80054d2:	f003 fa55 	bl	8008980 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	f003 020f 	and.w	r2, r3, #15
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d901      	bls.n	8005506 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e042      	b.n	800558c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005506:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800550a:	2b00      	cmp	r3, #0
 800550c:	da0f      	bge.n	800552e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	f003 020f 	and.w	r2, r3, #15
 8005514:	4613      	mov	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	3338      	adds	r3, #56	; 0x38
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4413      	add	r3, r2
 8005522:	3304      	adds	r3, #4
 8005524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	705a      	strb	r2, [r3, #1]
 800552c:	e00f      	b.n	800554e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	f003 020f 	and.w	r2, r3, #15
 8005534:	4613      	mov	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	4413      	add	r3, r2
 8005544:	3304      	adds	r3, #4
 8005546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	b2da      	uxtb	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_PCD_EP_ClrStall+0x86>
 800556a:	2302      	movs	r3, #2
 800556c:	e00e      	b.n	800558c <HAL_PCD_EP_ClrStall+0xa4>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	4618      	mov	r0, r3
 800557e:	f003 f86d 	bl	800865c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80055a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	da0c      	bge.n	80055c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	f003 020f 	and.w	r2, r3, #15
 80055ae:	4613      	mov	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	3338      	adds	r3, #56	; 0x38
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4413      	add	r3, r2
 80055bc:	3304      	adds	r3, #4
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e00c      	b.n	80055dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	f003 020f 	and.w	r2, r3, #15
 80055c8:	4613      	mov	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	3304      	adds	r3, #4
 80055da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f002 fe8c 	bl	8008300 <USB_EPStopXfer>
 80055e8:	4603      	mov	r3, r0
 80055ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80055ec:	7afb      	ldrb	r3, [r7, #11]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	460b      	mov	r3, r1
 8005600:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_PCD_EP_Flush+0x1a>
 800560c:	2302      	movs	r3, #2
 800560e:	e01b      	b.n	8005648 <HAL_PCD_EP_Flush+0x52>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8005618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800561c:	2b00      	cmp	r3, #0
 800561e:	da09      	bge.n	8005634 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	78fb      	ldrb	r3, [r7, #3]
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f002 f8c1 	bl	80077b4 <USB_FlushTxFifo>
 8005632:	e004      	b.n	800563e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f002 f8ef 	bl	800781c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	; 0x28
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	4613      	mov	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	3338      	adds	r3, #56	; 0x38
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4413      	add	r3, r2
 8005674:	3304      	adds	r3, #4
 8005676:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a1a      	ldr	r2, [r3, #32]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	429a      	cmp	r2, r3
 8005682:	d901      	bls.n	8005688 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e06c      	b.n	8005762 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	429a      	cmp	r2, r3
 800569c:	d902      	bls.n	80056a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	3303      	adds	r3, #3
 80056a8:	089b      	lsrs	r3, r3, #2
 80056aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056ac:	e02b      	b.n	8005706 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d902      	bls.n	80056ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	3303      	adds	r3, #3
 80056ce:	089b      	lsrs	r3, r3, #2
 80056d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6919      	ldr	r1, [r3, #16]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	4603      	mov	r3, r0
 80056e8:	6978      	ldr	r0, [r7, #20]
 80056ea:	f002 feb3 	bl	8008454 <USB_WritePacket>

    ep->xfer_buff  += len;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	441a      	add	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1a      	ldr	r2, [r3, #32]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	441a      	add	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	b29b      	uxth	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	429a      	cmp	r2, r3
 800571a:	d809      	bhi.n	8005730 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a1a      	ldr	r2, [r3, #32]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005724:	429a      	cmp	r2, r3
 8005726:	d203      	bcs.n	8005730 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1be      	bne.n	80056ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	699a      	ldr	r2, [r3, #24]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	429a      	cmp	r2, r3
 800573a:	d811      	bhi.n	8005760 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	2201      	movs	r2, #1
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	43db      	mvns	r3, r3
 8005756:	6939      	ldr	r1, [r7, #16]
 8005758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800575c:	4013      	ands	r3, r2
 800575e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	333c      	adds	r3, #60	; 0x3c
 8005784:	3304      	adds	r3, #4
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d17b      	bne.n	800589a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d015      	beq.n	80057d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	4a61      	ldr	r2, [pc, #388]	; (8005934 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	f240 80b9 	bls.w	8005928 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80b3 	beq.w	8005928 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	461a      	mov	r2, r3
 80057d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057d4:	6093      	str	r3, [r2, #8]
 80057d6:	e0a7      	b.n	8005928 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ee:	461a      	mov	r2, r3
 80057f0:	2320      	movs	r3, #32
 80057f2:	6093      	str	r3, [r2, #8]
 80057f4:	e098      	b.n	8005928 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f040 8093 	bne.w	8005928 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	4a4b      	ldr	r2, [pc, #300]	; (8005934 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d90f      	bls.n	800582a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	461a      	mov	r2, r3
 8005822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005826:	6093      	str	r3, [r2, #8]
 8005828:	e07e      	b.n	8005928 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	4613      	mov	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	4413      	add	r3, r2
 800583c:	3304      	adds	r3, #4
 800583e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	0159      	lsls	r1, r3, #5
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	440b      	add	r3, r1
 800584c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005856:	1ad2      	subs	r2, r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d114      	bne.n	800588c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005874:	461a      	mov	r2, r3
 8005876:	2101      	movs	r1, #1
 8005878:	f003 f882 	bl	8008980 <USB_EP0_OutStart>
 800587c:	e006      	b.n	800588c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	691a      	ldr	r2, [r3, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	441a      	add	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f00a f812 	bl	800f8bc <HAL_PCD_DataOutStageCallback>
 8005898:	e046      	b.n	8005928 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	4a26      	ldr	r2, [pc, #152]	; (8005938 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d124      	bne.n	80058ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b8:	461a      	mov	r2, r3
 80058ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058be:	6093      	str	r3, [r2, #8]
 80058c0:	e032      	b.n	8005928 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	461a      	mov	r2, r3
 80058da:	2320      	movs	r3, #32
 80058dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f009 ffe9 	bl	800f8bc <HAL_PCD_DataOutStageCallback>
 80058ea:	e01d      	b.n	8005928 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d114      	bne.n	800591c <PCD_EP_OutXfrComplete_int+0x1b0>
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d108      	bne.n	800591c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005914:	461a      	mov	r2, r3
 8005916:	2100      	movs	r1, #0
 8005918:	f003 f832 	bl	8008980 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	b2db      	uxtb	r3, r3
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f009 ffca 	bl	800f8bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	4f54300a 	.word	0x4f54300a
 8005938:	4f54310a 	.word	0x4f54310a

0800593c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	333c      	adds	r3, #60	; 0x3c
 8005954:	3304      	adds	r3, #4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d90e      	bls.n	8005990 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005978:	2b00      	cmp	r3, #0
 800597a:	d009      	beq.n	8005990 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005988:	461a      	mov	r2, r3
 800598a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800598e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f009 ff81 	bl	800f898 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a0a      	ldr	r2, [pc, #40]	; (80059c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d90c      	bls.n	80059b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d108      	bne.n	80059b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059b0:	461a      	mov	r2, r3
 80059b2:	2101      	movs	r1, #1
 80059b4:	f002 ffe4 	bl	8008980 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	4f54300a 	.word	0x4f54300a

080059c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	70fb      	strb	r3, [r7, #3]
 80059d4:	4613      	mov	r3, r2
 80059d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d107      	bne.n	80059f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80059e6:	883b      	ldrh	r3, [r7, #0]
 80059e8:	0419      	lsls	r1, r3, #16
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28
 80059f4:	e028      	b.n	8005a48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	0c1b      	lsrs	r3, r3, #16
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	4413      	add	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a04:	2300      	movs	r3, #0
 8005a06:	73fb      	strb	r3, [r7, #15]
 8005a08:	e00d      	b.n	8005a26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	3340      	adds	r3, #64	; 0x40
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	0c1b      	lsrs	r3, r3, #16
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	3301      	adds	r3, #1
 8005a24:	73fb      	strb	r3, [r7, #15]
 8005a26:	7bfa      	ldrb	r2, [r7, #15]
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d3ec      	bcc.n	8005a0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a30:	883b      	ldrh	r3, [r7, #0]
 8005a32:	0418      	lsls	r0, r3, #16
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6819      	ldr	r1, [r3, #0]
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	4302      	orrs	r2, r0
 8005a40:	3340      	adds	r3, #64	; 0x40
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	887a      	ldrh	r2, [r7, #2]
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e267      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d075      	beq.n	8005b9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aae:	4b88      	ldr	r3, [pc, #544]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d00c      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aba:	4b85      	ldr	r3, [pc, #532]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d112      	bne.n	8005aec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ac6:	4b82      	ldr	r3, [pc, #520]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ad2:	d10b      	bne.n	8005aec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad4:	4b7e      	ldr	r3, [pc, #504]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d05b      	beq.n	8005b98 <HAL_RCC_OscConfig+0x108>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d157      	bne.n	8005b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e242      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af4:	d106      	bne.n	8005b04 <HAL_RCC_OscConfig+0x74>
 8005af6:	4b76      	ldr	r3, [pc, #472]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a75      	ldr	r2, [pc, #468]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	e01d      	b.n	8005b40 <HAL_RCC_OscConfig+0xb0>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b0c:	d10c      	bne.n	8005b28 <HAL_RCC_OscConfig+0x98>
 8005b0e:	4b70      	ldr	r3, [pc, #448]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a6f      	ldr	r2, [pc, #444]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	4b6d      	ldr	r3, [pc, #436]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a6c      	ldr	r2, [pc, #432]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e00b      	b.n	8005b40 <HAL_RCC_OscConfig+0xb0>
 8005b28:	4b69      	ldr	r3, [pc, #420]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a68      	ldr	r2, [pc, #416]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	4b66      	ldr	r3, [pc, #408]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a65      	ldr	r2, [pc, #404]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d013      	beq.n	8005b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b48:	f7fd fa40 	bl	8002fcc <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b50:	f7fd fa3c 	bl	8002fcc <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b64      	cmp	r3, #100	; 0x64
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e207      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b62:	4b5b      	ldr	r3, [pc, #364]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0f0      	beq.n	8005b50 <HAL_RCC_OscConfig+0xc0>
 8005b6e:	e014      	b.n	8005b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b70:	f7fd fa2c 	bl	8002fcc <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b78:	f7fd fa28 	bl	8002fcc <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b64      	cmp	r3, #100	; 0x64
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e1f3      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b8a:	4b51      	ldr	r3, [pc, #324]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1f0      	bne.n	8005b78 <HAL_RCC_OscConfig+0xe8>
 8005b96:	e000      	b.n	8005b9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d063      	beq.n	8005c6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ba6:	4b4a      	ldr	r3, [pc, #296]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 030c 	and.w	r3, r3, #12
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00b      	beq.n	8005bca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bb2:	4b47      	ldr	r3, [pc, #284]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d11c      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bbe:	4b44      	ldr	r3, [pc, #272]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d116      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bca:	4b41      	ldr	r3, [pc, #260]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <HAL_RCC_OscConfig+0x152>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d001      	beq.n	8005be2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e1c7      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be2:	4b3b      	ldr	r3, [pc, #236]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	4937      	ldr	r1, [pc, #220]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bf6:	e03a      	b.n	8005c6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d020      	beq.n	8005c42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c00:	4b34      	ldr	r3, [pc, #208]	; (8005cd4 <HAL_RCC_OscConfig+0x244>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c06:	f7fd f9e1 	bl	8002fcc <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c0e:	f7fd f9dd 	bl	8002fcc <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e1a8      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c20:	4b2b      	ldr	r3, [pc, #172]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0f0      	beq.n	8005c0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c2c:	4b28      	ldr	r3, [pc, #160]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	4925      	ldr	r1, [pc, #148]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	600b      	str	r3, [r1, #0]
 8005c40:	e015      	b.n	8005c6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c42:	4b24      	ldr	r3, [pc, #144]	; (8005cd4 <HAL_RCC_OscConfig+0x244>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c48:	f7fd f9c0 	bl	8002fcc <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c50:	f7fd f9bc 	bl	8002fcc <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e187      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c62:	4b1b      	ldr	r3, [pc, #108]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1f0      	bne.n	8005c50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d036      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d016      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c82:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <HAL_RCC_OscConfig+0x248>)
 8005c84:	2201      	movs	r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c88:	f7fd f9a0 	bl	8002fcc <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c90:	f7fd f99c 	bl	8002fcc <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e167      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca2:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0f0      	beq.n	8005c90 <HAL_RCC_OscConfig+0x200>
 8005cae:	e01b      	b.n	8005ce8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cb0:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <HAL_RCC_OscConfig+0x248>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb6:	f7fd f989 	bl	8002fcc <HAL_GetTick>
 8005cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cbc:	e00e      	b.n	8005cdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cbe:	f7fd f985 	bl	8002fcc <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d907      	bls.n	8005cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e150      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	42470000 	.word	0x42470000
 8005cd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cdc:	4b88      	ldr	r3, [pc, #544]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1ea      	bne.n	8005cbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 8097 	beq.w	8005e24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cfa:	4b81      	ldr	r3, [pc, #516]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10f      	bne.n	8005d26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d06:	2300      	movs	r3, #0
 8005d08:	60bb      	str	r3, [r7, #8]
 8005d0a:	4b7d      	ldr	r3, [pc, #500]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	4a7c      	ldr	r2, [pc, #496]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d14:	6413      	str	r3, [r2, #64]	; 0x40
 8005d16:	4b7a      	ldr	r3, [pc, #488]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	60bb      	str	r3, [r7, #8]
 8005d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d22:	2301      	movs	r3, #1
 8005d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d26:	4b77      	ldr	r3, [pc, #476]	; (8005f04 <HAL_RCC_OscConfig+0x474>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d118      	bne.n	8005d64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d32:	4b74      	ldr	r3, [pc, #464]	; (8005f04 <HAL_RCC_OscConfig+0x474>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a73      	ldr	r2, [pc, #460]	; (8005f04 <HAL_RCC_OscConfig+0x474>)
 8005d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d3e:	f7fd f945 	bl	8002fcc <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d46:	f7fd f941 	bl	8002fcc <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e10c      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d58:	4b6a      	ldr	r3, [pc, #424]	; (8005f04 <HAL_RCC_OscConfig+0x474>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d106      	bne.n	8005d7a <HAL_RCC_OscConfig+0x2ea>
 8005d6c:	4b64      	ldr	r3, [pc, #400]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d70:	4a63      	ldr	r2, [pc, #396]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	6713      	str	r3, [r2, #112]	; 0x70
 8005d78:	e01c      	b.n	8005db4 <HAL_RCC_OscConfig+0x324>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b05      	cmp	r3, #5
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCC_OscConfig+0x30c>
 8005d82:	4b5f      	ldr	r3, [pc, #380]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d86:	4a5e      	ldr	r2, [pc, #376]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005d88:	f043 0304 	orr.w	r3, r3, #4
 8005d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d8e:	4b5c      	ldr	r3, [pc, #368]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	4a5b      	ldr	r2, [pc, #364]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	6713      	str	r3, [r2, #112]	; 0x70
 8005d9a:	e00b      	b.n	8005db4 <HAL_RCC_OscConfig+0x324>
 8005d9c:	4b58      	ldr	r3, [pc, #352]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da0:	4a57      	ldr	r2, [pc, #348]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005da2:	f023 0301 	bic.w	r3, r3, #1
 8005da6:	6713      	str	r3, [r2, #112]	; 0x70
 8005da8:	4b55      	ldr	r3, [pc, #340]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dac:	4a54      	ldr	r2, [pc, #336]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005dae:	f023 0304 	bic.w	r3, r3, #4
 8005db2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d015      	beq.n	8005de8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbc:	f7fd f906 	bl	8002fcc <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc2:	e00a      	b.n	8005dda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dc4:	f7fd f902 	bl	8002fcc <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e0cb      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dda:	4b49      	ldr	r3, [pc, #292]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0ee      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x334>
 8005de6:	e014      	b.n	8005e12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005de8:	f7fd f8f0 	bl	8002fcc <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dee:	e00a      	b.n	8005e06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005df0:	f7fd f8ec 	bl	8002fcc <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e0b5      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e06:	4b3e      	ldr	r3, [pc, #248]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1ee      	bne.n	8005df0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d105      	bne.n	8005e24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e18:	4b39      	ldr	r3, [pc, #228]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	4a38      	ldr	r2, [pc, #224]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 80a1 	beq.w	8005f70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e2e:	4b34      	ldr	r3, [pc, #208]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 030c 	and.w	r3, r3, #12
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d05c      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d141      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e42:	4b31      	ldr	r3, [pc, #196]	; (8005f08 <HAL_RCC_OscConfig+0x478>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e48:	f7fd f8c0 	bl	8002fcc <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e50:	f7fd f8bc 	bl	8002fcc <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e087      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e62:	4b27      	ldr	r3, [pc, #156]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69da      	ldr	r2, [r3, #28]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	019b      	lsls	r3, r3, #6
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	3b01      	subs	r3, #1
 8005e88:	041b      	lsls	r3, r3, #16
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	061b      	lsls	r3, r3, #24
 8005e92:	491b      	ldr	r1, [pc, #108]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e98:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <HAL_RCC_OscConfig+0x478>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e9e:	f7fd f895 	bl	8002fcc <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ea6:	f7fd f891 	bl	8002fcc <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e05c      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb8:	4b11      	ldr	r3, [pc, #68]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0f0      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x416>
 8005ec4:	e054      	b.n	8005f70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec6:	4b10      	ldr	r3, [pc, #64]	; (8005f08 <HAL_RCC_OscConfig+0x478>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ecc:	f7fd f87e 	bl	8002fcc <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ed4:	f7fd f87a 	bl	8002fcc <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e045      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ee6:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <HAL_RCC_OscConfig+0x470>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f0      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x444>
 8005ef2:	e03d      	b.n	8005f70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d107      	bne.n	8005f0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e038      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
 8005f00:	40023800 	.word	0x40023800
 8005f04:	40007000 	.word	0x40007000
 8005f08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f0c:	4b1b      	ldr	r3, [pc, #108]	; (8005f7c <HAL_RCC_OscConfig+0x4ec>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d028      	beq.n	8005f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d121      	bne.n	8005f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d11a      	bne.n	8005f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d111      	bne.n	8005f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	3b01      	subs	r3, #1
 8005f56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d107      	bne.n	8005f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d001      	beq.n	8005f70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e000      	b.n	8005f72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40023800 	.word	0x40023800

08005f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e0cc      	b.n	800612e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f94:	4b68      	ldr	r3, [pc, #416]	; (8006138 <HAL_RCC_ClockConfig+0x1b8>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d90c      	bls.n	8005fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa2:	4b65      	ldr	r3, [pc, #404]	; (8006138 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005faa:	4b63      	ldr	r3, [pc, #396]	; (8006138 <HAL_RCC_ClockConfig+0x1b8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d001      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e0b8      	b.n	800612e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d020      	beq.n	800600a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fd4:	4b59      	ldr	r3, [pc, #356]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	4a58      	ldr	r2, [pc, #352]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 8005fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fec:	4b53      	ldr	r3, [pc, #332]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	4a52      	ldr	r2, [pc, #328]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ff8:	4b50      	ldr	r3, [pc, #320]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	494d      	ldr	r1, [pc, #308]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	4313      	orrs	r3, r2
 8006008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d044      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d107      	bne.n	800602e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800601e:	4b47      	ldr	r3, [pc, #284]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d119      	bne.n	800605e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e07f      	b.n	800612e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d003      	beq.n	800603e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800603a:	2b03      	cmp	r3, #3
 800603c:	d107      	bne.n	800604e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800603e:	4b3f      	ldr	r3, [pc, #252]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e06f      	b.n	800612e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800604e:	4b3b      	ldr	r3, [pc, #236]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e067      	b.n	800612e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800605e:	4b37      	ldr	r3, [pc, #220]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f023 0203 	bic.w	r2, r3, #3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	4934      	ldr	r1, [pc, #208]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 800606c:	4313      	orrs	r3, r2
 800606e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006070:	f7fc ffac 	bl	8002fcc <HAL_GetTick>
 8006074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006076:	e00a      	b.n	800608e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006078:	f7fc ffa8 	bl	8002fcc <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	f241 3288 	movw	r2, #5000	; 0x1388
 8006086:	4293      	cmp	r3, r2
 8006088:	d901      	bls.n	800608e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e04f      	b.n	800612e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608e:	4b2b      	ldr	r3, [pc, #172]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 020c 	and.w	r2, r3, #12
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	429a      	cmp	r2, r3
 800609e:	d1eb      	bne.n	8006078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060a0:	4b25      	ldr	r3, [pc, #148]	; (8006138 <HAL_RCC_ClockConfig+0x1b8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d20c      	bcs.n	80060c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ae:	4b22      	ldr	r3, [pc, #136]	; (8006138 <HAL_RCC_ClockConfig+0x1b8>)
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b6:	4b20      	ldr	r3, [pc, #128]	; (8006138 <HAL_RCC_ClockConfig+0x1b8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d001      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e032      	b.n	800612e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060d4:	4b19      	ldr	r3, [pc, #100]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	4916      	ldr	r1, [pc, #88]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d009      	beq.n	8006106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060f2:	4b12      	ldr	r3, [pc, #72]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	490e      	ldr	r1, [pc, #56]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	4313      	orrs	r3, r2
 8006104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006106:	f000 f821 	bl	800614c <HAL_RCC_GetSysClockFreq>
 800610a:	4602      	mov	r2, r0
 800610c:	4b0b      	ldr	r3, [pc, #44]	; (800613c <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	091b      	lsrs	r3, r3, #4
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	490a      	ldr	r1, [pc, #40]	; (8006140 <HAL_RCC_ClockConfig+0x1c0>)
 8006118:	5ccb      	ldrb	r3, [r1, r3]
 800611a:	fa22 f303 	lsr.w	r3, r2, r3
 800611e:	4a09      	ldr	r2, [pc, #36]	; (8006144 <HAL_RCC_ClockConfig+0x1c4>)
 8006120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006122:	4b09      	ldr	r3, [pc, #36]	; (8006148 <HAL_RCC_ClockConfig+0x1c8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f7fc ff0c 	bl	8002f44 <HAL_InitTick>

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	40023c00 	.word	0x40023c00
 800613c:	40023800 	.word	0x40023800
 8006140:	08012e50 	.word	0x08012e50
 8006144:	20000004 	.word	0x20000004
 8006148:	20000008 	.word	0x20000008

0800614c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800614c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006150:	b094      	sub	sp, #80	; 0x50
 8006152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	647b      	str	r3, [r7, #68]	; 0x44
 8006158:	2300      	movs	r3, #0
 800615a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800615c:	2300      	movs	r3, #0
 800615e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006164:	4b79      	ldr	r3, [pc, #484]	; (800634c <HAL_RCC_GetSysClockFreq+0x200>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f003 030c 	and.w	r3, r3, #12
 800616c:	2b08      	cmp	r3, #8
 800616e:	d00d      	beq.n	800618c <HAL_RCC_GetSysClockFreq+0x40>
 8006170:	2b08      	cmp	r3, #8
 8006172:	f200 80e1 	bhi.w	8006338 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <HAL_RCC_GetSysClockFreq+0x34>
 800617a:	2b04      	cmp	r3, #4
 800617c:	d003      	beq.n	8006186 <HAL_RCC_GetSysClockFreq+0x3a>
 800617e:	e0db      	b.n	8006338 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006180:	4b73      	ldr	r3, [pc, #460]	; (8006350 <HAL_RCC_GetSysClockFreq+0x204>)
 8006182:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006184:	e0db      	b.n	800633e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006186:	4b72      	ldr	r3, [pc, #456]	; (8006350 <HAL_RCC_GetSysClockFreq+0x204>)
 8006188:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800618a:	e0d8      	b.n	800633e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800618c:	4b6f      	ldr	r3, [pc, #444]	; (800634c <HAL_RCC_GetSysClockFreq+0x200>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006194:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006196:	4b6d      	ldr	r3, [pc, #436]	; (800634c <HAL_RCC_GetSysClockFreq+0x200>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d063      	beq.n	800626a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061a2:	4b6a      	ldr	r3, [pc, #424]	; (800634c <HAL_RCC_GetSysClockFreq+0x200>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	099b      	lsrs	r3, r3, #6
 80061a8:	2200      	movs	r2, #0
 80061aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80061ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b4:	633b      	str	r3, [r7, #48]	; 0x30
 80061b6:	2300      	movs	r3, #0
 80061b8:	637b      	str	r3, [r7, #52]	; 0x34
 80061ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061be:	4622      	mov	r2, r4
 80061c0:	462b      	mov	r3, r5
 80061c2:	f04f 0000 	mov.w	r0, #0
 80061c6:	f04f 0100 	mov.w	r1, #0
 80061ca:	0159      	lsls	r1, r3, #5
 80061cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061d0:	0150      	lsls	r0, r2, #5
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4621      	mov	r1, r4
 80061d8:	1a51      	subs	r1, r2, r1
 80061da:	6139      	str	r1, [r7, #16]
 80061dc:	4629      	mov	r1, r5
 80061de:	eb63 0301 	sbc.w	r3, r3, r1
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061f0:	4659      	mov	r1, fp
 80061f2:	018b      	lsls	r3, r1, #6
 80061f4:	4651      	mov	r1, sl
 80061f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061fa:	4651      	mov	r1, sl
 80061fc:	018a      	lsls	r2, r1, #6
 80061fe:	4651      	mov	r1, sl
 8006200:	ebb2 0801 	subs.w	r8, r2, r1
 8006204:	4659      	mov	r1, fp
 8006206:	eb63 0901 	sbc.w	r9, r3, r1
 800620a:	f04f 0200 	mov.w	r2, #0
 800620e:	f04f 0300 	mov.w	r3, #0
 8006212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800621a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800621e:	4690      	mov	r8, r2
 8006220:	4699      	mov	r9, r3
 8006222:	4623      	mov	r3, r4
 8006224:	eb18 0303 	adds.w	r3, r8, r3
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	462b      	mov	r3, r5
 800622c:	eb49 0303 	adc.w	r3, r9, r3
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800623e:	4629      	mov	r1, r5
 8006240:	028b      	lsls	r3, r1, #10
 8006242:	4621      	mov	r1, r4
 8006244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006248:	4621      	mov	r1, r4
 800624a:	028a      	lsls	r2, r1, #10
 800624c:	4610      	mov	r0, r2
 800624e:	4619      	mov	r1, r3
 8006250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006252:	2200      	movs	r2, #0
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
 8006256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006258:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800625c:	f7fa fcfc 	bl	8000c58 <__aeabi_uldivmod>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4613      	mov	r3, r2
 8006266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006268:	e058      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800626a:	4b38      	ldr	r3, [pc, #224]	; (800634c <HAL_RCC_GetSysClockFreq+0x200>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	099b      	lsrs	r3, r3, #6
 8006270:	2200      	movs	r2, #0
 8006272:	4618      	mov	r0, r3
 8006274:	4611      	mov	r1, r2
 8006276:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800627a:	623b      	str	r3, [r7, #32]
 800627c:	2300      	movs	r3, #0
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
 8006280:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006284:	4642      	mov	r2, r8
 8006286:	464b      	mov	r3, r9
 8006288:	f04f 0000 	mov.w	r0, #0
 800628c:	f04f 0100 	mov.w	r1, #0
 8006290:	0159      	lsls	r1, r3, #5
 8006292:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006296:	0150      	lsls	r0, r2, #5
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4641      	mov	r1, r8
 800629e:	ebb2 0a01 	subs.w	sl, r2, r1
 80062a2:	4649      	mov	r1, r9
 80062a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062bc:	ebb2 040a 	subs.w	r4, r2, sl
 80062c0:	eb63 050b 	sbc.w	r5, r3, fp
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	00eb      	lsls	r3, r5, #3
 80062ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062d2:	00e2      	lsls	r2, r4, #3
 80062d4:	4614      	mov	r4, r2
 80062d6:	461d      	mov	r5, r3
 80062d8:	4643      	mov	r3, r8
 80062da:	18e3      	adds	r3, r4, r3
 80062dc:	603b      	str	r3, [r7, #0]
 80062de:	464b      	mov	r3, r9
 80062e0:	eb45 0303 	adc.w	r3, r5, r3
 80062e4:	607b      	str	r3, [r7, #4]
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062f2:	4629      	mov	r1, r5
 80062f4:	028b      	lsls	r3, r1, #10
 80062f6:	4621      	mov	r1, r4
 80062f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062fc:	4621      	mov	r1, r4
 80062fe:	028a      	lsls	r2, r1, #10
 8006300:	4610      	mov	r0, r2
 8006302:	4619      	mov	r1, r3
 8006304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006306:	2200      	movs	r2, #0
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	61fa      	str	r2, [r7, #28]
 800630c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006310:	f7fa fca2 	bl	8000c58 <__aeabi_uldivmod>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4613      	mov	r3, r2
 800631a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800631c:	4b0b      	ldr	r3, [pc, #44]	; (800634c <HAL_RCC_GetSysClockFreq+0x200>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	0c1b      	lsrs	r3, r3, #16
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	3301      	adds	r3, #1
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800632c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800632e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006330:	fbb2 f3f3 	udiv	r3, r2, r3
 8006334:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006336:	e002      	b.n	800633e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <HAL_RCC_GetSysClockFreq+0x204>)
 800633a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800633c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800633e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006340:	4618      	mov	r0, r3
 8006342:	3750      	adds	r7, #80	; 0x50
 8006344:	46bd      	mov	sp, r7
 8006346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800634a:	bf00      	nop
 800634c:	40023800 	.word	0x40023800
 8006350:	00f42400 	.word	0x00f42400

08006354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006358:	4b03      	ldr	r3, [pc, #12]	; (8006368 <HAL_RCC_GetHCLKFreq+0x14>)
 800635a:	681b      	ldr	r3, [r3, #0]
}
 800635c:	4618      	mov	r0, r3
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20000004 	.word	0x20000004

0800636c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006370:	f7ff fff0 	bl	8006354 <HAL_RCC_GetHCLKFreq>
 8006374:	4602      	mov	r2, r0
 8006376:	4b05      	ldr	r3, [pc, #20]	; (800638c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	0a9b      	lsrs	r3, r3, #10
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	4903      	ldr	r1, [pc, #12]	; (8006390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006382:	5ccb      	ldrb	r3, [r1, r3]
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006388:	4618      	mov	r0, r3
 800638a:	bd80      	pop	{r7, pc}
 800638c:	40023800 	.word	0x40023800
 8006390:	08012e60 	.word	0x08012e60

08006394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e07b      	b.n	800649e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d108      	bne.n	80063c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063b6:	d009      	beq.n	80063cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	61da      	str	r2, [r3, #28]
 80063be:	e005      	b.n	80063cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fc fb9e 	bl	8002b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006402:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006414:	431a      	orrs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006450:	ea42 0103 	orr.w	r1, r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	0c1b      	lsrs	r3, r3, #16
 800646a:	f003 0104 	and.w	r1, r3, #4
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f003 0210 	and.w	r2, r3, #16
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800648c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b088      	sub	sp, #32
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	4613      	mov	r3, r2
 80064b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_SPI_Transmit+0x22>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e126      	b.n	8006716 <HAL_SPI_Transmit+0x270>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064d0:	f7fc fd7c 	bl	8002fcc <HAL_GetTick>
 80064d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d002      	beq.n	80064ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064e6:	2302      	movs	r3, #2
 80064e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064ea:	e10b      	b.n	8006704 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_SPI_Transmit+0x52>
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064fc:	e102      	b.n	8006704 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2203      	movs	r2, #3
 8006502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	88fa      	ldrh	r2, [r7, #6]
 8006516:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	88fa      	ldrh	r2, [r7, #6]
 800651c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006544:	d10f      	bne.n	8006566 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006554:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006564:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006570:	2b40      	cmp	r3, #64	; 0x40
 8006572:	d007      	beq.n	8006584 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006582:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800658c:	d14b      	bne.n	8006626 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_SPI_Transmit+0xf6>
 8006596:	8afb      	ldrh	r3, [r7, #22]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d13e      	bne.n	800661a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a0:	881a      	ldrh	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	1c9a      	adds	r2, r3, #2
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065c0:	e02b      	b.n	800661a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d112      	bne.n	80065f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	881a      	ldrh	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e0:	1c9a      	adds	r2, r3, #2
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80065f4:	e011      	b.n	800661a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065f6:	f7fc fce9 	bl	8002fcc <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d803      	bhi.n	800660e <HAL_SPI_Transmit+0x168>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660c:	d102      	bne.n	8006614 <HAL_SPI_Transmit+0x16e>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d102      	bne.n	800661a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006618:	e074      	b.n	8006704 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800661e:	b29b      	uxth	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1ce      	bne.n	80065c2 <HAL_SPI_Transmit+0x11c>
 8006624:	e04c      	b.n	80066c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <HAL_SPI_Transmit+0x18e>
 800662e:	8afb      	ldrh	r3, [r7, #22]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d140      	bne.n	80066b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	330c      	adds	r3, #12
 800663e:	7812      	ldrb	r2, [r2, #0]
 8006640:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006650:	b29b      	uxth	r3, r3
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800665a:	e02c      	b.n	80066b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b02      	cmp	r3, #2
 8006668:	d113      	bne.n	8006692 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	330c      	adds	r3, #12
 8006674:	7812      	ldrb	r2, [r2, #0]
 8006676:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006686:	b29b      	uxth	r3, r3
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006690:	e011      	b.n	80066b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006692:	f7fc fc9b 	bl	8002fcc <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d803      	bhi.n	80066aa <HAL_SPI_Transmit+0x204>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d102      	bne.n	80066b0 <HAL_SPI_Transmit+0x20a>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066b4:	e026      	b.n	8006704 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1cd      	bne.n	800665c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 fa63 	bl	8006b90 <SPI_EndRxTxTransaction>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066de:	2300      	movs	r3, #0
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	77fb      	strb	r3, [r7, #31]
 8006700:	e000      	b.n	8006704 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006702:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006714:	7ffb      	ldrb	r3, [r7, #31]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3720      	adds	r7, #32
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b08c      	sub	sp, #48	; 0x30
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	607a      	str	r2, [r7, #4]
 800672a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800672c:	2301      	movs	r3, #1
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_SPI_TransmitReceive+0x26>
 8006740:	2302      	movs	r3, #2
 8006742:	e18a      	b.n	8006a5a <HAL_SPI_TransmitReceive+0x33c>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800674c:	f7fc fc3e 	bl	8002fcc <HAL_GetTick>
 8006750:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006762:	887b      	ldrh	r3, [r7, #2]
 8006764:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006766:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800676a:	2b01      	cmp	r3, #1
 800676c:	d00f      	beq.n	800678e <HAL_SPI_TransmitReceive+0x70>
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006774:	d107      	bne.n	8006786 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d103      	bne.n	8006786 <HAL_SPI_TransmitReceive+0x68>
 800677e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006782:	2b04      	cmp	r3, #4
 8006784:	d003      	beq.n	800678e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006786:	2302      	movs	r3, #2
 8006788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800678c:	e15b      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <HAL_SPI_TransmitReceive+0x82>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_SPI_TransmitReceive+0x82>
 800679a:	887b      	ldrh	r3, [r7, #2]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d103      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067a6:	e14e      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d003      	beq.n	80067bc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2205      	movs	r2, #5
 80067b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	887a      	ldrh	r2, [r7, #2]
 80067cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	887a      	ldrh	r2, [r7, #2]
 80067d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	887a      	ldrh	r2, [r7, #2]
 80067de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	887a      	ldrh	r2, [r7, #2]
 80067e4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fc:	2b40      	cmp	r3, #64	; 0x40
 80067fe:	d007      	beq.n	8006810 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800680e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006818:	d178      	bne.n	800690c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <HAL_SPI_TransmitReceive+0x10a>
 8006822:	8b7b      	ldrh	r3, [r7, #26]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d166      	bne.n	80068f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682c:	881a      	ldrh	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	1c9a      	adds	r2, r3, #2
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006842:	b29b      	uxth	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800684c:	e053      	b.n	80068f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b02      	cmp	r3, #2
 800685a:	d11b      	bne.n	8006894 <HAL_SPI_TransmitReceive+0x176>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d016      	beq.n	8006894 <HAL_SPI_TransmitReceive+0x176>
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	2b01      	cmp	r3, #1
 800686a:	d113      	bne.n	8006894 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006870:	881a      	ldrh	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687c:	1c9a      	adds	r2, r3, #2
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006886:	b29b      	uxth	r3, r3
 8006888:	3b01      	subs	r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d119      	bne.n	80068d6 <HAL_SPI_TransmitReceive+0x1b8>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d014      	beq.n	80068d6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	b292      	uxth	r2, r2
 80068b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	1c9a      	adds	r2, r3, #2
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068d2:	2301      	movs	r3, #1
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068d6:	f7fc fb79 	bl	8002fcc <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d807      	bhi.n	80068f6 <HAL_SPI_TransmitReceive+0x1d8>
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d003      	beq.n	80068f6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80068f4:	e0a7      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1a6      	bne.n	800684e <HAL_SPI_TransmitReceive+0x130>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006904:	b29b      	uxth	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1a1      	bne.n	800684e <HAL_SPI_TransmitReceive+0x130>
 800690a:	e07c      	b.n	8006a06 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_SPI_TransmitReceive+0x1fc>
 8006914:	8b7b      	ldrh	r3, [r7, #26]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d16b      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	330c      	adds	r3, #12
 8006924:	7812      	ldrb	r2, [r2, #0]
 8006926:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006936:	b29b      	uxth	r3, r3
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006940:	e057      	b.n	80069f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b02      	cmp	r3, #2
 800694e:	d11c      	bne.n	800698a <HAL_SPI_TransmitReceive+0x26c>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d017      	beq.n	800698a <HAL_SPI_TransmitReceive+0x26c>
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	2b01      	cmp	r3, #1
 800695e:	d114      	bne.n	800698a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	7812      	ldrb	r2, [r2, #0]
 800696c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b01      	cmp	r3, #1
 8006996:	d119      	bne.n	80069cc <HAL_SPI_TransmitReceive+0x2ae>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d014      	beq.n	80069cc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069be:	b29b      	uxth	r3, r3
 80069c0:	3b01      	subs	r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069c8:	2301      	movs	r3, #1
 80069ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069cc:	f7fc fafe 	bl	8002fcc <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069d8:	429a      	cmp	r2, r3
 80069da:	d803      	bhi.n	80069e4 <HAL_SPI_TransmitReceive+0x2c6>
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d102      	bne.n	80069ea <HAL_SPI_TransmitReceive+0x2cc>
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d103      	bne.n	80069f2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069f0:	e029      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1a2      	bne.n	8006942 <HAL_SPI_TransmitReceive+0x224>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d19d      	bne.n	8006942 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f8c0 	bl	8006b90 <SPI_EndRxTxTransaction>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d006      	beq.n	8006a24 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006a22:	e010      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10b      	bne.n	8006a44 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	e000      	b.n	8006a46 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006a44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3730      	adds	r7, #48	; 0x30
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a70:	b2db      	uxtb	r3, r3
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
	...

08006a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a90:	f7fc fa9c 	bl	8002fcc <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	1a9b      	subs	r3, r3, r2
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006aa0:	f7fc fa94 	bl	8002fcc <HAL_GetTick>
 8006aa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006aa6:	4b39      	ldr	r3, [pc, #228]	; (8006b8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	015b      	lsls	r3, r3, #5
 8006aac:	0d1b      	lsrs	r3, r3, #20
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	fb02 f303 	mul.w	r3, r2, r3
 8006ab4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ab6:	e054      	b.n	8006b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d050      	beq.n	8006b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ac0:	f7fc fa84 	bl	8002fcc <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d902      	bls.n	8006ad6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d13d      	bne.n	8006b52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ae4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aee:	d111      	bne.n	8006b14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af8:	d004      	beq.n	8006b04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b02:	d107      	bne.n	8006b14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b1c:	d10f      	bne.n	8006b3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b2c:	601a      	str	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e017      	b.n	8006b82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	bf0c      	ite	eq
 8006b72:	2301      	moveq	r3, #1
 8006b74:	2300      	movne	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d19b      	bne.n	8006ab8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000004 	.word	0x20000004

08006b90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b9c:	4b1b      	ldr	r3, [pc, #108]	; (8006c0c <SPI_EndRxTxTransaction+0x7c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1b      	ldr	r2, [pc, #108]	; (8006c10 <SPI_EndRxTxTransaction+0x80>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	0d5b      	lsrs	r3, r3, #21
 8006ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bac:	fb02 f303 	mul.w	r3, r2, r3
 8006bb0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bba:	d112      	bne.n	8006be2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2180      	movs	r1, #128	; 0x80
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff ff5a 	bl	8006a80 <SPI_WaitFlagStateUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d016      	beq.n	8006c00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd6:	f043 0220 	orr.w	r2, r3, #32
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e00f      	b.n	8006c02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf8:	2b80      	cmp	r3, #128	; 0x80
 8006bfa:	d0f2      	beq.n	8006be2 <SPI_EndRxTxTransaction+0x52>
 8006bfc:	e000      	b.n	8006c00 <SPI_EndRxTxTransaction+0x70>
        break;
 8006bfe:	bf00      	nop
  }

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000004 	.word	0x20000004
 8006c10:	165e9f81 	.word	0x165e9f81

08006c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e041      	b.n	8006caa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d106      	bne.n	8006c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fb ffbc 	bl	8002bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	4619      	mov	r1, r3
 8006c52:	4610      	mov	r0, r2
 8006c54:	f000 f950 	bl	8006ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d001      	beq.n	8006ccc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e03c      	b.n	8006d46 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1e      	ldr	r2, [pc, #120]	; (8006d54 <HAL_TIM_Base_Start+0xa0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d018      	beq.n	8006d10 <HAL_TIM_Base_Start+0x5c>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce6:	d013      	beq.n	8006d10 <HAL_TIM_Base_Start+0x5c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1a      	ldr	r2, [pc, #104]	; (8006d58 <HAL_TIM_Base_Start+0xa4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00e      	beq.n	8006d10 <HAL_TIM_Base_Start+0x5c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a19      	ldr	r2, [pc, #100]	; (8006d5c <HAL_TIM_Base_Start+0xa8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_TIM_Base_Start+0x5c>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a17      	ldr	r2, [pc, #92]	; (8006d60 <HAL_TIM_Base_Start+0xac>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_TIM_Base_Start+0x5c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a16      	ldr	r2, [pc, #88]	; (8006d64 <HAL_TIM_Base_Start+0xb0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d111      	bne.n	8006d34 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b06      	cmp	r3, #6
 8006d20:	d010      	beq.n	8006d44 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 0201 	orr.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d32:	e007      	b.n	8006d44 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0201 	orr.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40010000 	.word	0x40010000
 8006d58:	40000400 	.word	0x40000400
 8006d5c:	40000800 	.word	0x40000800
 8006d60:	40000c00 	.word	0x40000c00
 8006d64:	40014000 	.word	0x40014000

08006d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_TIM_ConfigClockSource+0x1c>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e0b4      	b.n	8006eee <HAL_TIM_ConfigClockSource+0x186>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006daa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dbc:	d03e      	beq.n	8006e3c <HAL_TIM_ConfigClockSource+0xd4>
 8006dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc2:	f200 8087 	bhi.w	8006ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dca:	f000 8086 	beq.w	8006eda <HAL_TIM_ConfigClockSource+0x172>
 8006dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd2:	d87f      	bhi.n	8006ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd4:	2b70      	cmp	r3, #112	; 0x70
 8006dd6:	d01a      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0xa6>
 8006dd8:	2b70      	cmp	r3, #112	; 0x70
 8006dda:	d87b      	bhi.n	8006ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ddc:	2b60      	cmp	r3, #96	; 0x60
 8006dde:	d050      	beq.n	8006e82 <HAL_TIM_ConfigClockSource+0x11a>
 8006de0:	2b60      	cmp	r3, #96	; 0x60
 8006de2:	d877      	bhi.n	8006ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8006de4:	2b50      	cmp	r3, #80	; 0x50
 8006de6:	d03c      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0xfa>
 8006de8:	2b50      	cmp	r3, #80	; 0x50
 8006dea:	d873      	bhi.n	8006ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dec:	2b40      	cmp	r3, #64	; 0x40
 8006dee:	d058      	beq.n	8006ea2 <HAL_TIM_ConfigClockSource+0x13a>
 8006df0:	2b40      	cmp	r3, #64	; 0x40
 8006df2:	d86f      	bhi.n	8006ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8006df4:	2b30      	cmp	r3, #48	; 0x30
 8006df6:	d064      	beq.n	8006ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8006df8:	2b30      	cmp	r3, #48	; 0x30
 8006dfa:	d86b      	bhi.n	8006ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	d060      	beq.n	8006ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	d867      	bhi.n	8006ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d05c      	beq.n	8006ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8006e08:	2b10      	cmp	r3, #16
 8006e0a:	d05a      	beq.n	8006ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8006e0c:	e062      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6899      	ldr	r1, [r3, #8]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f000 f965 	bl	80070ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	609a      	str	r2, [r3, #8]
      break;
 8006e3a:	e04f      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6818      	ldr	r0, [r3, #0]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	6899      	ldr	r1, [r3, #8]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f000 f94e 	bl	80070ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e5e:	609a      	str	r2, [r3, #8]
      break;
 8006e60:	e03c      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	6859      	ldr	r1, [r3, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f000 f8c2 	bl	8006ff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2150      	movs	r1, #80	; 0x50
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f91b 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006e80:	e02c      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6818      	ldr	r0, [r3, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6859      	ldr	r1, [r3, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f000 f8e1 	bl	8007056 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2160      	movs	r1, #96	; 0x60
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 f90b 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006ea0:	e01c      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6859      	ldr	r1, [r3, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f000 f8a2 	bl	8006ff8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2140      	movs	r1, #64	; 0x40
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 f8fb 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006ec0:	e00c      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	4610      	mov	r0, r2
 8006ece:	f000 f8f2 	bl	80070b6 <TIM_ITRx_SetConfig>
      break;
 8006ed2:	e003      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed8:	e000      	b.n	8006edc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a34      	ldr	r2, [pc, #208]	; (8006fdc <TIM_Base_SetConfig+0xe4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00f      	beq.n	8006f30 <TIM_Base_SetConfig+0x38>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f16:	d00b      	beq.n	8006f30 <TIM_Base_SetConfig+0x38>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a31      	ldr	r2, [pc, #196]	; (8006fe0 <TIM_Base_SetConfig+0xe8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d007      	beq.n	8006f30 <TIM_Base_SetConfig+0x38>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a30      	ldr	r2, [pc, #192]	; (8006fe4 <TIM_Base_SetConfig+0xec>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d003      	beq.n	8006f30 <TIM_Base_SetConfig+0x38>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a2f      	ldr	r2, [pc, #188]	; (8006fe8 <TIM_Base_SetConfig+0xf0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d108      	bne.n	8006f42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a25      	ldr	r2, [pc, #148]	; (8006fdc <TIM_Base_SetConfig+0xe4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d01b      	beq.n	8006f82 <TIM_Base_SetConfig+0x8a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f50:	d017      	beq.n	8006f82 <TIM_Base_SetConfig+0x8a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a22      	ldr	r2, [pc, #136]	; (8006fe0 <TIM_Base_SetConfig+0xe8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d013      	beq.n	8006f82 <TIM_Base_SetConfig+0x8a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a21      	ldr	r2, [pc, #132]	; (8006fe4 <TIM_Base_SetConfig+0xec>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00f      	beq.n	8006f82 <TIM_Base_SetConfig+0x8a>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a20      	ldr	r2, [pc, #128]	; (8006fe8 <TIM_Base_SetConfig+0xf0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00b      	beq.n	8006f82 <TIM_Base_SetConfig+0x8a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a1f      	ldr	r2, [pc, #124]	; (8006fec <TIM_Base_SetConfig+0xf4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d007      	beq.n	8006f82 <TIM_Base_SetConfig+0x8a>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a1e      	ldr	r2, [pc, #120]	; (8006ff0 <TIM_Base_SetConfig+0xf8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d003      	beq.n	8006f82 <TIM_Base_SetConfig+0x8a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a1d      	ldr	r2, [pc, #116]	; (8006ff4 <TIM_Base_SetConfig+0xfc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d108      	bne.n	8006f94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a08      	ldr	r2, [pc, #32]	; (8006fdc <TIM_Base_SetConfig+0xe4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d103      	bne.n	8006fc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	615a      	str	r2, [r3, #20]
}
 8006fce:	bf00      	nop
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	40010000 	.word	0x40010000
 8006fe0:	40000400 	.word	0x40000400
 8006fe4:	40000800 	.word	0x40000800
 8006fe8:	40000c00 	.word	0x40000c00
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800

08006ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f023 0201 	bic.w	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f023 030a 	bic.w	r3, r3, #10
 8007034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007056:	b480      	push	{r7}
 8007058:	b087      	sub	sp, #28
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f023 0210 	bic.w	r2, r3, #16
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007080:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	031b      	lsls	r3, r3, #12
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	4313      	orrs	r3, r2
 800708a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007092:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b085      	sub	sp, #20
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
 80070be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f043 0307 	orr.w	r3, r3, #7
 80070d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	609a      	str	r2, [r3, #8]
}
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	021a      	lsls	r2, r3, #8
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	431a      	orrs	r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4313      	orrs	r3, r2
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	609a      	str	r2, [r3, #8]
}
 8007120:	bf00      	nop
 8007122:	371c      	adds	r7, #28
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007140:	2302      	movs	r3, #2
 8007142:	e050      	b.n	80071e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a1c      	ldr	r2, [pc, #112]	; (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d018      	beq.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007190:	d013      	beq.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a18      	ldr	r2, [pc, #96]	; (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00e      	beq.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a16      	ldr	r2, [pc, #88]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d009      	beq.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a15      	ldr	r2, [pc, #84]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d004      	beq.n	80071ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a13      	ldr	r2, [pc, #76]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d10c      	bne.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	40010000 	.word	0x40010000
 80071f8:	40000400 	.word	0x40000400
 80071fc:	40000800 	.word	0x40000800
 8007200:	40000c00 	.word	0x40000c00
 8007204:	40014000 	.word	0x40014000

08007208 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007208:	b084      	sub	sp, #16
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	f107 001c 	add.w	r0, r7, #28
 8007216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	2b01      	cmp	r3, #1
 800721e:	d122      	bne.n	8007266 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724a:	2b01      	cmp	r3, #1
 800724c:	d105      	bne.n	800725a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 fbee 	bl	8008a3c <USB_CoreReset>
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]
 8007264:	e01a      	b.n	800729c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 fbe2 	bl	8008a3c <USB_CoreReset>
 8007278:	4603      	mov	r3, r0
 800727a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800727c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	639a      	str	r2, [r3, #56]	; 0x38
 800728e:	e005      	b.n	800729c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d10b      	bne.n	80072ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f043 0206 	orr.w	r2, r3, #6
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f043 0220 	orr.w	r2, r3, #32
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072c6:	b004      	add	sp, #16
 80072c8:	4770      	bx	lr
	...

080072cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	4613      	mov	r3, r2
 80072d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d165      	bne.n	80073ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4a41      	ldr	r2, [pc, #260]	; (80073e8 <USB_SetTurnaroundTime+0x11c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d906      	bls.n	80072f6 <USB_SetTurnaroundTime+0x2a>
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4a40      	ldr	r2, [pc, #256]	; (80073ec <USB_SetTurnaroundTime+0x120>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d202      	bcs.n	80072f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80072f0:	230f      	movs	r3, #15
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	e062      	b.n	80073bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	4a3c      	ldr	r2, [pc, #240]	; (80073ec <USB_SetTurnaroundTime+0x120>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d306      	bcc.n	800730c <USB_SetTurnaroundTime+0x40>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	4a3b      	ldr	r2, [pc, #236]	; (80073f0 <USB_SetTurnaroundTime+0x124>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d202      	bcs.n	800730c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007306:	230e      	movs	r3, #14
 8007308:	617b      	str	r3, [r7, #20]
 800730a:	e057      	b.n	80073bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4a38      	ldr	r2, [pc, #224]	; (80073f0 <USB_SetTurnaroundTime+0x124>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d306      	bcc.n	8007322 <USB_SetTurnaroundTime+0x56>
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4a37      	ldr	r2, [pc, #220]	; (80073f4 <USB_SetTurnaroundTime+0x128>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d202      	bcs.n	8007322 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800731c:	230d      	movs	r3, #13
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	e04c      	b.n	80073bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4a33      	ldr	r2, [pc, #204]	; (80073f4 <USB_SetTurnaroundTime+0x128>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d306      	bcc.n	8007338 <USB_SetTurnaroundTime+0x6c>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	4a32      	ldr	r2, [pc, #200]	; (80073f8 <USB_SetTurnaroundTime+0x12c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d802      	bhi.n	8007338 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007332:	230c      	movs	r3, #12
 8007334:	617b      	str	r3, [r7, #20]
 8007336:	e041      	b.n	80073bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4a2f      	ldr	r2, [pc, #188]	; (80073f8 <USB_SetTurnaroundTime+0x12c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d906      	bls.n	800734e <USB_SetTurnaroundTime+0x82>
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	4a2e      	ldr	r2, [pc, #184]	; (80073fc <USB_SetTurnaroundTime+0x130>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d802      	bhi.n	800734e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007348:	230b      	movs	r3, #11
 800734a:	617b      	str	r3, [r7, #20]
 800734c:	e036      	b.n	80073bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	4a2a      	ldr	r2, [pc, #168]	; (80073fc <USB_SetTurnaroundTime+0x130>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d906      	bls.n	8007364 <USB_SetTurnaroundTime+0x98>
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	4a29      	ldr	r2, [pc, #164]	; (8007400 <USB_SetTurnaroundTime+0x134>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d802      	bhi.n	8007364 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800735e:	230a      	movs	r3, #10
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	e02b      	b.n	80073bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4a26      	ldr	r2, [pc, #152]	; (8007400 <USB_SetTurnaroundTime+0x134>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d906      	bls.n	800737a <USB_SetTurnaroundTime+0xae>
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4a25      	ldr	r2, [pc, #148]	; (8007404 <USB_SetTurnaroundTime+0x138>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d202      	bcs.n	800737a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007374:	2309      	movs	r3, #9
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	e020      	b.n	80073bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	4a21      	ldr	r2, [pc, #132]	; (8007404 <USB_SetTurnaroundTime+0x138>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d306      	bcc.n	8007390 <USB_SetTurnaroundTime+0xc4>
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4a20      	ldr	r2, [pc, #128]	; (8007408 <USB_SetTurnaroundTime+0x13c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d802      	bhi.n	8007390 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800738a:	2308      	movs	r3, #8
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	e015      	b.n	80073bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4a1d      	ldr	r2, [pc, #116]	; (8007408 <USB_SetTurnaroundTime+0x13c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d906      	bls.n	80073a6 <USB_SetTurnaroundTime+0xda>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	4a1c      	ldr	r2, [pc, #112]	; (800740c <USB_SetTurnaroundTime+0x140>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d202      	bcs.n	80073a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80073a0:	2307      	movs	r3, #7
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	e00a      	b.n	80073bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80073a6:	2306      	movs	r3, #6
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	e007      	b.n	80073bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80073b2:	2309      	movs	r3, #9
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	e001      	b.n	80073bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80073b8:	2309      	movs	r3, #9
 80073ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	68da      	ldr	r2, [r3, #12]
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	029b      	lsls	r3, r3, #10
 80073d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80073d4:	431a      	orrs	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	00d8acbf 	.word	0x00d8acbf
 80073ec:	00e4e1c0 	.word	0x00e4e1c0
 80073f0:	00f42400 	.word	0x00f42400
 80073f4:	01067380 	.word	0x01067380
 80073f8:	011a499f 	.word	0x011a499f
 80073fc:	01312cff 	.word	0x01312cff
 8007400:	014ca43f 	.word	0x014ca43f
 8007404:	016e3600 	.word	0x016e3600
 8007408:	01a6ab1f 	.word	0x01a6ab1f
 800740c:	01e84800 	.word	0x01e84800

08007410 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f043 0201 	orr.w	r2, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f023 0201 	bic.w	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d115      	bne.n	80074a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007482:	2001      	movs	r0, #1
 8007484:	f7fb fdae 	bl	8002fe4 <HAL_Delay>
      ms++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 fa45 	bl	800891e <USB_GetMode>
 8007494:	4603      	mov	r3, r0
 8007496:	2b01      	cmp	r3, #1
 8007498:	d01e      	beq.n	80074d8 <USB_SetCurrentMode+0x84>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b31      	cmp	r3, #49	; 0x31
 800749e:	d9f0      	bls.n	8007482 <USB_SetCurrentMode+0x2e>
 80074a0:	e01a      	b.n	80074d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d115      	bne.n	80074d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074b4:	2001      	movs	r0, #1
 80074b6:	f7fb fd95 	bl	8002fe4 <HAL_Delay>
      ms++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3301      	adds	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 fa2c 	bl	800891e <USB_GetMode>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <USB_SetCurrentMode+0x84>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b31      	cmp	r3, #49	; 0x31
 80074d0:	d9f0      	bls.n	80074b4 <USB_SetCurrentMode+0x60>
 80074d2:	e001      	b.n	80074d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e005      	b.n	80074e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b32      	cmp	r3, #50	; 0x32
 80074dc:	d101      	bne.n	80074e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074ec:	b084      	sub	sp, #16
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b086      	sub	sp, #24
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80074fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007506:	2300      	movs	r3, #0
 8007508:	613b      	str	r3, [r7, #16]
 800750a:	e009      	b.n	8007520 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	3340      	adds	r3, #64	; 0x40
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	2200      	movs	r2, #0
 8007518:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	3301      	adds	r3, #1
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	2b0e      	cmp	r3, #14
 8007524:	d9f2      	bls.n	800750c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d11c      	bne.n	8007566 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800753a:	f043 0302 	orr.w	r3, r3, #2
 800753e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	639a      	str	r2, [r3, #56]	; 0x38
 8007564:	e00b      	b.n	800757e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007576:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007584:	461a      	mov	r2, r3
 8007586:	2300      	movs	r3, #0
 8007588:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007590:	4619      	mov	r1, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007598:	461a      	mov	r2, r3
 800759a:	680b      	ldr	r3, [r1, #0]
 800759c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d10c      	bne.n	80075be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d104      	bne.n	80075b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075aa:	2100      	movs	r1, #0
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f965 	bl	800787c <USB_SetDevSpeed>
 80075b2:	e008      	b.n	80075c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075b4:	2101      	movs	r1, #1
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f960 	bl	800787c <USB_SetDevSpeed>
 80075bc:	e003      	b.n	80075c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075be:	2103      	movs	r1, #3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f95b 	bl	800787c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075c6:	2110      	movs	r1, #16
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f8f3 	bl	80077b4 <USB_FlushTxFifo>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f91f 	bl	800781c <USB_FlushRxFifo>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	461a      	mov	r2, r3
 80075f0:	2300      	movs	r3, #0
 80075f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fa:	461a      	mov	r2, r3
 80075fc:	2300      	movs	r3, #0
 80075fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007606:	461a      	mov	r2, r3
 8007608:	2300      	movs	r3, #0
 800760a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800760c:	2300      	movs	r3, #0
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	e043      	b.n	800769a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007628:	d118      	bne.n	800765c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763c:	461a      	mov	r2, r3
 800763e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	e013      	b.n	800766e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007652:	461a      	mov	r2, r3
 8007654:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	e008      	b.n	800766e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007668:	461a      	mov	r2, r3
 800766a:	2300      	movs	r3, #0
 800766c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767a:	461a      	mov	r2, r3
 800767c:	2300      	movs	r3, #0
 800767e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768c:	461a      	mov	r2, r3
 800768e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007692:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3301      	adds	r3, #1
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d3b7      	bcc.n	8007612 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a2:	2300      	movs	r3, #0
 80076a4:	613b      	str	r3, [r7, #16]
 80076a6:	e043      	b.n	8007730 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076be:	d118      	bne.n	80076f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10a      	bne.n	80076dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d2:	461a      	mov	r2, r3
 80076d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	e013      	b.n	8007704 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	461a      	mov	r2, r3
 80076ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	e008      	b.n	8007704 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fe:	461a      	mov	r2, r3
 8007700:	2300      	movs	r3, #0
 8007702:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007710:	461a      	mov	r2, r3
 8007712:	2300      	movs	r3, #0
 8007714:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007722:	461a      	mov	r2, r3
 8007724:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007728:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	3301      	adds	r3, #1
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	429a      	cmp	r2, r3
 8007736:	d3b7      	bcc.n	80076a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007746:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800774a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007758:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	2b00      	cmp	r3, #0
 800775e:	d105      	bne.n	800776c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	f043 0210 	orr.w	r2, r3, #16
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699a      	ldr	r2, [r3, #24]
 8007770:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <USB_DevInit+0x2c4>)
 8007772:	4313      	orrs	r3, r2
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800777a:	2b00      	cmp	r3, #0
 800777c:	d005      	beq.n	800778a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f043 0208 	orr.w	r2, r3, #8
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800778a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778c:	2b01      	cmp	r3, #1
 800778e:	d107      	bne.n	80077a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007798:	f043 0304 	orr.w	r3, r3, #4
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077ac:	b004      	add	sp, #16
 80077ae:	4770      	bx	lr
 80077b0:	803c3800 	.word	0x803c3800

080077b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3301      	adds	r3, #1
 80077c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4a13      	ldr	r2, [pc, #76]	; (8007818 <USB_FlushTxFifo+0x64>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d901      	bls.n	80077d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e01b      	b.n	800780c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	daf2      	bge.n	80077c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	019b      	lsls	r3, r3, #6
 80077e4:	f043 0220 	orr.w	r2, r3, #32
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3301      	adds	r3, #1
 80077f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4a08      	ldr	r2, [pc, #32]	; (8007818 <USB_FlushTxFifo+0x64>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d901      	bls.n	80077fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e006      	b.n	800780c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b20      	cmp	r3, #32
 8007808:	d0f0      	beq.n	80077ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	00030d40 	.word	0x00030d40

0800781c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3301      	adds	r3, #1
 800782c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4a11      	ldr	r2, [pc, #68]	; (8007878 <USB_FlushRxFifo+0x5c>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d901      	bls.n	800783a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e018      	b.n	800786c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	daf2      	bge.n	8007828 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2210      	movs	r2, #16
 800784a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3301      	adds	r3, #1
 8007850:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	4a08      	ldr	r2, [pc, #32]	; (8007878 <USB_FlushRxFifo+0x5c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d901      	bls.n	800785e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e006      	b.n	800786c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0310 	and.w	r3, r3, #16
 8007866:	2b10      	cmp	r3, #16
 8007868:	d0f0      	beq.n	800784c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	00030d40 	.word	0x00030d40

0800787c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	68f9      	ldr	r1, [r7, #12]
 8007898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800789c:	4313      	orrs	r3, r2
 800789e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b087      	sub	sp, #28
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 0306 	and.w	r3, r3, #6
 80078c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80078ce:	2300      	movs	r3, #0
 80078d0:	75fb      	strb	r3, [r7, #23]
 80078d2:	e00a      	b.n	80078ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d002      	beq.n	80078e0 <USB_GetDevSpeed+0x32>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b06      	cmp	r3, #6
 80078de:	d102      	bne.n	80078e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80078e0:	2302      	movs	r3, #2
 80078e2:	75fb      	strb	r3, [r7, #23]
 80078e4:	e001      	b.n	80078ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80078e6:	230f      	movs	r3, #15
 80078e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	371c      	adds	r7, #28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	785b      	ldrb	r3, [r3, #1]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d13a      	bne.n	800798a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	f003 030f 	and.w	r3, r3, #15
 8007924:	2101      	movs	r1, #1
 8007926:	fa01 f303 	lsl.w	r3, r1, r3
 800792a:	b29b      	uxth	r3, r3
 800792c:	68f9      	ldr	r1, [r7, #12]
 800792e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007932:	4313      	orrs	r3, r2
 8007934:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d155      	bne.n	80079f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	791b      	ldrb	r3, [r3, #4]
 8007966:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007968:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	059b      	lsls	r3, r3, #22
 800796e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007970:	4313      	orrs	r3, r2
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	0151      	lsls	r1, r2, #5
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	440a      	add	r2, r1
 800797a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800797e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	e036      	b.n	80079f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007990:	69da      	ldr	r2, [r3, #28]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	2101      	movs	r1, #1
 800799c:	fa01 f303 	lsl.w	r3, r1, r3
 80079a0:	041b      	lsls	r3, r3, #16
 80079a2:	68f9      	ldr	r1, [r7, #12]
 80079a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079a8:	4313      	orrs	r3, r2
 80079aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d11a      	bne.n	80079f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	791b      	ldrb	r3, [r3, #4]
 80079dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079de:	430b      	orrs	r3, r1
 80079e0:	4313      	orrs	r3, r2
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	0151      	lsls	r1, r2, #5
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	440a      	add	r2, r1
 80079ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
	...

08007a08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	785b      	ldrb	r3, [r3, #1]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d161      	bne.n	8007ae8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a3a:	d11f      	bne.n	8007a7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	0151      	lsls	r1, r2, #5
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	440a      	add	r2, r1
 8007a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	0151      	lsls	r1, r2, #5
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	440a      	add	r2, r1
 8007a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	f003 030f 	and.w	r3, r3, #15
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	43db      	mvns	r3, r3
 8007a96:	68f9      	ldr	r1, [r7, #12]
 8007a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa6:	69da      	ldr	r2, [r3, #28]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	f003 030f 	and.w	r3, r3, #15
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	68f9      	ldr	r1, [r7, #12]
 8007abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	0159      	lsls	r1, r3, #5
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	440b      	add	r3, r1
 8007ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4b35      	ldr	r3, [pc, #212]	; (8007bb8 <USB_DeactivateEndpoint+0x1b0>)
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	600b      	str	r3, [r1, #0]
 8007ae6:	e060      	b.n	8007baa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007afe:	d11f      	bne.n	8007b40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	f003 030f 	and.w	r3, r3, #15
 8007b50:	2101      	movs	r1, #1
 8007b52:	fa01 f303 	lsl.w	r3, r1, r3
 8007b56:	041b      	lsls	r3, r3, #16
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b60:	4013      	ands	r3, r2
 8007b62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6a:	69da      	ldr	r2, [r3, #28]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f003 030f 	and.w	r3, r3, #15
 8007b74:	2101      	movs	r1, #1
 8007b76:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7a:	041b      	lsls	r3, r3, #16
 8007b7c:	43db      	mvns	r3, r3
 8007b7e:	68f9      	ldr	r1, [r7, #12]
 8007b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b84:	4013      	ands	r3, r2
 8007b86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	0159      	lsls	r1, r3, #5
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	440b      	add	r3, r1
 8007b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <USB_DeactivateEndpoint+0x1b4>)
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	ec337800 	.word	0xec337800
 8007bbc:	eff37800 	.word	0xeff37800

08007bc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08a      	sub	sp, #40	; 0x28
 8007bc4:	af02      	add	r7, sp, #8
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	f040 815c 	bne.w	8007e9a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d132      	bne.n	8007c50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	0151      	lsls	r1, r2, #5
 8007bfc:	69fa      	ldr	r2, [r7, #28]
 8007bfe:	440a      	add	r2, r1
 8007c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c48:	0cdb      	lsrs	r3, r3, #19
 8007c4a:	04db      	lsls	r3, r3, #19
 8007c4c:	6113      	str	r3, [r2, #16]
 8007c4e:	e074      	b.n	8007d3a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	0151      	lsls	r1, r2, #5
 8007c62:	69fa      	ldr	r2, [r7, #28]
 8007c64:	440a      	add	r2, r1
 8007c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c6a:	0cdb      	lsrs	r3, r3, #19
 8007c6c:	04db      	lsls	r3, r3, #19
 8007c6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	0151      	lsls	r1, r2, #5
 8007c82:	69fa      	ldr	r2, [r7, #28]
 8007c84:	440a      	add	r2, r1
 8007c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6999      	ldr	r1, [r3, #24]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	440b      	add	r3, r1
 8007cac:	1e59      	subs	r1, r3, #1
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cb6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007cb8:	4b9d      	ldr	r3, [pc, #628]	; (8007f30 <USB_EPStartXfer+0x370>)
 8007cba:	400b      	ands	r3, r1
 8007cbc:	69b9      	ldr	r1, [r7, #24]
 8007cbe:	0148      	lsls	r0, r1, #5
 8007cc0:	69f9      	ldr	r1, [r7, #28]
 8007cc2:	4401      	add	r1, r0
 8007cc4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd8:	691a      	ldr	r2, [r3, #16]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ce2:	69b9      	ldr	r1, [r7, #24]
 8007ce4:	0148      	lsls	r0, r1, #5
 8007ce6:	69f9      	ldr	r1, [r7, #28]
 8007ce8:	4401      	add	r1, r0
 8007cea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	791b      	ldrb	r3, [r3, #4]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d11f      	bne.n	8007d3a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	0151      	lsls	r1, r2, #5
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	440a      	add	r2, r1
 8007d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007d18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	0151      	lsls	r1, r2, #5
 8007d2c:	69fa      	ldr	r2, [r7, #28]
 8007d2e:	440a      	add	r2, r1
 8007d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d14b      	bne.n	8007dd8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d009      	beq.n	8007d5c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d54:	461a      	mov	r2, r3
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	791b      	ldrb	r3, [r3, #4]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d128      	bne.n	8007db6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d110      	bne.n	8007d96 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	0151      	lsls	r1, r2, #5
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	440a      	add	r2, r1
 8007d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	e00f      	b.n	8007db6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	0151      	lsls	r1, r2, #5
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	440a      	add	r2, r1
 8007dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007db4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	e133      	b.n	8008040 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	0151      	lsls	r1, r2, #5
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	440a      	add	r2, r1
 8007dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007df6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	791b      	ldrb	r3, [r3, #4]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d015      	beq.n	8007e2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 811b 	beq.w	8008040 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e20:	69f9      	ldr	r1, [r7, #28]
 8007e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e26:	4313      	orrs	r3, r2
 8007e28:	634b      	str	r3, [r1, #52]	; 0x34
 8007e2a:	e109      	b.n	8008040 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d110      	bne.n	8007e5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	e00f      	b.n	8007e7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	0151      	lsls	r1, r2, #5
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	440a      	add	r2, r1
 8007e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	6919      	ldr	r1, [r3, #16]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	781a      	ldrb	r2, [r3, #0]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	b298      	uxth	r0, r3
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	4603      	mov	r3, r0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 fade 	bl	8008454 <USB_WritePacket>
 8007e98:	e0d2      	b.n	8008040 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	0151      	lsls	r1, r2, #5
 8007eac:	69fa      	ldr	r2, [r7, #28]
 8007eae:	440a      	add	r2, r1
 8007eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb4:	0cdb      	lsrs	r3, r3, #19
 8007eb6:	04db      	lsls	r3, r3, #19
 8007eb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	0151      	lsls	r1, r2, #5
 8007ecc:	69fa      	ldr	r2, [r7, #28]
 8007ece:	440a      	add	r2, r1
 8007ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ed4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ed8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007edc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d126      	bne.n	8007f34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007efc:	69b9      	ldr	r1, [r7, #24]
 8007efe:	0148      	lsls	r0, r1, #5
 8007f00:	69f9      	ldr	r1, [r7, #28]
 8007f02:	4401      	add	r1, r0
 8007f04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	0151      	lsls	r1, r2, #5
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	440a      	add	r2, r1
 8007f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f2a:	6113      	str	r3, [r2, #16]
 8007f2c:	e03a      	b.n	8007fa4 <USB_EPStartXfer+0x3e4>
 8007f2e:	bf00      	nop
 8007f30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	699a      	ldr	r2, [r3, #24]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	1e5a      	subs	r2, r3, #1
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f48:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	8afa      	ldrh	r2, [r7, #22]
 8007f50:	fb03 f202 	mul.w	r2, r3, r2
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f64:	691a      	ldr	r2, [r3, #16]
 8007f66:	8afb      	ldrh	r3, [r7, #22]
 8007f68:	04d9      	lsls	r1, r3, #19
 8007f6a:	4b38      	ldr	r3, [pc, #224]	; (800804c <USB_EPStartXfer+0x48c>)
 8007f6c:	400b      	ands	r3, r1
 8007f6e:	69b9      	ldr	r1, [r7, #24]
 8007f70:	0148      	lsls	r0, r1, #5
 8007f72:	69f9      	ldr	r1, [r7, #28]
 8007f74:	4401      	add	r1, r0
 8007f76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8a:	691a      	ldr	r2, [r3, #16]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f94:	69b9      	ldr	r1, [r7, #24]
 8007f96:	0148      	lsls	r0, r1, #5
 8007f98:	69f9      	ldr	r1, [r7, #28]
 8007f9a:	4401      	add	r1, r0
 8007f9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d10d      	bne.n	8007fc6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	6919      	ldr	r1, [r3, #16]
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc2:	460a      	mov	r2, r1
 8007fc4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	791b      	ldrb	r3, [r3, #4]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d128      	bne.n	8008020 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d110      	bne.n	8008000 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	0151      	lsls	r1, r2, #5
 8007ff0:	69fa      	ldr	r2, [r7, #28]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	e00f      	b.n	8008020 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	4413      	add	r3, r2
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	0151      	lsls	r1, r2, #5
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	440a      	add	r2, r1
 8008016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800801a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800801e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	0151      	lsls	r1, r2, #5
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	440a      	add	r2, r1
 8008036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800803a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800803e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	1ff80000 	.word	0x1ff80000

08008050 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	4613      	mov	r3, r2
 800805c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	2b01      	cmp	r3, #1
 800806e:	f040 80ce 	bne.w	800820e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d132      	bne.n	80080e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	0151      	lsls	r1, r2, #5
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	440a      	add	r2, r1
 8008090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008094:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008098:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800809c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	0151      	lsls	r1, r2, #5
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	440a      	add	r2, r1
 80080b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	0151      	lsls	r1, r2, #5
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	440a      	add	r2, r1
 80080d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080d8:	0cdb      	lsrs	r3, r3, #19
 80080da:	04db      	lsls	r3, r3, #19
 80080dc:	6113      	str	r3, [r2, #16]
 80080de:	e04e      	b.n	800817e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fa:	0cdb      	lsrs	r3, r3, #19
 80080fc:	04db      	lsls	r3, r3, #19
 80080fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	0151      	lsls	r1, r2, #5
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	440a      	add	r2, r1
 8008116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800811a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800811e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008122:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	699a      	ldr	r2, [r3, #24]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	429a      	cmp	r2, r3
 800812e:	d903      	bls.n	8008138 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	68da      	ldr	r2, [r3, #12]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	0151      	lsls	r1, r2, #5
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	440a      	add	r2, r1
 800814e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008152:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008164:	691a      	ldr	r2, [r3, #16]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800816e:	6939      	ldr	r1, [r7, #16]
 8008170:	0148      	lsls	r0, r1, #5
 8008172:	6979      	ldr	r1, [r7, #20]
 8008174:	4401      	add	r1, r0
 8008176:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800817a:	4313      	orrs	r3, r2
 800817c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d11e      	bne.n	80081c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d009      	beq.n	80081a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008198:	461a      	mov	r2, r3
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	0151      	lsls	r1, r2, #5
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	440a      	add	r2, r1
 80081b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081be:	6013      	str	r3, [r2, #0]
 80081c0:	e097      	b.n	80082f2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	0151      	lsls	r1, r2, #5
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	440a      	add	r2, r1
 80081d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 8083 	beq.w	80082f2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	f003 030f 	and.w	r3, r3, #15
 80081fc:	2101      	movs	r1, #1
 80081fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008202:	6979      	ldr	r1, [r7, #20]
 8008204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008208:	4313      	orrs	r3, r2
 800820a:	634b      	str	r3, [r1, #52]	; 0x34
 800820c:	e071      	b.n	80082f2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	440a      	add	r2, r1
 8008224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008228:	0cdb      	lsrs	r3, r3, #19
 800822a:	04db      	lsls	r3, r3, #19
 800822c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	0151      	lsls	r1, r2, #5
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	440a      	add	r2, r1
 8008244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008248:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800824c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008250:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	4413      	add	r3, r2
 8008272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	0151      	lsls	r1, r2, #5
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	440a      	add	r2, r1
 8008280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008288:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008296:	691a      	ldr	r2, [r3, #16]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082a0:	6939      	ldr	r1, [r7, #16]
 80082a2:	0148      	lsls	r0, r1, #5
 80082a4:	6979      	ldr	r1, [r7, #20]
 80082a6:	4401      	add	r1, r0
 80082a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082ac:	4313      	orrs	r3, r2
 80082ae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d10d      	bne.n	80082d2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d009      	beq.n	80082d2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	6919      	ldr	r1, [r3, #16]
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ce:	460a      	mov	r2, r1
 80082d0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	0151      	lsls	r1, r2, #5
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	440a      	add	r2, r1
 80082e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	371c      	adds	r7, #28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008300:	b480      	push	{r7}
 8008302:	b087      	sub	sp, #28
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d14a      	bne.n	80083b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008336:	f040 8086 	bne.w	8008446 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	7812      	ldrb	r2, [r2, #0]
 800834e:	0151      	lsls	r1, r2, #5
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	440a      	add	r2, r1
 8008354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008358:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800835c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	7812      	ldrb	r2, [r2, #0]
 8008372:	0151      	lsls	r1, r2, #5
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	440a      	add	r2, r1
 8008378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800837c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008380:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3301      	adds	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f242 7210 	movw	r2, #10000	; 0x2710
 800838e:	4293      	cmp	r3, r2
 8008390:	d902      	bls.n	8008398 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	75fb      	strb	r3, [r7, #23]
          break;
 8008396:	e056      	b.n	8008446 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083b0:	d0e7      	beq.n	8008382 <USB_EPStopXfer+0x82>
 80083b2:	e048      	b.n	8008446 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083cc:	d13b      	bne.n	8008446 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	7812      	ldrb	r2, [r2, #0]
 80083e2:	0151      	lsls	r1, r2, #5
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	440a      	add	r2, r1
 80083e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	7812      	ldrb	r2, [r2, #0]
 8008406:	0151      	lsls	r1, r2, #5
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	440a      	add	r2, r1
 800840c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008414:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3301      	adds	r3, #1
 800841a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008422:	4293      	cmp	r3, r2
 8008424:	d902      	bls.n	800842c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	75fb      	strb	r3, [r7, #23]
          break;
 800842a:	e00c      	b.n	8008446 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008444:	d0e7      	beq.n	8008416 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008446:	7dfb      	ldrb	r3, [r7, #23]
}
 8008448:	4618      	mov	r0, r3
 800844a:	371c      	adds	r7, #28
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008454:	b480      	push	{r7}
 8008456:	b089      	sub	sp, #36	; 0x24
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	4611      	mov	r1, r2
 8008460:	461a      	mov	r2, r3
 8008462:	460b      	mov	r3, r1
 8008464:	71fb      	strb	r3, [r7, #7]
 8008466:	4613      	mov	r3, r2
 8008468:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008472:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008476:	2b00      	cmp	r3, #0
 8008478:	d123      	bne.n	80084c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800847a:	88bb      	ldrh	r3, [r7, #4]
 800847c:	3303      	adds	r3, #3
 800847e:	089b      	lsrs	r3, r3, #2
 8008480:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008482:	2300      	movs	r3, #0
 8008484:	61bb      	str	r3, [r7, #24]
 8008486:	e018      	b.n	80084ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	031a      	lsls	r2, r3, #12
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	4413      	add	r3, r2
 8008490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008494:	461a      	mov	r2, r3
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	3301      	adds	r3, #1
 80084a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	3301      	adds	r3, #1
 80084a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	3301      	adds	r3, #1
 80084ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	3301      	adds	r3, #1
 80084b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	3301      	adds	r3, #1
 80084b8:	61bb      	str	r3, [r7, #24]
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d3e2      	bcc.n	8008488 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3724      	adds	r7, #36	; 0x24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b08b      	sub	sp, #44	; 0x2c
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	4613      	mov	r3, r2
 80084dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80084e6:	88fb      	ldrh	r3, [r7, #6]
 80084e8:	089b      	lsrs	r3, r3, #2
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80084ee:	88fb      	ldrh	r3, [r7, #6]
 80084f0:	f003 0303 	and.w	r3, r3, #3
 80084f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80084f6:	2300      	movs	r3, #0
 80084f8:	623b      	str	r3, [r7, #32]
 80084fa:	e014      	b.n	8008526 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	601a      	str	r2, [r3, #0]
    pDest++;
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	3301      	adds	r3, #1
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	3301      	adds	r3, #1
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	3301      	adds	r3, #1
 8008518:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	3301      	adds	r3, #1
 800851e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	3301      	adds	r3, #1
 8008524:	623b      	str	r3, [r7, #32]
 8008526:	6a3a      	ldr	r2, [r7, #32]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	429a      	cmp	r2, r3
 800852c:	d3e6      	bcc.n	80084fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800852e:	8bfb      	ldrh	r3, [r7, #30]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d01e      	beq.n	8008572 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800853e:	461a      	mov	r2, r3
 8008540:	f107 0310 	add.w	r3, r7, #16
 8008544:	6812      	ldr	r2, [r2, #0]
 8008546:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	b2db      	uxtb	r3, r3
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	fa22 f303 	lsr.w	r3, r2, r3
 8008554:	b2da      	uxtb	r2, r3
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	701a      	strb	r2, [r3, #0]
      i++;
 800855a:	6a3b      	ldr	r3, [r7, #32]
 800855c:	3301      	adds	r3, #1
 800855e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	3301      	adds	r3, #1
 8008564:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008566:	8bfb      	ldrh	r3, [r7, #30]
 8008568:	3b01      	subs	r3, #1
 800856a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800856c:	8bfb      	ldrh	r3, [r7, #30]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1ea      	bne.n	8008548 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008574:	4618      	mov	r0, r3
 8008576:	372c      	adds	r7, #44	; 0x2c
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d12c      	bne.n	80085f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	db12      	blt.n	80085d4 <USB_EPSetStall+0x54>
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00f      	beq.n	80085d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	0151      	lsls	r1, r2, #5
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	440a      	add	r2, r1
 80085ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	e02b      	b.n	800864e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	db12      	blt.n	800862e <USB_EPSetStall+0xae>
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00f      	beq.n	800862e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	4413      	add	r3, r2
 8008616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	0151      	lsls	r1, r2, #5
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	440a      	add	r2, r1
 8008624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008628:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800862c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	0151      	lsls	r1, r2, #5
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	440a      	add	r2, r1
 8008644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800864c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d128      	bne.n	80086ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	0151      	lsls	r1, r2, #5
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	440a      	add	r2, r1
 800868e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008692:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008696:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	791b      	ldrb	r3, [r3, #4]
 800869c:	2b03      	cmp	r3, #3
 800869e:	d003      	beq.n	80086a8 <USB_EPClearStall+0x4c>
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	791b      	ldrb	r3, [r3, #4]
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d138      	bne.n	800871a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	0151      	lsls	r1, r2, #5
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	440a      	add	r2, r1
 80086be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	e027      	b.n	800871a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	0151      	lsls	r1, r2, #5
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	440a      	add	r2, r1
 80086e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	791b      	ldrb	r3, [r3, #4]
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d003      	beq.n	80086fa <USB_EPClearStall+0x9e>
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	791b      	ldrb	r3, [r3, #4]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d10f      	bne.n	800871a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	0151      	lsls	r1, r2, #5
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	440a      	add	r2, r1
 8008710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008718:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008746:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800874a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	78fb      	ldrb	r3, [r7, #3]
 8008756:	011b      	lsls	r3, r3, #4
 8008758:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800875c:	68f9      	ldr	r1, [r7, #12]
 800875e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008762:	4313      	orrs	r3, r2
 8008764:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800878e:	f023 0303 	bic.w	r3, r3, #3
 8008792:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087a2:	f023 0302 	bic.w	r3, r3, #2
 80087a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b085      	sub	sp, #20
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087d0:	f023 0303 	bic.w	r3, r3, #3
 80087d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e4:	f043 0302 	orr.w	r3, r3, #2
 80087e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	4013      	ands	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008810:	68fb      	ldr	r3, [r7, #12]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800881e:	b480      	push	{r7}
 8008820:	b085      	sub	sp, #20
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	4013      	ands	r3, r2
 8008840:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	0c1b      	lsrs	r3, r3, #16
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008852:	b480      	push	{r7}
 8008854:	b085      	sub	sp, #20
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	4013      	ands	r3, r2
 8008874:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	b29b      	uxth	r3, r3
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008886:	b480      	push	{r7}
 8008888:	b085      	sub	sp, #20
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	460b      	mov	r3, r1
 8008890:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008896:	78fb      	ldrb	r3, [r7, #3]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	4013      	ands	r3, r2
 80088b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088b4:	68bb      	ldr	r3, [r7, #8]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b087      	sub	sp, #28
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	f003 030f 	and.w	r3, r3, #15
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	fa22 f303 	lsr.w	r3, r2, r3
 80088f2:	01db      	lsls	r3, r3, #7
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	4013      	ands	r3, r2
 800890e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008910:	68bb      	ldr	r3, [r7, #8]
}
 8008912:	4618      	mov	r0, r3
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800891e:	b480      	push	{r7}
 8008920:	b083      	sub	sp, #12
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	f003 0301 	and.w	r3, r3, #1
}
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800893a:	b480      	push	{r7}
 800893c:	b085      	sub	sp, #20
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008954:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008958:	f023 0307 	bic.w	r3, r3, #7
 800895c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800896c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008970:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	460b      	mov	r3, r1
 800898a:	607a      	str	r2, [r7, #4]
 800898c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	333c      	adds	r3, #60	; 0x3c
 8008996:	3304      	adds	r3, #4
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	4a26      	ldr	r2, [pc, #152]	; (8008a38 <USB_EP0_OutStart+0xb8>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d90a      	bls.n	80089ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089b4:	d101      	bne.n	80089ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	e037      	b.n	8008a2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c0:	461a      	mov	r2, r3
 80089c2:	2300      	movs	r3, #0
 80089c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e8:	f043 0318 	orr.w	r3, r3, #24
 80089ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008a00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008a02:	7afb      	ldrb	r3, [r7, #11]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d10f      	bne.n	8008a28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0e:	461a      	mov	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008a26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	371c      	adds	r7, #28
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	4f54300a 	.word	0x4f54300a

08008a3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	4a13      	ldr	r2, [pc, #76]	; (8008aa0 <USB_CoreReset+0x64>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d901      	bls.n	8008a5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e01b      	b.n	8008a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	daf2      	bge.n	8008a48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	f043 0201 	orr.w	r2, r3, #1
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3301      	adds	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4a09      	ldr	r2, [pc, #36]	; (8008aa0 <USB_CoreReset+0x64>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d901      	bls.n	8008a84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e006      	b.n	8008a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d0f0      	beq.n	8008a72 <USB_CoreReset+0x36>

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	00030d40 	.word	0x00030d40

08008aa4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008aa8:	4904      	ldr	r1, [pc, #16]	; (8008abc <MX_FATFS_Init+0x18>)
 8008aaa:	4805      	ldr	r0, [pc, #20]	; (8008ac0 <MX_FATFS_Init+0x1c>)
 8008aac:	f006 fc08 	bl	800f2c0 <FATFS_LinkDriver>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	4b03      	ldr	r3, [pc, #12]	; (8008ac4 <MX_FATFS_Init+0x20>)
 8008ab6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008ab8:	bf00      	nop
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	200024e8 	.word	0x200024e8
 8008ac0:	20000010 	.word	0x20000010
 8008ac4:	200024e4 	.word	0x200024e4

08008ac8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008acc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7f8 fff1 	bl	8001acc <SD_disk_initialize>
 8008aea:	4603      	mov	r3, r0
 8008aec:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	4603      	mov	r3, r0
 8008afe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return(SD_disk_status(pdrv));
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7f9 f8cc 	bl	8001ca0 <SD_disk_status>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	607a      	str	r2, [r7, #4]
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8008b24:	7bf8      	ldrb	r0, [r7, #15]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	68b9      	ldr	r1, [r7, #8]
 8008b2c:	f7f9 f8ce 	bl	8001ccc <SD_disk_read>
 8008b30:	4603      	mov	r3, r0
 8008b32:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60b9      	str	r1, [r7, #8]
 8008b44:	607a      	str	r2, [r7, #4]
 8008b46:	603b      	str	r3, [r7, #0]
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8008b4c:	7bf8      	ldrb	r0, [r7, #15]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	68b9      	ldr	r1, [r7, #8]
 8008b54:	f7f9 f924 	bl	8001da0 <SD_disk_write>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	603a      	str	r2, [r7, #0]
 8008b6e:	71fb      	strb	r3, [r7, #7]
 8008b70:	460b      	mov	r3, r1
 8008b72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	79b9      	ldrb	r1, [r7, #6]
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7f9 f994 	bl	8001ea8 <SD_disk_ioctl>
 8008b80:	4603      	mov	r3, r0
 8008b82:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008b98:	f44f 701d 	mov.w	r0, #628	; 0x274
 8008b9c:	f007 f90e 	bl	800fdbc <USBD_static_malloc>
 8008ba0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d109      	bne.n	8008bbc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	32b0      	adds	r2, #176	; 0xb0
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e06e      	b.n	8008c9a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	32b0      	adds	r2, #176	; 0xb0
 8008bc6:	68f9      	ldr	r1, [r7, #12]
 8008bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	32b0      	adds	r2, #176	; 0xb0
 8008bd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	7c1b      	ldrb	r3, [r3, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d12b      	bne.n	8008c40 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008be8:	4b2e      	ldr	r3, [pc, #184]	; (8008ca4 <USBD_MSC_Init+0x118>)
 8008bea:	7819      	ldrb	r1, [r3, #0]
 8008bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f006 ff9f 	bl	800fb36 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008bf8:	4b2a      	ldr	r3, [pc, #168]	; (8008ca4 <USBD_MSC_Init+0x118>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	f003 020f 	and.w	r2, r3, #15
 8008c00:	6879      	ldr	r1, [r7, #4]
 8008c02:	4613      	mov	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	440b      	add	r3, r1
 8008c0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c10:	2201      	movs	r2, #1
 8008c12:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008c14:	4b24      	ldr	r3, [pc, #144]	; (8008ca8 <USBD_MSC_Init+0x11c>)
 8008c16:	7819      	ldrb	r1, [r3, #0]
 8008c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f006 ff89 	bl	800fb36 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008c24:	4b20      	ldr	r3, [pc, #128]	; (8008ca8 <USBD_MSC_Init+0x11c>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	f003 020f 	and.w	r2, r3, #15
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	440b      	add	r3, r1
 8008c38:	3324      	adds	r3, #36	; 0x24
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	801a      	strh	r2, [r3, #0]
 8008c3e:	e028      	b.n	8008c92 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008c40:	4b18      	ldr	r3, [pc, #96]	; (8008ca4 <USBD_MSC_Init+0x118>)
 8008c42:	7819      	ldrb	r1, [r3, #0]
 8008c44:	2340      	movs	r3, #64	; 0x40
 8008c46:	2202      	movs	r2, #2
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f006 ff74 	bl	800fb36 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8008c4e:	4b15      	ldr	r3, [pc, #84]	; (8008ca4 <USBD_MSC_Init+0x118>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	f003 020f 	and.w	r2, r3, #15
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	440b      	add	r3, r1
 8008c62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c66:	2201      	movs	r2, #1
 8008c68:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008c6a:	4b0f      	ldr	r3, [pc, #60]	; (8008ca8 <USBD_MSC_Init+0x11c>)
 8008c6c:	7819      	ldrb	r1, [r3, #0]
 8008c6e:	2340      	movs	r3, #64	; 0x40
 8008c70:	2202      	movs	r2, #2
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f006 ff5f 	bl	800fb36 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8008c78:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <USBD_MSC_Init+0x11c>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	f003 020f 	and.w	r2, r3, #15
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	3324      	adds	r3, #36	; 0x24
 8008c8e:	2201      	movs	r2, #1
 8008c90:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa2c 	bl	80090f0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20000087 	.word	0x20000087
 8008ca8:	20000086 	.word	0x20000086

08008cac <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8008cb8:	4b26      	ldr	r3, [pc, #152]	; (8008d54 <USBD_MSC_DeInit+0xa8>)
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f006 ff5f 	bl	800fb82 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8008cc4:	4b23      	ldr	r3, [pc, #140]	; (8008d54 <USBD_MSC_DeInit+0xa8>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f003 020f 	and.w	r2, r3, #15
 8008ccc:	6879      	ldr	r1, [r7, #4]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	440b      	add	r3, r1
 8008cd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008cdc:	2200      	movs	r2, #0
 8008cde:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8008ce0:	4b1d      	ldr	r3, [pc, #116]	; (8008d58 <USBD_MSC_DeInit+0xac>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f006 ff4b 	bl	800fb82 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8008cec:	4b1a      	ldr	r3, [pc, #104]	; (8008d58 <USBD_MSC_DeInit+0xac>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	f003 020f 	and.w	r2, r3, #15
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	440b      	add	r3, r1
 8008d00:	3324      	adds	r3, #36	; 0x24
 8008d02:	2200      	movs	r2, #0
 8008d04:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	32b0      	adds	r2, #176	; 0xb0
 8008d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d018      	beq.n	8008d4a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fa67 	bl	80091ec <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	32b0      	adds	r2, #176	; 0xb0
 8008d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f007 f853 	bl	800fdd8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	32b0      	adds	r2, #176	; 0xb0
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20000087 	.word	0x20000087
 8008d58:	20000086 	.word	0x20000086

08008d5c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	32b0      	adds	r2, #176	; 0xb0
 8008d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d74:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e0e1      	b.n	8008f4c <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d053      	beq.n	8008e3c <USBD_MSC_Setup+0xe0>
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	f040 80d1 	bne.w	8008f3c <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	2bfe      	cmp	r3, #254	; 0xfe
 8008da0:	d002      	beq.n	8008da8 <USBD_MSC_Setup+0x4c>
 8008da2:	2bff      	cmp	r3, #255	; 0xff
 8008da4:	d02a      	beq.n	8008dfc <USBD_MSC_Setup+0xa0>
 8008da6:	e041      	b.n	8008e2c <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	885b      	ldrh	r3, [r3, #2]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d11e      	bne.n	8008dee <USBD_MSC_Setup+0x92>
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	88db      	ldrh	r3, [r3, #6]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d11a      	bne.n	8008dee <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	da15      	bge.n	8008dee <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	33b0      	adds	r3, #176	; 0xb0
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	4798      	blx	r3
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	461a      	mov	r2, r3
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	2201      	movs	r2, #1
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f003 f8f9 	bl	800bfdc <USBD_CtlSendData>
 8008dea:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dec:	e025      	b.n	8008e3a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f003 f882 	bl	800befa <USBD_CtlError>
            ret = USBD_FAIL;
 8008df6:	2303      	movs	r3, #3
 8008df8:	75fb      	strb	r3, [r7, #23]
          break;
 8008dfa:	e01e      	b.n	8008e3a <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	885b      	ldrh	r3, [r3, #2]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10c      	bne.n	8008e1e <USBD_MSC_Setup+0xc2>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	88db      	ldrh	r3, [r3, #6]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d108      	bne.n	8008e1e <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	db03      	blt.n	8008e1e <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f9b4 	bl	8009184 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e1c:	e00d      	b.n	8008e3a <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f003 f86a 	bl	800befa <USBD_CtlError>
            ret = USBD_FAIL;
 8008e26:	2303      	movs	r3, #3
 8008e28:	75fb      	strb	r3, [r7, #23]
          break;
 8008e2a:	e006      	b.n	8008e3a <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f003 f863 	bl	800befa <USBD_CtlError>
          ret = USBD_FAIL;
 8008e34:	2303      	movs	r3, #3
 8008e36:	75fb      	strb	r3, [r7, #23]
          break;
 8008e38:	bf00      	nop
      }
      break;
 8008e3a:	e086      	b.n	8008f4a <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	785b      	ldrb	r3, [r3, #1]
 8008e40:	2b0b      	cmp	r3, #11
 8008e42:	d872      	bhi.n	8008f2a <USBD_MSC_Setup+0x1ce>
 8008e44:	a201      	add	r2, pc, #4	; (adr r2, 8008e4c <USBD_MSC_Setup+0xf0>)
 8008e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4a:	bf00      	nop
 8008e4c:	08008e7d 	.word	0x08008e7d
 8008e50:	08008ef9 	.word	0x08008ef9
 8008e54:	08008f2b 	.word	0x08008f2b
 8008e58:	08008f2b 	.word	0x08008f2b
 8008e5c:	08008f2b 	.word	0x08008f2b
 8008e60:	08008f2b 	.word	0x08008f2b
 8008e64:	08008f2b 	.word	0x08008f2b
 8008e68:	08008f2b 	.word	0x08008f2b
 8008e6c:	08008f2b 	.word	0x08008f2b
 8008e70:	08008f2b 	.word	0x08008f2b
 8008e74:	08008ea7 	.word	0x08008ea7
 8008e78:	08008ed1 	.word	0x08008ed1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b03      	cmp	r3, #3
 8008e86:	d107      	bne.n	8008e98 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e88:	f107 030e 	add.w	r3, r7, #14
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f003 f8a3 	bl	800bfdc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e96:	e050      	b.n	8008f3a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f003 f82d 	bl	800befa <USBD_CtlError>
            ret = USBD_FAIL;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ea4:	e049      	b.n	8008f3a <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d107      	bne.n	8008ec2 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f003 f88e 	bl	800bfdc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ec0:	e03b      	b.n	8008f3a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008ec2:	6839      	ldr	r1, [r7, #0]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f003 f818 	bl	800befa <USBD_CtlError>
            ret = USBD_FAIL;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	75fb      	strb	r3, [r7, #23]
          break;
 8008ece:	e034      	b.n	8008f3a <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d106      	bne.n	8008eea <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	885b      	ldrh	r3, [r3, #2]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ee8:	e027      	b.n	8008f3a <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f003 f804 	bl	800befa <USBD_CtlError>
            ret = USBD_FAIL;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ef6:	e020      	b.n	8008f3a <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d119      	bne.n	8008f38 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	885b      	ldrh	r3, [r3, #2]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d115      	bne.n	8008f38 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	889b      	ldrh	r3, [r3, #4]
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f006 fe53 	bl	800fbc0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	889b      	ldrh	r3, [r3, #4]
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	4619      	mov	r1, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fb2e 	bl	8009584 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8008f28:	e006      	b.n	8008f38 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f002 ffe4 	bl	800befa <USBD_CtlError>
          ret = USBD_FAIL;
 8008f32:	2303      	movs	r3, #3
 8008f34:	75fb      	strb	r3, [r7, #23]
          break;
 8008f36:	e000      	b.n	8008f3a <USBD_MSC_Setup+0x1de>
          break;
 8008f38:	bf00      	nop
      }
      break;
 8008f3a:	e006      	b.n	8008f4a <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f002 ffdb 	bl	800befa <USBD_CtlError>
      ret = USBD_FAIL;
 8008f44:	2303      	movs	r3, #3
 8008f46:	75fb      	strb	r3, [r7, #23]
      break;
 8008f48:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f959 	bl	800921c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f983 	bl	8009290 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008f9c:	2181      	movs	r1, #129	; 0x81
 8008f9e:	4812      	ldr	r0, [pc, #72]	; (8008fe8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8008fa0:	f002 f972 	bl	800b288 <USBD_GetEpDesc>
 8008fa4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	480f      	ldr	r0, [pc, #60]	; (8008fe8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8008faa:	f002 f96d 	bl	800b288 <USBD_GetEpDesc>
 8008fae:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d006      	beq.n	8008fc4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	711a      	strb	r2, [r3, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f042 0202 	orr.w	r2, r2, #2
 8008fc2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d006      	beq.n	8008fd8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	711a      	strb	r2, [r3, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f042 0202 	orr.w	r2, r2, #2
 8008fd6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008fde:	4b02      	ldr	r3, [pc, #8]	; (8008fe8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	2000005c 	.word	0x2000005c

08008fec <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008ff4:	2181      	movs	r1, #129	; 0x81
 8008ff6:	4812      	ldr	r0, [pc, #72]	; (8009040 <USBD_MSC_GetFSCfgDesc+0x54>)
 8008ff8:	f002 f946 	bl	800b288 <USBD_GetEpDesc>
 8008ffc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008ffe:	2101      	movs	r1, #1
 8009000:	480f      	ldr	r0, [pc, #60]	; (8009040 <USBD_MSC_GetFSCfgDesc+0x54>)
 8009002:	f002 f941 	bl	800b288 <USBD_GetEpDesc>
 8009006:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d006      	beq.n	800901c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009016:	711a      	strb	r2, [r3, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d006      	beq.n	8009030 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2200      	movs	r2, #0
 8009026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800902a:	711a      	strb	r2, [r3, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2220      	movs	r2, #32
 8009034:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009036:	4b02      	ldr	r3, [pc, #8]	; (8009040 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	2000005c 	.word	0x2000005c

08009044 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800904c:	2181      	movs	r1, #129	; 0x81
 800904e:	4812      	ldr	r0, [pc, #72]	; (8009098 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8009050:	f002 f91a 	bl	800b288 <USBD_GetEpDesc>
 8009054:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009056:	2101      	movs	r1, #1
 8009058:	480f      	ldr	r0, [pc, #60]	; (8009098 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800905a:	f002 f915 	bl	800b288 <USBD_GetEpDesc>
 800905e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d006      	beq.n	8009074 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800906e:	711a      	strb	r2, [r3, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d006      	beq.n	8009088 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2200      	movs	r2, #0
 800907e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009082:	711a      	strb	r2, [r3, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2220      	movs	r2, #32
 800908c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800908e:	4b02      	ldr	r3, [pc, #8]	; (8009098 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	2000005c 	.word	0x2000005c

0800909c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	220a      	movs	r2, #10
 80090a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80090aa:	4b03      	ldr	r3, [pc, #12]	; (80090b8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	2000007c 	.word	0x2000007c

080090bc <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e009      	b.n	80090e4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	33b0      	adds	r3, #176	; 0xb0
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	32b0      	adds	r2, #176	; 0xb0
 8009102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009106:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d032      	beq.n	8009174 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2200      	movs	r2, #0
 8009118:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	33b0      	adds	r3, #176	; 0xb0
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2000      	movs	r0, #0
 8009146:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8009148:	4b0c      	ldr	r3, [pc, #48]	; (800917c <MSC_BOT_Init+0x8c>)
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f006 fd36 	bl	800fbc0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8009154:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <MSC_BOT_Init+0x90>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f006 fd30 	bl	800fbc0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8009160:	4b06      	ldr	r3, [pc, #24]	; (800917c <MSC_BOT_Init+0x8c>)
 8009162:	7819      	ldrb	r1, [r3, #0]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800916a:	231f      	movs	r3, #31
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f006 fdf0 	bl	800fd52 <USBD_LL_PrepareReceive>
 8009172:	e000      	b.n	8009176 <MSC_BOT_Init+0x86>
    return;
 8009174:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	20000087 	.word	0x20000087
 8009180:	20000086 	.word	0x20000086

08009184 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	32b0      	adds	r2, #176	; 0xb0
 8009196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d01b      	beq.n	80091da <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80091ae:	4b0d      	ldr	r3, [pc, #52]	; (80091e4 <MSC_BOT_Reset+0x60>)
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f006 fd41 	bl	800fc3c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80091ba:	4b0b      	ldr	r3, [pc, #44]	; (80091e8 <MSC_BOT_Reset+0x64>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f006 fd3b 	bl	800fc3c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80091c6:	4b08      	ldr	r3, [pc, #32]	; (80091e8 <MSC_BOT_Reset+0x64>)
 80091c8:	7819      	ldrb	r1, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80091d0:	231f      	movs	r3, #31
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f006 fdbd 	bl	800fd52 <USBD_LL_PrepareReceive>
 80091d8:	e000      	b.n	80091dc <MSC_BOT_Reset+0x58>
    return;
 80091da:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000086 	.word	0x20000086
 80091e8:	20000087 	.word	0x20000087

080091ec <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	32b0      	adds	r2, #176	; 0xb0
 80091fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009202:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	721a      	strb	r2, [r3, #8]
  }
}
 8009210:	bf00      	nop
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	32b0      	adds	r2, #176	; 0xb0
 8009232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009236:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d020      	beq.n	8009280 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	7a1b      	ldrb	r3, [r3, #8]
 8009242:	2b02      	cmp	r3, #2
 8009244:	d005      	beq.n	8009252 <MSC_BOT_DataIn+0x36>
 8009246:	2b02      	cmp	r3, #2
 8009248:	db1c      	blt.n	8009284 <MSC_BOT_DataIn+0x68>
 800924a:	3b03      	subs	r3, #3
 800924c:	2b01      	cmp	r3, #1
 800924e:	d819      	bhi.n	8009284 <MSC_BOT_DataIn+0x68>
 8009250:	e011      	b.n	8009276 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800925e:	461a      	mov	r2, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f9c9 	bl	80095f8 <SCSI_ProcessCmd>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	da0d      	bge.n	8009288 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800926c:	2101      	movs	r1, #1
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f90c 	bl	800948c <MSC_BOT_SendCSW>
      }
      break;
 8009274:	e008      	b.n	8009288 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009276:	2100      	movs	r1, #0
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f907 	bl	800948c <MSC_BOT_SendCSW>
      break;
 800927e:	e004      	b.n	800928a <MSC_BOT_DataIn+0x6e>
    return;
 8009280:	bf00      	nop
 8009282:	e002      	b.n	800928a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8009284:	bf00      	nop
 8009286:	e000      	b.n	800928a <MSC_BOT_DataIn+0x6e>
      break;
 8009288:	bf00      	nop
  }
}
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	460b      	mov	r3, r1
 800929a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	32b0      	adds	r2, #176	; 0xb0
 80092a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092aa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d01c      	beq.n	80092ec <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	7a1b      	ldrb	r3, [r3, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d002      	beq.n	80092c0 <MSC_BOT_DataOut+0x30>
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d004      	beq.n	80092c8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80092be:	e018      	b.n	80092f2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f819 	bl	80092f8 <MSC_BOT_CBW_Decode>
      break;
 80092c6:	e014      	b.n	80092f2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80092d4:	461a      	mov	r2, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f98e 	bl	80095f8 <SCSI_ProcessCmd>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da06      	bge.n	80092f0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80092e2:	2101      	movs	r1, #1
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f8d1 	bl	800948c <MSC_BOT_SendCSW>
      break;
 80092ea:	e001      	b.n	80092f0 <MSC_BOT_DataOut+0x60>
    return;
 80092ec:	bf00      	nop
 80092ee:	e000      	b.n	80092f2 <MSC_BOT_DataOut+0x62>
      break;
 80092f0:	bf00      	nop
  }
}
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	32b0      	adds	r2, #176	; 0xb0
 800930a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d079      	beq.n	800940a <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800932e:	4b3a      	ldr	r3, [pc, #232]	; (8009418 <MSC_BOT_CBW_Decode+0x120>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f006 fd2d 	bl	800fd94 <USBD_LL_GetRxDataSize>
 800933a:	4603      	mov	r3, r0
 800933c:	2b1f      	cmp	r3, #31
 800933e:	d114      	bne.n	800936a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8009346:	4a35      	ldr	r2, [pc, #212]	; (800941c <MSC_BOT_CBW_Decode+0x124>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d10e      	bne.n	800936a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009352:	2b01      	cmp	r3, #1
 8009354:	d809      	bhi.n	800936a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800935c:	2b00      	cmp	r3, #0
 800935e:	d004      	beq.n	800936a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009366:	2b10      	cmp	r3, #16
 8009368:	d90e      	bls.n	8009388 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009370:	2320      	movs	r3, #32
 8009372:	2205      	movs	r2, #5
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fe28 	bl	8009fca <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2202      	movs	r2, #2
 800937e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f8bd 	bl	8009500 <MSC_BOT_Abort>
 8009386:	e043      	b.n	8009410 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8009394:	461a      	mov	r2, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f92e 	bl	80095f8 <SCSI_ProcessCmd>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	da0c      	bge.n	80093bc <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	7a1b      	ldrb	r3, [r3, #8]
 80093a6:	2b05      	cmp	r3, #5
 80093a8:	d104      	bne.n	80093b4 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80093aa:	2101      	movs	r1, #1
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f86d 	bl	800948c <MSC_BOT_SendCSW>
 80093b2:	e02d      	b.n	8009410 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f8a3 	bl	8009500 <MSC_BOT_Abort>
 80093ba:	e029      	b.n	8009410 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	7a1b      	ldrb	r3, [r3, #8]
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d024      	beq.n	800940e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d020      	beq.n	800940e <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d01c      	beq.n	800940e <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d009      	beq.n	80093f0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f103 0110 	add.w	r1, r3, #16
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	461a      	mov	r2, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f819 	bl	8009420 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80093ee:	e00f      	b.n	8009410 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d104      	bne.n	8009402 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80093f8:	2100      	movs	r1, #0
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f846 	bl	800948c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8009400:	e006      	b.n	8009410 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f87c 	bl	8009500 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8009408:	e002      	b.n	8009410 <MSC_BOT_CBW_Decode+0x118>
    return;
 800940a:	bf00      	nop
 800940c:	e000      	b.n	8009410 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800940e:	bf00      	nop
    }
  }
}
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20000087 	.word	0x20000087
 800941c:	43425355 	.word	0x43425355

08009420 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	32b0      	adds	r2, #176	; 0xb0
 8009436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800943a:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d01e      	beq.n	8009480 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	4293      	cmp	r3, r2
 800944c:	bf28      	it	cs
 800944e:	4613      	movcs	r3, r2
 8009450:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	1ad2      	subs	r2, r2, r3
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2204      	movs	r2, #4
 800946e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8009470:	4b05      	ldr	r3, [pc, #20]	; (8009488 <MSC_BOT_SendData+0x68>)
 8009472:	7819      	ldrb	r1, [r3, #0]
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f006 fc49 	bl	800fd10 <USBD_LL_Transmit>
 800947e:	e000      	b.n	8009482 <MSC_BOT_SendData+0x62>
    return;
 8009480:	bf00      	nop
}
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	20000086 	.word	0x20000086

0800948c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	32b0      	adds	r2, #176	; 0xb0
 80094a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d01d      	beq.n	80094ea <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	4a10      	ldr	r2, [pc, #64]	; (80094f4 <MSC_BOT_SendCSW+0x68>)
 80094b2:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80094c4:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <MSC_BOT_SendCSW+0x6c>)
 80094c6:	7819      	ldrb	r1, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80094ce:	230d      	movs	r3, #13
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f006 fc1d 	bl	800fd10 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80094d6:	4b09      	ldr	r3, [pc, #36]	; (80094fc <MSC_BOT_SendCSW+0x70>)
 80094d8:	7819      	ldrb	r1, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80094e0:	231f      	movs	r3, #31
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f006 fc35 	bl	800fd52 <USBD_LL_PrepareReceive>
 80094e8:	e000      	b.n	80094ec <MSC_BOT_SendCSW+0x60>
    return;
 80094ea:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	53425355 	.word	0x53425355
 80094f8:	20000086 	.word	0x20000086
 80094fc:	20000087 	.word	0x20000087

08009500 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	32b0      	adds	r2, #176	; 0xb0
 8009512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009516:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d02a      	beq.n	8009574 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10e      	bne.n	8009546 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800952e:	2b00      	cmp	r3, #0
 8009530:	d009      	beq.n	8009546 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8009536:	2b00      	cmp	r3, #0
 8009538:	d105      	bne.n	8009546 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800953a:	4b10      	ldr	r3, [pc, #64]	; (800957c <MSC_BOT_Abort+0x7c>)
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f006 fb5c 	bl	800fbfe <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8009546:	4b0e      	ldr	r3, [pc, #56]	; (8009580 <MSC_BOT_Abort+0x80>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f006 fb56 	bl	800fbfe <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	7a5b      	ldrb	r3, [r3, #9]
 8009556:	2b02      	cmp	r3, #2
 8009558:	d10d      	bne.n	8009576 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800955a:	4b09      	ldr	r3, [pc, #36]	; (8009580 <MSC_BOT_Abort+0x80>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f006 fb4c 	bl	800fbfe <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8009566:	4b05      	ldr	r3, [pc, #20]	; (800957c <MSC_BOT_Abort+0x7c>)
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f006 fb46 	bl	800fbfe <USBD_LL_StallEP>
 8009572:	e000      	b.n	8009576 <MSC_BOT_Abort+0x76>
    return;
 8009574:	bf00      	nop
  }
}
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20000087 	.word	0x20000087
 8009580:	20000086 	.word	0x20000086

08009584 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	32b0      	adds	r2, #176	; 0xb0
 800959a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d01d      	beq.n	80095e2 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	7a5b      	ldrb	r3, [r3, #9]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d10c      	bne.n	80095c8 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80095ae:	4b10      	ldr	r3, [pc, #64]	; (80095f0 <MSC_BOT_CplClrFeature+0x6c>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f006 fb22 	bl	800fbfe <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80095ba:	4b0e      	ldr	r3, [pc, #56]	; (80095f4 <MSC_BOT_CplClrFeature+0x70>)
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f006 fb1c 	bl	800fbfe <USBD_LL_StallEP>
 80095c6:	e00f      	b.n	80095e8 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80095c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	da0a      	bge.n	80095e6 <MSC_BOT_CplClrFeature+0x62>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	7a5b      	ldrb	r3, [r3, #9]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d006      	beq.n	80095e6 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80095d8:	2101      	movs	r1, #1
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff ff56 	bl	800948c <MSC_BOT_SendCSW>
 80095e0:	e002      	b.n	80095e8 <MSC_BOT_CplClrFeature+0x64>
    return;
 80095e2:	bf00      	nop
 80095e4:	e000      	b.n	80095e8 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80095e6:	bf00      	nop
  }
}
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20000086 	.word	0x20000086
 80095f4:	20000087 	.word	0x20000087

080095f8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	460b      	mov	r3, r1
 8009602:	607a      	str	r2, [r7, #4]
 8009604:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	32b0      	adds	r2, #176	; 0xb0
 8009610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009614:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d102      	bne.n	8009622 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800961c:	f04f 33ff 	mov.w	r3, #4294967295
 8009620:	e168      	b.n	80098f4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	2baa      	cmp	r3, #170	; 0xaa
 8009628:	f000 8144 	beq.w	80098b4 <SCSI_ProcessCmd+0x2bc>
 800962c:	2baa      	cmp	r3, #170	; 0xaa
 800962e:	f300 8153 	bgt.w	80098d8 <SCSI_ProcessCmd+0x2e0>
 8009632:	2ba8      	cmp	r3, #168	; 0xa8
 8009634:	f000 812c 	beq.w	8009890 <SCSI_ProcessCmd+0x298>
 8009638:	2ba8      	cmp	r3, #168	; 0xa8
 800963a:	f300 814d 	bgt.w	80098d8 <SCSI_ProcessCmd+0x2e0>
 800963e:	2b5a      	cmp	r3, #90	; 0x5a
 8009640:	f300 80c0 	bgt.w	80097c4 <SCSI_ProcessCmd+0x1cc>
 8009644:	2b00      	cmp	r3, #0
 8009646:	f2c0 8147 	blt.w	80098d8 <SCSI_ProcessCmd+0x2e0>
 800964a:	2b5a      	cmp	r3, #90	; 0x5a
 800964c:	f200 8144 	bhi.w	80098d8 <SCSI_ProcessCmd+0x2e0>
 8009650:	a201      	add	r2, pc, #4	; (adr r2, 8009658 <SCSI_ProcessCmd+0x60>)
 8009652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009656:	bf00      	nop
 8009658:	080097cb 	.word	0x080097cb
 800965c:	080098d9 	.word	0x080098d9
 8009660:	080098d9 	.word	0x080098d9
 8009664:	080097dd 	.word	0x080097dd
 8009668:	080098d9 	.word	0x080098d9
 800966c:	080098d9 	.word	0x080098d9
 8009670:	080098d9 	.word	0x080098d9
 8009674:	080098d9 	.word	0x080098d9
 8009678:	080098d9 	.word	0x080098d9
 800967c:	080098d9 	.word	0x080098d9
 8009680:	080098d9 	.word	0x080098d9
 8009684:	080098d9 	.word	0x080098d9
 8009688:	080098d9 	.word	0x080098d9
 800968c:	080098d9 	.word	0x080098d9
 8009690:	080098d9 	.word	0x080098d9
 8009694:	080098d9 	.word	0x080098d9
 8009698:	080098d9 	.word	0x080098d9
 800969c:	080098d9 	.word	0x080098d9
 80096a0:	080097ef 	.word	0x080097ef
 80096a4:	080098d9 	.word	0x080098d9
 80096a8:	080098d9 	.word	0x080098d9
 80096ac:	080098d9 	.word	0x080098d9
 80096b0:	080098d9 	.word	0x080098d9
 80096b4:	080098d9 	.word	0x080098d9
 80096b8:	080098d9 	.word	0x080098d9
 80096bc:	080098d9 	.word	0x080098d9
 80096c0:	08009825 	.word	0x08009825
 80096c4:	08009801 	.word	0x08009801
 80096c8:	080098d9 	.word	0x080098d9
 80096cc:	080098d9 	.word	0x080098d9
 80096d0:	08009813 	.word	0x08009813
 80096d4:	080098d9 	.word	0x080098d9
 80096d8:	080098d9 	.word	0x080098d9
 80096dc:	080098d9 	.word	0x080098d9
 80096e0:	080098d9 	.word	0x080098d9
 80096e4:	08009849 	.word	0x08009849
 80096e8:	080098d9 	.word	0x080098d9
 80096ec:	0800985b 	.word	0x0800985b
 80096f0:	080098d9 	.word	0x080098d9
 80096f4:	080098d9 	.word	0x080098d9
 80096f8:	0800987f 	.word	0x0800987f
 80096fc:	080098d9 	.word	0x080098d9
 8009700:	080098a3 	.word	0x080098a3
 8009704:	080098d9 	.word	0x080098d9
 8009708:	080098d9 	.word	0x080098d9
 800970c:	080098d9 	.word	0x080098d9
 8009710:	080098d9 	.word	0x080098d9
 8009714:	080098c7 	.word	0x080098c7
 8009718:	080098d9 	.word	0x080098d9
 800971c:	080098d9 	.word	0x080098d9
 8009720:	080098d9 	.word	0x080098d9
 8009724:	080098d9 	.word	0x080098d9
 8009728:	080098d9 	.word	0x080098d9
 800972c:	080098d9 	.word	0x080098d9
 8009730:	080098d9 	.word	0x080098d9
 8009734:	080098d9 	.word	0x080098d9
 8009738:	080098d9 	.word	0x080098d9
 800973c:	080098d9 	.word	0x080098d9
 8009740:	080098d9 	.word	0x080098d9
 8009744:	080098d9 	.word	0x080098d9
 8009748:	080098d9 	.word	0x080098d9
 800974c:	080098d9 	.word	0x080098d9
 8009750:	080098d9 	.word	0x080098d9
 8009754:	080098d9 	.word	0x080098d9
 8009758:	080098d9 	.word	0x080098d9
 800975c:	080098d9 	.word	0x080098d9
 8009760:	080098d9 	.word	0x080098d9
 8009764:	080098d9 	.word	0x080098d9
 8009768:	080098d9 	.word	0x080098d9
 800976c:	080098d9 	.word	0x080098d9
 8009770:	080098d9 	.word	0x080098d9
 8009774:	080098d9 	.word	0x080098d9
 8009778:	080098d9 	.word	0x080098d9
 800977c:	080098d9 	.word	0x080098d9
 8009780:	080098d9 	.word	0x080098d9
 8009784:	080098d9 	.word	0x080098d9
 8009788:	080098d9 	.word	0x080098d9
 800978c:	080098d9 	.word	0x080098d9
 8009790:	080098d9 	.word	0x080098d9
 8009794:	080098d9 	.word	0x080098d9
 8009798:	080098d9 	.word	0x080098d9
 800979c:	080098d9 	.word	0x080098d9
 80097a0:	080098d9 	.word	0x080098d9
 80097a4:	080098d9 	.word	0x080098d9
 80097a8:	080098d9 	.word	0x080098d9
 80097ac:	080098d9 	.word	0x080098d9
 80097b0:	080098d9 	.word	0x080098d9
 80097b4:	080098d9 	.word	0x080098d9
 80097b8:	080098d9 	.word	0x080098d9
 80097bc:	080098d9 	.word	0x080098d9
 80097c0:	08009837 	.word	0x08009837
 80097c4:	2b9e      	cmp	r3, #158	; 0x9e
 80097c6:	d051      	beq.n	800986c <SCSI_ProcessCmd+0x274>
 80097c8:	e086      	b.n	80098d8 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80097ca:	7afb      	ldrb	r3, [r7, #11]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	4619      	mov	r1, r3
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f000 f893 	bl	80098fc <SCSI_TestUnitReady>
 80097d6:	4603      	mov	r3, r0
 80097d8:	75fb      	strb	r3, [r7, #23]
      break;
 80097da:	e089      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80097dc:	7afb      	ldrb	r3, [r7, #11]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	4619      	mov	r1, r3
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f000 fb6e 	bl	8009ec4 <SCSI_RequestSense>
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]
      break;
 80097ec:	e080      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80097ee:	7afb      	ldrb	r3, [r7, #11]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	4619      	mov	r1, r3
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 f8db 	bl	80099b0 <SCSI_Inquiry>
 80097fa:	4603      	mov	r3, r0
 80097fc:	75fb      	strb	r3, [r7, #23]
      break;
 80097fe:	e077      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009800:	7afb      	ldrb	r3, [r7, #11]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	4619      	mov	r1, r3
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 fc2a 	bl	800a060 <SCSI_StartStopUnit>
 800980c:	4603      	mov	r3, r0
 800980e:	75fb      	strb	r3, [r7, #23]
      break;
 8009810:	e06e      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009812:	7afb      	ldrb	r3, [r7, #11]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	4619      	mov	r1, r3
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 fc76 	bl	800a10a <SCSI_AllowPreventRemovable>
 800981e:	4603      	mov	r3, r0
 8009820:	75fb      	strb	r3, [r7, #23]
      break;
 8009822:	e065      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009824:	7afb      	ldrb	r3, [r7, #11]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	4619      	mov	r1, r3
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 faea 	bl	8009e04 <SCSI_ModeSense6>
 8009830:	4603      	mov	r3, r0
 8009832:	75fb      	strb	r3, [r7, #23]
      break;
 8009834:	e05c      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009836:	7afb      	ldrb	r3, [r7, #11]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	4619      	mov	r1, r3
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 fb11 	bl	8009e64 <SCSI_ModeSense10>
 8009842:	4603      	mov	r3, r0
 8009844:	75fb      	strb	r3, [r7, #23]
      break;
 8009846:	e053      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8009848:	7afb      	ldrb	r3, [r7, #11]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	4619      	mov	r1, r3
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f000 fa5d 	bl	8009d0e <SCSI_ReadFormatCapacity>
 8009854:	4603      	mov	r3, r0
 8009856:	75fb      	strb	r3, [r7, #23]
      break;
 8009858:	e04a      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800985a:	7afb      	ldrb	r3, [r7, #11]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	4619      	mov	r1, r3
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 f923 	bl	8009aac <SCSI_ReadCapacity10>
 8009866:	4603      	mov	r3, r0
 8009868:	75fb      	strb	r3, [r7, #23]
      break;
 800986a:	e041      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800986c:	7afb      	ldrb	r3, [r7, #11]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	4619      	mov	r1, r3
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 f998 	bl	8009ba8 <SCSI_ReadCapacity16>
 8009878:	4603      	mov	r3, r0
 800987a:	75fb      	strb	r3, [r7, #23]
      break;
 800987c:	e038      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800987e:	7afb      	ldrb	r3, [r7, #11]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	4619      	mov	r1, r3
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 fc6d 	bl	800a164 <SCSI_Read10>
 800988a:	4603      	mov	r3, r0
 800988c:	75fb      	strb	r3, [r7, #23]
      break;
 800988e:	e02f      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	4619      	mov	r1, r3
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f000 fd0e 	bl	800a2b8 <SCSI_Read12>
 800989c:	4603      	mov	r3, r0
 800989e:	75fb      	strb	r3, [r7, #23]
      break;
 80098a0:	e026      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80098a2:	7afb      	ldrb	r3, [r7, #11]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	4619      	mov	r1, r3
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 fdb9 	bl	800a420 <SCSI_Write10>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]
      break;
 80098b2:	e01d      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	4619      	mov	r1, r3
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 fe86 	bl	800a5cc <SCSI_Write12>
 80098c0:	4603      	mov	r3, r0
 80098c2:	75fb      	strb	r3, [r7, #23]
      break;
 80098c4:	e014      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80098c6:	7afb      	ldrb	r3, [r7, #11]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	4619      	mov	r1, r3
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 ff63 	bl	800a798 <SCSI_Verify10>
 80098d2:	4603      	mov	r3, r0
 80098d4:	75fb      	strb	r3, [r7, #23]
      break;
 80098d6:	e00b      	b.n	80098f0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80098d8:	7af9      	ldrb	r1, [r7, #11]
 80098da:	2320      	movs	r3, #32
 80098dc:	2205      	movs	r2, #5
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f000 fb73 	bl	8009fca <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	2202      	movs	r2, #2
 80098e8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80098ea:	23ff      	movs	r3, #255	; 0xff
 80098ec:	75fb      	strb	r3, [r7, #23]
      break;
 80098ee:	bf00      	nop
  }

  return ret;
 80098f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3718      	adds	r7, #24
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	460b      	mov	r3, r1
 8009906:	607a      	str	r2, [r7, #4]
 8009908:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	32b0      	adds	r2, #176	; 0xb0
 8009914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009918:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d102      	bne.n	8009926 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8009920:	f04f 33ff 	mov.w	r3, #4294967295
 8009924:	e03f      	b.n	80099a6 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00a      	beq.n	8009946 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009936:	2320      	movs	r3, #32
 8009938:	2205      	movs	r2, #5
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f000 fb45 	bl	8009fca <SCSI_SenseCode>

    return -1;
 8009940:	f04f 33ff 	mov.w	r3, #4294967295
 8009944:	e02f      	b.n	80099a6 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800994c:	2b02      	cmp	r3, #2
 800994e:	d10b      	bne.n	8009968 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009950:	7af9      	ldrb	r1, [r7, #11]
 8009952:	233a      	movs	r3, #58	; 0x3a
 8009954:	2202      	movs	r2, #2
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 fb37 	bl	8009fca <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	2205      	movs	r2, #5
 8009960:	721a      	strb	r2, [r3, #8]
    return -1;
 8009962:	f04f 33ff 	mov.w	r3, #4294967295
 8009966:	e01e      	b.n	80099a6 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	33b0      	adds	r3, #176	; 0xb0
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	7afa      	ldrb	r2, [r7, #11]
 800997c:	4610      	mov	r0, r2
 800997e:	4798      	blx	r3
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00b      	beq.n	800999e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009986:	7af9      	ldrb	r1, [r7, #11]
 8009988:	233a      	movs	r3, #58	; 0x3a
 800998a:	2202      	movs	r2, #2
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 fb1c 	bl	8009fca <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2205      	movs	r2, #5
 8009996:	721a      	strb	r2, [r3, #8]

    return -1;
 8009998:	f04f 33ff 	mov.w	r3, #4294967295
 800999c:	e003      	b.n	80099a6 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2200      	movs	r2, #0
 80099a2:	60da      	str	r2, [r3, #12]

  return 0;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b088      	sub	sp, #32
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	460b      	mov	r3, r1
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	32b0      	adds	r2, #176	; 0xb0
 80099c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099cc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <SCSI_Inquiry+0x2a>
  {
    return -1;
 80099d4:	f04f 33ff 	mov.w	r3, #4294967295
 80099d8:	e05f      	b.n	8009a9a <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10a      	bne.n	80099fa <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80099ea:	2320      	movs	r3, #32
 80099ec:	2205      	movs	r2, #5
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 faeb 	bl	8009fca <SCSI_SenseCode>
    return -1;
 80099f4:	f04f 33ff 	mov.w	r3, #4294967295
 80099f8:	e04f      	b.n	8009a9a <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	3301      	adds	r3, #1
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d020      	beq.n	8009a4a <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	3302      	adds	r3, #2
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d105      	bne.n	8009a1e <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8009a12:	2206      	movs	r2, #6
 8009a14:	4923      	ldr	r1, [pc, #140]	; (8009aa4 <SCSI_Inquiry+0xf4>)
 8009a16:	69b8      	ldr	r0, [r7, #24]
 8009a18:	f001 f844 	bl	800aaa4 <SCSI_UpdateBotData>
 8009a1c:	e03c      	b.n	8009a98 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3302      	adds	r3, #2
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b80      	cmp	r3, #128	; 0x80
 8009a26:	d105      	bne.n	8009a34 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8009a28:	2208      	movs	r2, #8
 8009a2a:	491f      	ldr	r1, [pc, #124]	; (8009aa8 <SCSI_Inquiry+0xf8>)
 8009a2c:	69b8      	ldr	r0, [r7, #24]
 8009a2e:	f001 f839 	bl	800aaa4 <SCSI_UpdateBotData>
 8009a32:	e031      	b.n	8009a98 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009a3a:	2324      	movs	r3, #36	; 0x24
 8009a3c:	2205      	movs	r2, #5
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fac3 	bl	8009fca <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009a44:	f04f 33ff 	mov.w	r3, #4294967295
 8009a48:	e027      	b.n	8009a9a <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	33b0      	adds	r3, #176	; 0xb0
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	69d9      	ldr	r1, [r3, #28]
 8009a5c:	7afa      	ldrb	r2, [r7, #11]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	00db      	lsls	r3, r3, #3
 8009a62:	4413      	add	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	440b      	add	r3, r1
 8009a68:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3305      	adds	r3, #5
 8009a74:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	8bfa      	ldrh	r2, [r7, #30]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d303      	bcc.n	8009a8c <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3304      	adds	r3, #4
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009a8c:	8bfb      	ldrh	r3, [r7, #30]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	6979      	ldr	r1, [r7, #20]
 8009a92:	69b8      	ldr	r0, [r7, #24]
 8009a94:	f001 f806 	bl	800aaa4 <SCSI_UpdateBotData>
  }

  return 0;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3720      	adds	r7, #32
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000088 	.word	0x20000088
 8009aa8:	20000090 	.word	0x20000090

08009aac <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	607a      	str	r2, [r7, #4]
 8009ab8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	32b0      	adds	r2, #176	; 0xb0
 8009ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d102      	bne.n	8009ad6 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8009ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad4:	e064      	b.n	8009ba0 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	33b0      	adds	r3, #176	; 0xb0
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4413      	add	r3, r2
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8009af4:	7af8      	ldrb	r0, [r7, #11]
 8009af6:	4798      	blx	r3
 8009af8:	4603      	mov	r3, r0
 8009afa:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009afc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d104      	bne.n	8009b0e <SCSI_ReadCapacity10+0x62>
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d108      	bne.n	8009b20 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009b0e:	7af9      	ldrb	r1, [r7, #11]
 8009b10:	233a      	movs	r3, #58	; 0x3a
 8009b12:	2202      	movs	r2, #2
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 fa58 	bl	8009fca <SCSI_SenseCode>
    return -1;
 8009b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1e:	e03f      	b.n	8009ba0 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009b26:	3b01      	subs	r3, #1
 8009b28:	0e1b      	lsrs	r3, r3, #24
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009b36:	3b01      	subs	r3, #1
 8009b38:	0c1b      	lsrs	r3, r3, #16
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009b46:	3b01      	subs	r3, #1
 8009b48:	0a1b      	lsrs	r3, r3, #8
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009b66:	161b      	asrs	r3, r3, #24
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009b74:	141b      	asrs	r3, r3, #16
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009b82:	0a1b      	lsrs	r3, r3, #8
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	60da      	str	r2, [r3, #12]

  return 0;
 8009b9e:	2300      	movs	r3, #0

}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3718      	adds	r7, #24
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b088      	sub	sp, #32
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	32b0      	adds	r2, #176	; 0xb0
 8009bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d102      	bne.n	8009bd2 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8009bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd0:	e099      	b.n	8009d06 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	33b0      	adds	r3, #176	; 0xb0
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8009bea:	69ba      	ldr	r2, [r7, #24]
 8009bec:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8009bf0:	7af8      	ldrb	r0, [r7, #11]
 8009bf2:	4798      	blx	r3
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d104      	bne.n	8009c0a <SCSI_ReadCapacity16+0x62>
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d108      	bne.n	8009c1c <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009c0a:	7af9      	ldrb	r1, [r7, #11]
 8009c0c:	233a      	movs	r3, #58	; 0x3a
 8009c0e:	2202      	movs	r2, #2
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 f9da 	bl	8009fca <SCSI_SenseCode>
    return -1;
 8009c16:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1a:	e074      	b.n	8009d06 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	330a      	adds	r3, #10
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	330b      	adds	r3, #11
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009c2c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	330c      	adds	r3, #12
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009c36:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	320d      	adds	r2, #13
 8009c3c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009c3e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009c44:	2300      	movs	r3, #0
 8009c46:	77fb      	strb	r3, [r7, #31]
 8009c48:	e007      	b.n	8009c5a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8009c4a:	7ffb      	ldrb	r3, [r7, #31]
 8009c4c:	69ba      	ldr	r2, [r7, #24]
 8009c4e:	4413      	add	r3, r2
 8009c50:	2200      	movs	r2, #0
 8009c52:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8009c54:	7ffb      	ldrb	r3, [r7, #31]
 8009c56:	3301      	adds	r3, #1
 8009c58:	77fb      	strb	r3, [r7, #31]
 8009c5a:	7ffa      	ldrb	r2, [r7, #31]
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d3f2      	bcc.n	8009c4a <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	0e1b      	lsrs	r3, r3, #24
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	0c1b      	lsrs	r3, r3, #16
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	0a1b      	lsrs	r3, r3, #8
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	b2da      	uxtb	r2, r3
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009caa:	161b      	asrs	r3, r3, #24
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009cb8:	141b      	asrs	r3, r3, #16
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009cc6:	0a1b      	lsrs	r3, r3, #8
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	330a      	adds	r3, #10
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	330b      	adds	r3, #11
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009cec:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	330c      	adds	r3, #12
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8009cf6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	320d      	adds	r2, #13
 8009cfc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009cfe:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	60da      	str	r2, [r3, #12]

  return 0;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3720      	adds	r7, #32
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b088      	sub	sp, #32
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	60f8      	str	r0, [r7, #12]
 8009d16:	460b      	mov	r3, r1
 8009d18:	607a      	str	r2, [r7, #4]
 8009d1a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	32b0      	adds	r2, #176	; 0xb0
 8009d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d102      	bne.n	8009d38 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8009d32:	f04f 33ff 	mov.w	r3, #4294967295
 8009d36:	e061      	b.n	8009dfc <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	33b0      	adds	r3, #176	; 0xb0
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f107 0214 	add.w	r2, r7, #20
 8009d4e:	f107 0110 	add.w	r1, r7, #16
 8009d52:	7af8      	ldrb	r0, [r7, #11]
 8009d54:	4798      	blx	r3
 8009d56:	4603      	mov	r3, r0
 8009d58:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d104      	bne.n	8009d6c <SCSI_ReadFormatCapacity+0x5e>
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d108      	bne.n	8009d7e <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d6c:	7af9      	ldrb	r1, [r7, #11]
 8009d6e:	233a      	movs	r3, #58	; 0x3a
 8009d70:	2202      	movs	r2, #2
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 f929 	bl	8009fca <SCSI_SenseCode>
    return -1;
 8009d78:	f04f 33ff 	mov.w	r3, #4294967295
 8009d7c:	e03e      	b.n	8009dfc <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8009d7e:	2300      	movs	r3, #0
 8009d80:	83fb      	strh	r3, [r7, #30]
 8009d82:	e007      	b.n	8009d94 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8009d84:	8bfb      	ldrh	r3, [r7, #30]
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	4413      	add	r3, r2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8009d8e:	8bfb      	ldrh	r3, [r7, #30]
 8009d90:	3301      	adds	r3, #1
 8009d92:	83fb      	strh	r3, [r7, #30]
 8009d94:	8bfb      	ldrh	r3, [r7, #30]
 8009d96:	2b0b      	cmp	r3, #11
 8009d98:	d9f4      	bls.n	8009d84 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	2208      	movs	r2, #8
 8009d9e:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	0e1b      	lsrs	r3, r3, #24
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	0c1b      	lsrs	r3, r3, #16
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	0a1b      	lsrs	r3, r3, #8
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009dd6:	8abb      	ldrh	r3, [r7, #20]
 8009dd8:	141b      	asrs	r3, r3, #16
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8009de0:	8abb      	ldrh	r3, [r7, #20]
 8009de2:	0a1b      	lsrs	r3, r3, #8
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8009dec:	8abb      	ldrh	r3, [r7, #20]
 8009dee:	b2da      	uxtb	r2, r3
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	220c      	movs	r2, #12
 8009df8:	60da      	str	r2, [r3, #12]

  return 0;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3720      	adds	r7, #32
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	32b0      	adds	r2, #176	; 0xb0
 8009e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e20:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8009e22:	2317      	movs	r3, #23
 8009e24:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8009e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e30:	e011      	b.n	8009e56 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	3304      	adds	r3, #4
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	8afa      	ldrh	r2, [r7, #22]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d303      	bcc.n	8009e48 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3304      	adds	r3, #4
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8009e48:	8afb      	ldrh	r3, [r7, #22]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	4904      	ldr	r1, [pc, #16]	; (8009e60 <SCSI_ModeSense6+0x5c>)
 8009e4e:	6938      	ldr	r0, [r7, #16]
 8009e50:	f000 fe28 	bl	800aaa4 <SCSI_UpdateBotData>

  return 0;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20000098 	.word	0x20000098

08009e64 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	607a      	str	r2, [r7, #4]
 8009e70:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	32b0      	adds	r2, #176	; 0xb0
 8009e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e80:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8009e82:	231b      	movs	r3, #27
 8009e84:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d102      	bne.n	8009e92 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8009e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e90:	e011      	b.n	8009eb6 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	3308      	adds	r3, #8
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	8afa      	ldrh	r2, [r7, #22]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d303      	bcc.n	8009ea8 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8009ea8:	8afb      	ldrh	r3, [r7, #22]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	4904      	ldr	r1, [pc, #16]	; (8009ec0 <SCSI_ModeSense10+0x5c>)
 8009eae:	6938      	ldr	r0, [r7, #16]
 8009eb0:	f000 fdf8 	bl	800aaa4 <SCSI_UpdateBotData>

  return 0;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	200000b0 	.word	0x200000b0

08009ec4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	32b0      	adds	r2, #176	; 0xb0
 8009edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d102      	bne.n	8009eee <SCSI_RequestSense+0x2a>
  {
    return -1;
 8009ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8009eec:	e069      	b.n	8009fc2 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10a      	bne.n	8009f0e <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009efe:	2320      	movs	r3, #32
 8009f00:	2205      	movs	r2, #5
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f000 f861 	bl	8009fca <SCSI_SenseCode>
    return -1;
 8009f08:	f04f 33ff 	mov.w	r3, #4294967295
 8009f0c:	e059      	b.n	8009fc2 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009f0e:	2300      	movs	r3, #0
 8009f10:	75fb      	strb	r3, [r7, #23]
 8009f12:	e007      	b.n	8009f24 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	4413      	add	r3, r2
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009f1e:	7dfb      	ldrb	r3, [r7, #23]
 8009f20:	3301      	adds	r3, #1
 8009f22:	75fb      	strb	r3, [r7, #23]
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	2b11      	cmp	r3, #17
 8009f28:	d9f4      	bls.n	8009f14 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	2270      	movs	r2, #112	; 0x70
 8009f2e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	220c      	movs	r2, #12
 8009f34:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d02e      	beq.n	8009fa4 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	3248      	adds	r2, #72	; 0x48
 8009f52:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	3348      	adds	r3, #72	; 0x48
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	4413      	add	r3, r2
 8009f68:	791a      	ldrb	r2, [r3, #4]
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009f74:	693a      	ldr	r2, [r7, #16]
 8009f76:	3348      	adds	r3, #72	; 0x48
 8009f78:	00db      	lsls	r3, r3, #3
 8009f7a:	4413      	add	r3, r2
 8009f7c:	795a      	ldrb	r2, [r3, #5]
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009f88:	3301      	adds	r3, #1
 8009f8a:	b2da      	uxtb	r2, r3
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009f98:	2b04      	cmp	r3, #4
 8009f9a:	d103      	bne.n	8009fa4 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	2212      	movs	r2, #18
 8009fa8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3304      	adds	r3, #4
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	2b12      	cmp	r3, #18
 8009fb2:	d805      	bhi.n	8009fc0 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3718      	adds	r7, #24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b085      	sub	sp, #20
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	4608      	mov	r0, r1
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	4603      	mov	r3, r0
 8009fda:	70fb      	strb	r3, [r7, #3]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70bb      	strb	r3, [r7, #2]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	32b0      	adds	r2, #176	; 0xb0
 8009fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d02c      	beq.n	800a054 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a000:	461a      	mov	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3248      	adds	r2, #72	; 0x48
 800a006:	78b9      	ldrb	r1, [r7, #2]
 800a008:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	3348      	adds	r3, #72	; 0x48
 800a016:	00db      	lsls	r3, r3, #3
 800a018:	4413      	add	r3, r2
 800a01a:	787a      	ldrb	r2, [r7, #1]
 800a01c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	3348      	adds	r3, #72	; 0x48
 800a028:	00db      	lsls	r3, r3, #3
 800a02a:	4413      	add	r3, r2
 800a02c:	2200      	movs	r2, #0
 800a02e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a036:	3301      	adds	r3, #1
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800a046:	2b04      	cmp	r3, #4
 800a048:	d105      	bne.n	800a056 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800a052:	e000      	b.n	800a056 <SCSI_SenseCode+0x8c>
    return;
 800a054:	bf00      	nop
  }
}
 800a056:	3714      	adds	r7, #20
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	460b      	mov	r3, r1
 800a06a:	607a      	str	r2, [r7, #4]
 800a06c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	32b0      	adds	r2, #176	; 0xb0
 800a078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d102      	bne.n	800a08a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800a084:	f04f 33ff 	mov.w	r3, #4294967295
 800a088:	e03b      	b.n	800a102 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a090:	2b01      	cmp	r3, #1
 800a092:	d10f      	bne.n	800a0b4 <SCSI_StartStopUnit+0x54>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3304      	adds	r3, #4
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	f003 0303 	and.w	r3, r3, #3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d108      	bne.n	800a0b4 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a0a2:	7af9      	ldrb	r1, [r7, #11]
 800a0a4:	2324      	movs	r3, #36	; 0x24
 800a0a6:	2205      	movs	r2, #5
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f7ff ff8e 	bl	8009fca <SCSI_SenseCode>

    return -1;
 800a0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b2:	e026      	b.n	800a102 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	f003 0303 	and.w	r3, r3, #3
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d104      	bne.n	800a0cc <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800a0ca:	e016      	b.n	800a0fa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	f003 0303 	and.w	r3, r3, #3
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d104      	bne.n	800a0e4 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800a0e2:	e00a      	b.n	800a0fa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	f003 0303 	and.w	r3, r3, #3
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d103      	bne.n	800a0fa <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	60da      	str	r2, [r3, #12]

  return 0;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b087      	sub	sp, #28
 800a10e:	af00      	add	r7, sp, #0
 800a110:	60f8      	str	r0, [r7, #12]
 800a112:	460b      	mov	r3, r1
 800a114:	607a      	str	r2, [r7, #4]
 800a116:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	32b0      	adds	r2, #176	; 0xb0
 800a122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a126:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d102      	bne.n	800a134 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800a12e:	f04f 33ff 	mov.w	r3, #4294967295
 800a132:	e011      	b.n	800a158 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3304      	adds	r3, #4
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d104      	bne.n	800a148 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800a146:	e003      	b.n	800a150 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	2200      	movs	r2, #0
 800a154:	60da      	str	r2, [r3, #12]

  return 0;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	371c      	adds	r7, #28
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	460b      	mov	r3, r1
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	32b0      	adds	r2, #176	; 0xb0
 800a17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a180:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d102      	bne.n	800a18e <SCSI_Read10+0x2a>
  {
    return -1;
 800a188:	f04f 33ff 	mov.w	r3, #4294967295
 800a18c:	e090      	b.n	800a2b0 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	7a1b      	ldrb	r3, [r3, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	f040 8082 	bne.w	800a29c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800a19e:	b25b      	sxtb	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	db0a      	blt.n	800a1ba <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a1aa:	2320      	movs	r3, #32
 800a1ac:	2205      	movs	r2, #5
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f7ff ff0b 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1b8:	e07a      	b.n	800a2b0 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d108      	bne.n	800a1d6 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a1c4:	7af9      	ldrb	r1, [r7, #11]
 800a1c6:	233a      	movs	r3, #58	; 0x3a
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f7ff fefd 	bl	8009fca <SCSI_SenseCode>

      return -1;
 800a1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d4:	e06c      	b.n	800a2b0 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	33b0      	adds	r3, #176	; 0xb0
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4413      	add	r3, r2
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	7afa      	ldrb	r2, [r7, #11]
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	4798      	blx	r3
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d008      	beq.n	800a206 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a1f4:	7af9      	ldrb	r1, [r7, #11]
 800a1f6:	233a      	movs	r3, #58	; 0x3a
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7ff fee5 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a200:	f04f 33ff 	mov.w	r3, #4294967295
 800a204:	e054      	b.n	800a2b0 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3302      	adds	r3, #2
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3303      	adds	r3, #3
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a216:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3304      	adds	r3, #4
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a220:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	3205      	adds	r2, #5
 800a226:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a228:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	3307      	adds	r3, #7
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	021b      	lsls	r3, r3, #8
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	3208      	adds	r2, #8
 800a23c:	7812      	ldrb	r2, [r2, #0]
 800a23e:	431a      	orrs	r2, r3
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a252:	7af9      	ldrb	r1, [r7, #11]
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 fadc 	bl	800a812 <SCSI_CheckAddressRange>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	da02      	bge.n	800a266 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a260:	f04f 33ff 	mov.w	r3, #4294967295
 800a264:	e024      	b.n	800a2b0 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a272:	6979      	ldr	r1, [r7, #20]
 800a274:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800a278:	fb01 f303 	mul.w	r3, r1, r3
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d00a      	beq.n	800a296 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a286:	2320      	movs	r3, #32
 800a288:	2205      	movs	r2, #5
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f7ff fe9d 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a290:	f04f 33ff 	mov.w	r3, #4294967295
 800a294:	e00c      	b.n	800a2b0 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	2202      	movs	r2, #2
 800a29a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2a2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a2a4:	7afb      	ldrb	r3, [r7, #11]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 fadf 	bl	800a86c <SCSI_ProcessRead>
 800a2ae:	4603      	mov	r3, r0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3718      	adds	r7, #24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	607a      	str	r2, [r7, #4]
 800a2c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	32b0      	adds	r2, #176	; 0xb0
 800a2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d102      	bne.n	800a2e2 <SCSI_Read12+0x2a>
  {
    return -1;
 800a2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e0:	e09a      	b.n	800a418 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	7a1b      	ldrb	r3, [r3, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f040 808c 	bne.w	800a404 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800a2f2:	b25b      	sxtb	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	db0a      	blt.n	800a30e <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a2fe:	2320      	movs	r3, #32
 800a300:	2205      	movs	r2, #5
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7ff fe61 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a308:	f04f 33ff 	mov.w	r3, #4294967295
 800a30c:	e084      	b.n	800a418 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800a314:	2b02      	cmp	r3, #2
 800a316:	d108      	bne.n	800a32a <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a318:	7af9      	ldrb	r1, [r7, #11]
 800a31a:	233a      	movs	r3, #58	; 0x3a
 800a31c:	2202      	movs	r2, #2
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f7ff fe53 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a324:	f04f 33ff 	mov.w	r3, #4294967295
 800a328:	e076      	b.n	800a418 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	33b0      	adds	r3, #176	; 0xb0
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4413      	add	r3, r2
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	7afa      	ldrb	r2, [r7, #11]
 800a33e:	4610      	mov	r0, r2
 800a340:	4798      	blx	r3
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d008      	beq.n	800a35a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a348:	7af9      	ldrb	r1, [r7, #11]
 800a34a:	233a      	movs	r3, #58	; 0x3a
 800a34c:	2202      	movs	r2, #2
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f7ff fe3b 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a354:	f04f 33ff 	mov.w	r3, #4294967295
 800a358:	e05e      	b.n	800a418 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	3302      	adds	r3, #2
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	3303      	adds	r3, #3
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a36a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	3304      	adds	r3, #4
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a374:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	3205      	adds	r2, #5
 800a37a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800a37c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	3306      	adds	r3, #6
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3307      	adds	r3, #7
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a394:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3308      	adds	r3, #8
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a39e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	3209      	adds	r2, #9
 800a3a4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a3a6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a3ba:	7af9      	ldrb	r1, [r7, #11]
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 fa28 	bl	800a812 <SCSI_CheckAddressRange>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	da02      	bge.n	800a3ce <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3cc:	e024      	b.n	800a418 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a3da:	6979      	ldr	r1, [r7, #20]
 800a3dc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800a3e0:	fb01 f303 	mul.w	r3, r1, r3
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d00a      	beq.n	800a3fe <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a3ee:	2320      	movs	r3, #32
 800a3f0:	2205      	movs	r2, #5
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f7ff fde9 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3fc:	e00c      	b.n	800a418 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2202      	movs	r2, #2
 800a402:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a40a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800a40c:	7afb      	ldrb	r3, [r7, #11]
 800a40e:	4619      	mov	r1, r3
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f000 fa2b 	bl	800a86c <SCSI_ProcessRead>
 800a416:	4603      	mov	r3, r0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	460b      	mov	r3, r1
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	32b0      	adds	r2, #176	; 0xb0
 800a438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d102      	bne.n	800a44a <SCSI_Write10+0x2a>
  {
    return -1;
 800a444:	f04f 33ff 	mov.w	r3, #4294967295
 800a448:	e0ba      	b.n	800a5c0 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	7a1b      	ldrb	r3, [r3, #8]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f040 80b0 	bne.w	800a5b4 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10a      	bne.n	800a474 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a464:	2320      	movs	r3, #32
 800a466:	2205      	movs	r2, #5
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff fdae 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a46e:	f04f 33ff 	mov.w	r3, #4294967295
 800a472:	e0a5      	b.n	800a5c0 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800a47a:	b25b      	sxtb	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	da0a      	bge.n	800a496 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a486:	2320      	movs	r3, #32
 800a488:	2205      	movs	r2, #5
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7ff fd9d 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a490:	f04f 33ff 	mov.w	r3, #4294967295
 800a494:	e094      	b.n	800a5c0 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	33b0      	adds	r3, #176	; 0xb0
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	7afa      	ldrb	r2, [r7, #11]
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	4798      	blx	r3
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d008      	beq.n	800a4c6 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a4b4:	7af9      	ldrb	r1, [r7, #11]
 800a4b6:	233a      	movs	r3, #58	; 0x3a
 800a4b8:	2202      	movs	r2, #2
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f7ff fd85 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c4:	e07c      	b.n	800a5c0 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	33b0      	adds	r3, #176	; 0xb0
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	7afa      	ldrb	r2, [r7, #11]
 800a4da:	4610      	mov	r0, r2
 800a4dc:	4798      	blx	r3
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d008      	beq.n	800a4f6 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a4e4:	7af9      	ldrb	r1, [r7, #11]
 800a4e6:	2327      	movs	r3, #39	; 0x27
 800a4e8:	2202      	movs	r2, #2
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f7ff fd6d 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f4:	e064      	b.n	800a5c0 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	3302      	adds	r3, #2
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	3303      	adds	r3, #3
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a506:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	3304      	adds	r3, #4
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a510:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	3205      	adds	r2, #5
 800a516:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a518:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	3307      	adds	r3, #7
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	3208      	adds	r2, #8
 800a52c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800a52e:	431a      	orrs	r2, r3
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a542:	7af9      	ldrb	r1, [r7, #11]
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f000 f964 	bl	800a812 <SCSI_CheckAddressRange>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	da02      	bge.n	800a556 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a550:	f04f 33ff 	mov.w	r3, #4294967295
 800a554:	e034      	b.n	800a5c0 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a562:	fb02 f303 	mul.w	r3, r2, r3
 800a566:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	429a      	cmp	r2, r3
 800a572:	d00a      	beq.n	800a58a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a57a:	2320      	movs	r3, #32
 800a57c:	2205      	movs	r2, #5
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff fd23 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a584:	f04f 33ff 	mov.w	r3, #4294967295
 800a588:	e01a      	b.n	800a5c0 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a590:	bf28      	it	cs
 800a592:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a596:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	2201      	movs	r2, #1
 800a59c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a59e:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <SCSI_Write10+0x1a8>)
 800a5a0:	7819      	ldrb	r1, [r3, #0]
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f103 0210 	add.w	r2, r3, #16
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f005 fbd1 	bl	800fd52 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e005      	b.n	800a5c0 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800a5b4:	7afb      	ldrb	r3, [r7, #11]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f000 f9dd 	bl	800a978 <SCSI_ProcessWrite>
 800a5be:	4603      	mov	r3, r0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20000087 	.word	0x20000087

0800a5cc <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	32b0      	adds	r2, #176	; 0xb0
 800a5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d102      	bne.n	800a5f6 <SCSI_Write12+0x2a>
  {
    return -1;
 800a5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f4:	e0ca      	b.n	800a78c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	7a1b      	ldrb	r3, [r3, #8]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f040 80c0 	bne.w	800a780 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10a      	bne.n	800a620 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a610:	2320      	movs	r3, #32
 800a612:	2205      	movs	r2, #5
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f7ff fcd8 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a61a:	f04f 33ff 	mov.w	r3, #4294967295
 800a61e:	e0b5      	b.n	800a78c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800a626:	b25b      	sxtb	r3, r3
 800a628:	2b00      	cmp	r3, #0
 800a62a:	da0a      	bge.n	800a642 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a632:	2320      	movs	r3, #32
 800a634:	2205      	movs	r2, #5
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f7ff fcc7 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a63c:	f04f 33ff 	mov.w	r3, #4294967295
 800a640:	e0a4      	b.n	800a78c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	33b0      	adds	r3, #176	; 0xb0
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	7afa      	ldrb	r2, [r7, #11]
 800a656:	4610      	mov	r0, r2
 800a658:	4798      	blx	r3
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00b      	beq.n	800a678 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a660:	7af9      	ldrb	r1, [r7, #11]
 800a662:	233a      	movs	r3, #58	; 0x3a
 800a664:	2202      	movs	r2, #2
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f7ff fcaf 	bl	8009fca <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	2205      	movs	r2, #5
 800a670:	721a      	strb	r2, [r3, #8]
      return -1;
 800a672:	f04f 33ff 	mov.w	r3, #4294967295
 800a676:	e089      	b.n	800a78c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	33b0      	adds	r3, #176	; 0xb0
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	4413      	add	r3, r2
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	7afa      	ldrb	r2, [r7, #11]
 800a68c:	4610      	mov	r0, r2
 800a68e:	4798      	blx	r3
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00b      	beq.n	800a6ae <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800a696:	7af9      	ldrb	r1, [r7, #11]
 800a698:	2327      	movs	r3, #39	; 0x27
 800a69a:	2202      	movs	r2, #2
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7ff fc94 	bl	8009fca <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2205      	movs	r2, #5
 800a6a6:	721a      	strb	r2, [r3, #8]
      return -1;
 800a6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ac:	e06e      	b.n	800a78c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3302      	adds	r3, #2
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	3303      	adds	r3, #3
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a6be:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a6c8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	3205      	adds	r2, #5
 800a6ce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a6d0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	3306      	adds	r3, #6
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3307      	adds	r3, #7
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a6e8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a6f2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	3209      	adds	r2, #9
 800a6f8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a6fa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a70e:	7af9      	ldrb	r1, [r7, #11]
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f000 f87e 	bl	800a812 <SCSI_CheckAddressRange>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	da02      	bge.n	800a722 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a71c:	f04f 33ff 	mov.w	r3, #4294967295
 800a720:	e034      	b.n	800a78c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a72e:	fb02 f303 	mul.w	r3, r2, r3
 800a732:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a73a:	693a      	ldr	r2, [r7, #16]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d00a      	beq.n	800a756 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a746:	2320      	movs	r3, #32
 800a748:	2205      	movs	r2, #5
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f7ff fc3d 	bl	8009fca <SCSI_SenseCode>
      return -1;
 800a750:	f04f 33ff 	mov.w	r3, #4294967295
 800a754:	e01a      	b.n	800a78c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a75c:	bf28      	it	cs
 800a75e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a762:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	2201      	movs	r2, #1
 800a768:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800a76a:	4b0a      	ldr	r3, [pc, #40]	; (800a794 <SCSI_Write12+0x1c8>)
 800a76c:	7819      	ldrb	r1, [r3, #0]
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	f103 0210 	add.w	r2, r3, #16
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f005 faeb 	bl	800fd52 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	e005      	b.n	800a78c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800a780:	7afb      	ldrb	r3, [r7, #11]
 800a782:	4619      	mov	r1, r3
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 f8f7 	bl	800a978 <SCSI_ProcessWrite>
 800a78a:	4603      	mov	r3, r0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3718      	adds	r7, #24
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	20000087 	.word	0x20000087

0800a798 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	32b0      	adds	r2, #176	; 0xb0
 800a7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d102      	bne.n	800a7c2 <SCSI_Verify10+0x2a>
  {
    return -1;
 800a7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c0:	e023      	b.n	800a80a <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	f003 0302 	and.w	r3, r3, #2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d008      	beq.n	800a7e2 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a7d0:	7af9      	ldrb	r1, [r7, #11]
 800a7d2:	2324      	movs	r3, #36	; 0x24
 800a7d4:	2205      	movs	r2, #5
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f7ff fbf7 	bl	8009fca <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800a7dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e0:	e013      	b.n	800a80a <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a7ee:	7af9      	ldrb	r1, [r7, #11]
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 f80e 	bl	800a812 <SCSI_CheckAddressRange>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	da02      	bge.n	800a802 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800a7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a800:	e003      	b.n	800a80a <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2200      	movs	r2, #0
 800a806:	60da      	str	r2, [r3, #12]

  return 0;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b086      	sub	sp, #24
 800a816:	af00      	add	r7, sp, #0
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	603b      	str	r3, [r7, #0]
 800a81e:	460b      	mov	r3, r1
 800a820:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	32b0      	adds	r2, #176	; 0xb0
 800a82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a830:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d102      	bne.n	800a83e <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800a838:	f04f 33ff 	mov.w	r3, #4294967295
 800a83c:	e011      	b.n	800a862 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	441a      	add	r2, r3
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d908      	bls.n	800a860 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800a84e:	7af9      	ldrb	r1, [r7, #11]
 800a850:	2321      	movs	r3, #33	; 0x21
 800a852:	2205      	movs	r2, #5
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f7ff fbb8 	bl	8009fca <SCSI_SenseCode>
    return -1;
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295
 800a85e:	e000      	b.n	800a862 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
	...

0800a86c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a86c:	b590      	push	{r4, r7, lr}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	460b      	mov	r3, r1
 800a876:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	32b0      	adds	r2, #176	; 0xb0
 800a882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a886:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d102      	bne.n	800a894 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800a88e:	f04f 33ff 	mov.w	r3, #4294967295
 800a892:	e06a      	b.n	800a96a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a8a0:	fb02 f303 	mul.w	r3, r2, r3
 800a8a4:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ac:	bf28      	it	cs
 800a8ae:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a8b2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	33b0      	adds	r3, #176	; 0xb0
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	691c      	ldr	r4, [r3, #16]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f103 0110 	add.w	r1, r3, #16
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a8d8:	4618      	mov	r0, r3
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	78f8      	ldrb	r0, [r7, #3]
 800a8e4:	47a0      	blx	r4
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	da08      	bge.n	800a8fe <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800a8ec:	78f9      	ldrb	r1, [r7, #3]
 800a8ee:	2311      	movs	r3, #17
 800a8f0:	2204      	movs	r2, #4
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7ff fb69 	bl	8009fca <SCSI_SenseCode>
    return -1;
 800a8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fc:	e035      	b.n	800a96a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800a8fe:	4b1d      	ldr	r3, [pc, #116]	; (800a974 <SCSI_ProcessRead+0x108>)
 800a900:	7819      	ldrb	r1, [r3, #0]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f103 0210 	add.w	r2, r3, #16
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f005 fa00 	bl	800fd10 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a91c:	4619      	mov	r1, r3
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	fbb3 f3f1 	udiv	r3, r3, r1
 800a924:	441a      	add	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a938:	4619      	mov	r1, r3
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a940:	1ad2      	subs	r2, r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	1ad2      	subs	r2, r2, r3
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d102      	bne.n	800a968 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2203      	movs	r2, #3
 800a966:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd90      	pop	{r4, r7, pc}
 800a972:	bf00      	nop
 800a974:	20000086 	.word	0x20000086

0800a978 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a978:	b590      	push	{r4, r7, lr}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	32b0      	adds	r2, #176	; 0xb0
 800a98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a992:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d102      	bne.n	800a9a0 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800a99a:	f04f 33ff 	mov.w	r3, #4294967295
 800a99e:	e07a      	b.n	800aa96 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a9ac:	fb02 f303 	mul.w	r3, r2, r3
 800a9b0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9b8:	bf28      	it	cs
 800a9ba:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a9be:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	33b0      	adds	r3, #176	; 0xb0
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4413      	add	r3, r2
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	695c      	ldr	r4, [r3, #20]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f103 0110 	add.w	r1, r3, #16
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	78f8      	ldrb	r0, [r7, #3]
 800a9f0:	47a0      	blx	r4
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	da08      	bge.n	800aa0a <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800a9f8:	78f9      	ldrb	r1, [r7, #3]
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	2204      	movs	r2, #4
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7ff fae3 	bl	8009fca <SCSI_SenseCode>
    return -1;
 800aa04:	f04f 33ff 	mov.w	r3, #4294967295
 800aa08:	e045      	b.n	800aa96 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800aa16:	4619      	mov	r1, r3
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa1e:	441a      	add	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800aa32:	4619      	mov	r1, r3
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa3a:	1ad2      	subs	r2, r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	1ad2      	subs	r2, r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d104      	bne.n	800aa66 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7fe fd14 	bl	800948c <MSC_BOT_SendCSW>
 800aa64:	e016      	b.n	800aa94 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800aa72:	fb02 f303 	mul.w	r3, r2, r3
 800aa76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa7a:	bf28      	it	cs
 800aa7c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800aa80:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800aa82:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <SCSI_ProcessWrite+0x128>)
 800aa84:	7819      	ldrb	r1, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f103 0210 	add.w	r2, r3, #16
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f005 f95f 	bl	800fd52 <USBD_LL_PrepareReceive>
  }

  return 0;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd90      	pop	{r4, r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20000087 	.word	0x20000087

0800aaa4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b087      	sub	sp, #28
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	4613      	mov	r3, r2
 800aab0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800aab2:	88fb      	ldrh	r3, [r7, #6]
 800aab4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d102      	bne.n	800aac2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800aabc:	f04f 33ff 	mov.w	r3, #4294967295
 800aac0:	e013      	b.n	800aaea <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800aac2:	8afa      	ldrh	r2, [r7, #22]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800aac8:	e00b      	b.n	800aae2 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800aaca:	8afb      	ldrh	r3, [r7, #22]
 800aacc:	3b01      	subs	r3, #1
 800aace:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800aad0:	8afb      	ldrh	r3, [r7, #22]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	441a      	add	r2, r3
 800aad6:	8afb      	ldrh	r3, [r7, #22]
 800aad8:	7811      	ldrb	r1, [r2, #0]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	4413      	add	r3, r2
 800aade:	460a      	mov	r2, r1
 800aae0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800aae2:	8afb      	ldrh	r3, [r7, #22]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1f0      	bne.n	800aaca <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	371c      	adds	r7, #28
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b086      	sub	sp, #24
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	60b9      	str	r1, [r7, #8]
 800ab00:	4613      	mov	r3, r2
 800ab02:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d101      	bne.n	800ab0e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e01f      	b.n	800ab4e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d003      	beq.n	800ab34 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	79fa      	ldrb	r2, [r7, #7]
 800ab40:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f004 ff90 	bl	800fa68 <USBD_LL_Init>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b084      	sub	sp, #16
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab60:	2300      	movs	r3, #0
 800ab62:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	e025      	b.n	800abba <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	32ae      	adds	r2, #174	; 0xae
 800ab80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00f      	beq.n	800abaa <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	32ae      	adds	r2, #174	; 0xae
 800ab94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9a:	f107 020e 	add.w	r2, r7, #14
 800ab9e:	4610      	mov	r0, r2
 800aba0:	4798      	blx	r3
 800aba2:	4602      	mov	r2, r0
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b082      	sub	sp, #8
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f004 ff98 	bl	800fb00 <USBD_LL_Start>
 800abd0:	4603      	mov	r3, r0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800abda:	b480      	push	{r7}
 800abdc:	b083      	sub	sp, #12
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abe2:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	460b      	mov	r3, r1
 800abfa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d009      	beq.n	800ac1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	78fa      	ldrb	r2, [r7, #3]
 800ac14:	4611      	mov	r1, r2
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	4798      	blx	r3
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac34:	2300      	movs	r3, #0
 800ac36:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	78fa      	ldrb	r2, [r7, #3]
 800ac42:	4611      	mov	r1, r2
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	4798      	blx	r3
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ac4e:	2303      	movs	r3, #3
 800ac50:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ac6c:	6839      	ldr	r1, [r7, #0]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f001 f909 	bl	800be86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ac82:	461a      	mov	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ac90:	f003 031f 	and.w	r3, r3, #31
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d01a      	beq.n	800acce <USBD_LL_SetupStage+0x72>
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d822      	bhi.n	800ace2 <USBD_LL_SetupStage+0x86>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <USBD_LL_SetupStage+0x4a>
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d00a      	beq.n	800acba <USBD_LL_SetupStage+0x5e>
 800aca4:	e01d      	b.n	800ace2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fb60 	bl	800b374 <USBD_StdDevReq>
 800acb4:	4603      	mov	r3, r0
 800acb6:	73fb      	strb	r3, [r7, #15]
      break;
 800acb8:	e020      	b.n	800acfc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fbc8 	bl	800b458 <USBD_StdItfReq>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]
      break;
 800accc:	e016      	b.n	800acfc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800acd4:	4619      	mov	r1, r3
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fc2a 	bl	800b530 <USBD_StdEPReq>
 800acdc:	4603      	mov	r3, r0
 800acde:	73fb      	strb	r3, [r7, #15]
      break;
 800ace0:	e00c      	b.n	800acfc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ace8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800acec:	b2db      	uxtb	r3, r3
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f004 ff84 	bl	800fbfe <USBD_LL_StallEP>
 800acf6:	4603      	mov	r3, r0
 800acf8:	73fb      	strb	r3, [r7, #15]
      break;
 800acfa:	bf00      	nop
  }

  return ret;
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b086      	sub	sp, #24
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	60f8      	str	r0, [r7, #12]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	607a      	str	r2, [r7, #4]
 800ad12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ad18:	7afb      	ldrb	r3, [r7, #11]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d16e      	bne.n	800adfc <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ad24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	f040 8098 	bne.w	800ae62 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	689a      	ldr	r2, [r3, #8]
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d913      	bls.n	800ad66 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	689a      	ldr	r2, [r3, #8]
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	1ad2      	subs	r2, r2, r3
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	68da      	ldr	r2, [r3, #12]
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	4293      	cmp	r3, r2
 800ad56:	bf28      	it	cs
 800ad58:	4613      	movcs	r3, r2
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f001 f968 	bl	800c034 <USBD_CtlContinueRx>
 800ad64:	e07d      	b.n	800ae62 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ad6c:	f003 031f 	and.w	r3, r3, #31
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	d014      	beq.n	800ad9e <USBD_LL_DataOutStage+0x98>
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d81d      	bhi.n	800adb4 <USBD_LL_DataOutStage+0xae>
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <USBD_LL_DataOutStage+0x7c>
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d003      	beq.n	800ad88 <USBD_LL_DataOutStage+0x82>
 800ad80:	e018      	b.n	800adb4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ad82:	2300      	movs	r3, #0
 800ad84:	75bb      	strb	r3, [r7, #22]
            break;
 800ad86:	e018      	b.n	800adba <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	4619      	mov	r1, r3
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f000 fa5e 	bl	800b254 <USBD_CoreFindIF>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	75bb      	strb	r3, [r7, #22]
            break;
 800ad9c:	e00d      	b.n	800adba <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	4619      	mov	r1, r3
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 fa60 	bl	800b26e <USBD_CoreFindEP>
 800adae:	4603      	mov	r3, r0
 800adb0:	75bb      	strb	r3, [r7, #22]
            break;
 800adb2:	e002      	b.n	800adba <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800adb4:	2300      	movs	r3, #0
 800adb6:	75bb      	strb	r3, [r7, #22]
            break;
 800adb8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800adba:	7dbb      	ldrb	r3, [r7, #22]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d119      	bne.n	800adf4 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	2b03      	cmp	r3, #3
 800adca:	d113      	bne.n	800adf4 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800adcc:	7dba      	ldrb	r2, [r7, #22]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	32ae      	adds	r2, #174	; 0xae
 800add2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00b      	beq.n	800adf4 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800addc:	7dba      	ldrb	r2, [r7, #22]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ade4:	7dba      	ldrb	r2, [r7, #22]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	32ae      	adds	r2, #174	; 0xae
 800adea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f001 f92e 	bl	800c056 <USBD_CtlSendStatus>
 800adfa:	e032      	b.n	800ae62 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800adfc:	7afb      	ldrb	r3, [r7, #11]
 800adfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	4619      	mov	r1, r3
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 fa31 	bl	800b26e <USBD_CoreFindEP>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae10:	7dbb      	ldrb	r3, [r7, #22]
 800ae12:	2bff      	cmp	r3, #255	; 0xff
 800ae14:	d025      	beq.n	800ae62 <USBD_LL_DataOutStage+0x15c>
 800ae16:	7dbb      	ldrb	r3, [r7, #22]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d122      	bne.n	800ae62 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	2b03      	cmp	r3, #3
 800ae26:	d117      	bne.n	800ae58 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ae28:	7dba      	ldrb	r2, [r7, #22]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	32ae      	adds	r2, #174	; 0xae
 800ae2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00f      	beq.n	800ae58 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ae38:	7dba      	ldrb	r2, [r7, #22]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ae40:	7dba      	ldrb	r2, [r7, #22]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	32ae      	adds	r2, #174	; 0xae
 800ae46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	7afa      	ldrb	r2, [r7, #11]
 800ae4e:	4611      	mov	r1, r2
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	4798      	blx	r3
 800ae54:	4603      	mov	r3, r0
 800ae56:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ae58:	7dfb      	ldrb	r3, [r7, #23]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ae5e:	7dfb      	ldrb	r3, [r7, #23]
 800ae60:	e000      	b.n	800ae64 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	460b      	mov	r3, r1
 800ae76:	607a      	str	r2, [r7, #4]
 800ae78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ae7a:	7afb      	ldrb	r3, [r7, #11]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d16f      	bne.n	800af60 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3314      	adds	r3, #20
 800ae84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d15a      	bne.n	800af46 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	689a      	ldr	r2, [r3, #8]
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d914      	bls.n	800aec6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	689a      	ldr	r2, [r3, #8]
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	1ad2      	subs	r2, r2, r3
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	6879      	ldr	r1, [r7, #4]
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f001 f8ad 	bl	800c012 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aeb8:	2300      	movs	r3, #0
 800aeba:	2200      	movs	r2, #0
 800aebc:	2100      	movs	r1, #0
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f004 ff47 	bl	800fd52 <USBD_LL_PrepareReceive>
 800aec4:	e03f      	b.n	800af46 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	68da      	ldr	r2, [r3, #12]
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d11c      	bne.n	800af0c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d316      	bcc.n	800af0c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	685a      	ldr	r2, [r3, #4]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d20f      	bcs.n	800af0c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aeec:	2200      	movs	r2, #0
 800aeee:	2100      	movs	r1, #0
 800aef0:	68f8      	ldr	r0, [r7, #12]
 800aef2:	f001 f88e 	bl	800c012 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aefe:	2300      	movs	r3, #0
 800af00:	2200      	movs	r2, #0
 800af02:	2100      	movs	r1, #0
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f004 ff24 	bl	800fd52 <USBD_LL_PrepareReceive>
 800af0a:	e01c      	b.n	800af46 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b03      	cmp	r3, #3
 800af16:	d10f      	bne.n	800af38 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d009      	beq.n	800af38 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800af38:	2180      	movs	r1, #128	; 0x80
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f004 fe5f 	bl	800fbfe <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f001 f89b 	bl	800c07c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d03a      	beq.n	800afc6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f7ff fe42 	bl	800abda <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800af5e:	e032      	b.n	800afc6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800af60:	7afb      	ldrb	r3, [r7, #11]
 800af62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af66:	b2db      	uxtb	r3, r3
 800af68:	4619      	mov	r1, r3
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f000 f97f 	bl	800b26e <USBD_CoreFindEP>
 800af70:	4603      	mov	r3, r0
 800af72:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af74:	7dfb      	ldrb	r3, [r7, #23]
 800af76:	2bff      	cmp	r3, #255	; 0xff
 800af78:	d025      	beq.n	800afc6 <USBD_LL_DataInStage+0x15a>
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d122      	bne.n	800afc6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af86:	b2db      	uxtb	r3, r3
 800af88:	2b03      	cmp	r3, #3
 800af8a:	d11c      	bne.n	800afc6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800af8c:	7dfa      	ldrb	r2, [r7, #23]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	32ae      	adds	r2, #174	; 0xae
 800af92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af96:	695b      	ldr	r3, [r3, #20]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d014      	beq.n	800afc6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800af9c:	7dfa      	ldrb	r2, [r7, #23]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800afa4:	7dfa      	ldrb	r2, [r7, #23]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	32ae      	adds	r2, #174	; 0xae
 800afaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afae:	695b      	ldr	r3, [r3, #20]
 800afb0:	7afa      	ldrb	r2, [r7, #11]
 800afb2:	4611      	mov	r1, r2
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	4798      	blx	r3
 800afb8:	4603      	mov	r3, r0
 800afba:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800afbc:	7dbb      	ldrb	r3, [r7, #22]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800afc2:	7dbb      	ldrb	r3, [r7, #22]
 800afc4:	e000      	b.n	800afc8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3718      	adds	r7, #24
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d014      	beq.n	800b036 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00e      	beq.n	800b036 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	6852      	ldr	r2, [r2, #4]
 800b024:	b2d2      	uxtb	r2, r2
 800b026:	4611      	mov	r1, r2
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	4798      	blx	r3
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b032:	2303      	movs	r3, #3
 800b034:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b036:	2340      	movs	r3, #64	; 0x40
 800b038:	2200      	movs	r2, #0
 800b03a:	2100      	movs	r1, #0
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f004 fd7a 	bl	800fb36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2201      	movs	r2, #1
 800b046:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2240      	movs	r2, #64	; 0x40
 800b04e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b052:	2340      	movs	r3, #64	; 0x40
 800b054:	2200      	movs	r2, #0
 800b056:	2180      	movs	r1, #128	; 0x80
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f004 fd6c 	bl	800fb36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2201      	movs	r2, #1
 800b062:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2240      	movs	r2, #64	; 0x40
 800b068:	621a      	str	r2, [r3, #32]

  return ret;
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	460b      	mov	r3, r1
 800b07e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	78fa      	ldrb	r2, [r7, #3]
 800b084:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2204      	movs	r2, #4
 800b0ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b04      	cmp	r3, #4
 800b0d2:	d106      	bne.n	800b0e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b0da:	b2da      	uxtb	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2b03      	cmp	r3, #3
 800b102:	d110      	bne.n	800b126 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00b      	beq.n	800b126 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b114:	69db      	ldr	r3, [r3, #28]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d005      	beq.n	800b126 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b120:	69db      	ldr	r3, [r3, #28]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	460b      	mov	r3, r1
 800b13a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	32ae      	adds	r2, #174	; 0xae
 800b146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b14e:	2303      	movs	r3, #3
 800b150:	e01c      	b.n	800b18c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	d115      	bne.n	800b18a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	32ae      	adds	r2, #174	; 0xae
 800b168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00b      	beq.n	800b18a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	32ae      	adds	r2, #174	; 0xae
 800b17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	78fa      	ldrb	r2, [r7, #3]
 800b184:	4611      	mov	r1, r2
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	460b      	mov	r3, r1
 800b19e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	32ae      	adds	r2, #174	; 0xae
 800b1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	e01c      	b.n	800b1f0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d115      	bne.n	800b1ee <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	32ae      	adds	r2, #174	; 0xae
 800b1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00b      	beq.n	800b1ee <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	32ae      	adds	r2, #174	; 0xae
 800b1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e6:	78fa      	ldrb	r2, [r7, #3]
 800b1e8:	4611      	mov	r1, r2
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b084      	sub	sp, #16
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b216:	2300      	movs	r3, #0
 800b218:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00e      	beq.n	800b24a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	6852      	ldr	r2, [r2, #4]
 800b238:	b2d2      	uxtb	r2, r2
 800b23a:	4611      	mov	r1, r2
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	4798      	blx	r3
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d001      	beq.n	800b24a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b246:	2303      	movs	r3, #3
 800b248:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	460b      	mov	r3, r1
 800b25e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b260:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b262:	4618      	mov	r0, r3
 800b264:	370c      	adds	r7, #12
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr

0800b26e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b26e:	b480      	push	{r7}
 800b270:	b083      	sub	sp, #12
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	460b      	mov	r3, r1
 800b278:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b27a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	460b      	mov	r3, r1
 800b292:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b29c:	2300      	movs	r3, #0
 800b29e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	885b      	ldrh	r3, [r3, #2]
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d920      	bls.n	800b2f2 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b2b8:	e013      	b.n	800b2e2 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b2ba:	f107 030a 	add.w	r3, r7, #10
 800b2be:	4619      	mov	r1, r3
 800b2c0:	6978      	ldr	r0, [r7, #20]
 800b2c2:	f000 f81b 	bl	800b2fc <USBD_GetNextDesc>
 800b2c6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	785b      	ldrb	r3, [r3, #1]
 800b2cc:	2b05      	cmp	r3, #5
 800b2ce:	d108      	bne.n	800b2e2 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	789b      	ldrb	r3, [r3, #2]
 800b2d8:	78fa      	ldrb	r2, [r7, #3]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d008      	beq.n	800b2f0 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	885b      	ldrh	r3, [r3, #2]
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	897b      	ldrh	r3, [r7, #10]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d8e5      	bhi.n	800b2ba <USBD_GetEpDesc+0x32>
 800b2ee:	e000      	b.n	800b2f2 <USBD_GetEpDesc+0x6a>
          break;
 800b2f0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b2f2:	693b      	ldr	r3, [r7, #16]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	881a      	ldrh	r2, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	b29b      	uxth	r3, r3
 800b314:	4413      	add	r3, r2
 800b316:	b29a      	uxth	r2, r3
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	461a      	mov	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4413      	add	r3, r2
 800b326:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b328:	68fb      	ldr	r3, [r7, #12]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3714      	adds	r7, #20
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b336:	b480      	push	{r7}
 800b338:	b087      	sub	sp, #28
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	3301      	adds	r3, #1
 800b34c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b354:	8a3b      	ldrh	r3, [r7, #16]
 800b356:	021b      	lsls	r3, r3, #8
 800b358:	b21a      	sxth	r2, r3
 800b35a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b35e:	4313      	orrs	r3, r2
 800b360:	b21b      	sxth	r3, r3
 800b362:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b364:	89fb      	ldrh	r3, [r7, #14]
}
 800b366:	4618      	mov	r0, r3
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
	...

0800b374 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b38a:	2b40      	cmp	r3, #64	; 0x40
 800b38c:	d005      	beq.n	800b39a <USBD_StdDevReq+0x26>
 800b38e:	2b40      	cmp	r3, #64	; 0x40
 800b390:	d857      	bhi.n	800b442 <USBD_StdDevReq+0xce>
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00f      	beq.n	800b3b6 <USBD_StdDevReq+0x42>
 800b396:	2b20      	cmp	r3, #32
 800b398:	d153      	bne.n	800b442 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	32ae      	adds	r2, #174	; 0xae
 800b3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	4798      	blx	r3
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3b4:	e04a      	b.n	800b44c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	785b      	ldrb	r3, [r3, #1]
 800b3ba:	2b09      	cmp	r3, #9
 800b3bc:	d83b      	bhi.n	800b436 <USBD_StdDevReq+0xc2>
 800b3be:	a201      	add	r2, pc, #4	; (adr r2, 800b3c4 <USBD_StdDevReq+0x50>)
 800b3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c4:	0800b419 	.word	0x0800b419
 800b3c8:	0800b42d 	.word	0x0800b42d
 800b3cc:	0800b437 	.word	0x0800b437
 800b3d0:	0800b423 	.word	0x0800b423
 800b3d4:	0800b437 	.word	0x0800b437
 800b3d8:	0800b3f7 	.word	0x0800b3f7
 800b3dc:	0800b3ed 	.word	0x0800b3ed
 800b3e0:	0800b437 	.word	0x0800b437
 800b3e4:	0800b40f 	.word	0x0800b40f
 800b3e8:	0800b401 	.word	0x0800b401
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa3c 	bl	800b86c <USBD_GetDescriptor>
          break;
 800b3f4:	e024      	b.n	800b440 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fba1 	bl	800bb40 <USBD_SetAddress>
          break;
 800b3fe:	e01f      	b.n	800b440 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fbe0 	bl	800bbc8 <USBD_SetConfig>
 800b408:	4603      	mov	r3, r0
 800b40a:	73fb      	strb	r3, [r7, #15]
          break;
 800b40c:	e018      	b.n	800b440 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fc83 	bl	800bd1c <USBD_GetConfig>
          break;
 800b416:	e013      	b.n	800b440 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b418:	6839      	ldr	r1, [r7, #0]
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fcb4 	bl	800bd88 <USBD_GetStatus>
          break;
 800b420:	e00e      	b.n	800b440 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fce3 	bl	800bdf0 <USBD_SetFeature>
          break;
 800b42a:	e009      	b.n	800b440 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b42c:	6839      	ldr	r1, [r7, #0]
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 fd07 	bl	800be42 <USBD_ClrFeature>
          break;
 800b434:	e004      	b.n	800b440 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fd5e 	bl	800befa <USBD_CtlError>
          break;
 800b43e:	bf00      	nop
      }
      break;
 800b440:	e004      	b.n	800b44c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 fd58 	bl	800befa <USBD_CtlError>
      break;
 800b44a:	bf00      	nop
  }

  return ret;
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop

0800b458 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b46e:	2b40      	cmp	r3, #64	; 0x40
 800b470:	d005      	beq.n	800b47e <USBD_StdItfReq+0x26>
 800b472:	2b40      	cmp	r3, #64	; 0x40
 800b474:	d852      	bhi.n	800b51c <USBD_StdItfReq+0xc4>
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <USBD_StdItfReq+0x26>
 800b47a:	2b20      	cmp	r3, #32
 800b47c:	d14e      	bne.n	800b51c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b484:	b2db      	uxtb	r3, r3
 800b486:	3b01      	subs	r3, #1
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d840      	bhi.n	800b50e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	889b      	ldrh	r3, [r3, #4]
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b01      	cmp	r3, #1
 800b494:	d836      	bhi.n	800b504 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	889b      	ldrh	r3, [r3, #4]
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	4619      	mov	r1, r3
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7ff fed8 	bl	800b254 <USBD_CoreFindIF>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4a8:	7bbb      	ldrb	r3, [r7, #14]
 800b4aa:	2bff      	cmp	r3, #255	; 0xff
 800b4ac:	d01d      	beq.n	800b4ea <USBD_StdItfReq+0x92>
 800b4ae:	7bbb      	ldrb	r3, [r7, #14]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d11a      	bne.n	800b4ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b4b4:	7bba      	ldrb	r2, [r7, #14]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	32ae      	adds	r2, #174	; 0xae
 800b4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00f      	beq.n	800b4e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b4c4:	7bba      	ldrb	r2, [r7, #14]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b4cc:	7bba      	ldrb	r2, [r7, #14]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	32ae      	adds	r2, #174	; 0xae
 800b4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	6839      	ldr	r1, [r7, #0]
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	4798      	blx	r3
 800b4de:	4603      	mov	r3, r0
 800b4e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4e2:	e004      	b.n	800b4ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b4e8:	e001      	b.n	800b4ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	88db      	ldrh	r3, [r3, #6]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d110      	bne.n	800b518 <USBD_StdItfReq+0xc0>
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10d      	bne.n	800b518 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fdaa 	bl	800c056 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b502:	e009      	b.n	800b518 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 fcf7 	bl	800befa <USBD_CtlError>
          break;
 800b50c:	e004      	b.n	800b518 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b50e:	6839      	ldr	r1, [r7, #0]
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fcf2 	bl	800befa <USBD_CtlError>
          break;
 800b516:	e000      	b.n	800b51a <USBD_StdItfReq+0xc2>
          break;
 800b518:	bf00      	nop
      }
      break;
 800b51a:	e004      	b.n	800b526 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fceb 	bl	800befa <USBD_CtlError>
      break;
 800b524:	bf00      	nop
  }

  return ret;
 800b526:	7bfb      	ldrb	r3, [r7, #15]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	889b      	ldrh	r3, [r3, #4]
 800b542:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b54c:	2b40      	cmp	r3, #64	; 0x40
 800b54e:	d007      	beq.n	800b560 <USBD_StdEPReq+0x30>
 800b550:	2b40      	cmp	r3, #64	; 0x40
 800b552:	f200 817f 	bhi.w	800b854 <USBD_StdEPReq+0x324>
 800b556:	2b00      	cmp	r3, #0
 800b558:	d02a      	beq.n	800b5b0 <USBD_StdEPReq+0x80>
 800b55a:	2b20      	cmp	r3, #32
 800b55c:	f040 817a 	bne.w	800b854 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b560:	7bbb      	ldrb	r3, [r7, #14]
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7ff fe82 	bl	800b26e <USBD_CoreFindEP>
 800b56a:	4603      	mov	r3, r0
 800b56c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b56e:	7b7b      	ldrb	r3, [r7, #13]
 800b570:	2bff      	cmp	r3, #255	; 0xff
 800b572:	f000 8174 	beq.w	800b85e <USBD_StdEPReq+0x32e>
 800b576:	7b7b      	ldrb	r3, [r7, #13]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f040 8170 	bne.w	800b85e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b57e:	7b7a      	ldrb	r2, [r7, #13]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b586:	7b7a      	ldrb	r2, [r7, #13]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	32ae      	adds	r2, #174	; 0xae
 800b58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	f000 8163 	beq.w	800b85e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b598:	7b7a      	ldrb	r2, [r7, #13]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	32ae      	adds	r2, #174	; 0xae
 800b59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	6839      	ldr	r1, [r7, #0]
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	4798      	blx	r3
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b5ae:	e156      	b.n	800b85e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	785b      	ldrb	r3, [r3, #1]
 800b5b4:	2b03      	cmp	r3, #3
 800b5b6:	d008      	beq.n	800b5ca <USBD_StdEPReq+0x9a>
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	f300 8145 	bgt.w	800b848 <USBD_StdEPReq+0x318>
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 809b 	beq.w	800b6fa <USBD_StdEPReq+0x1ca>
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d03c      	beq.n	800b642 <USBD_StdEPReq+0x112>
 800b5c8:	e13e      	b.n	800b848 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	d002      	beq.n	800b5dc <USBD_StdEPReq+0xac>
 800b5d6:	2b03      	cmp	r3, #3
 800b5d8:	d016      	beq.n	800b608 <USBD_StdEPReq+0xd8>
 800b5da:	e02c      	b.n	800b636 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5dc:	7bbb      	ldrb	r3, [r7, #14]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00d      	beq.n	800b5fe <USBD_StdEPReq+0xce>
 800b5e2:	7bbb      	ldrb	r3, [r7, #14]
 800b5e4:	2b80      	cmp	r3, #128	; 0x80
 800b5e6:	d00a      	beq.n	800b5fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f004 fb06 	bl	800fbfe <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5f2:	2180      	movs	r1, #128	; 0x80
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f004 fb02 	bl	800fbfe <USBD_LL_StallEP>
 800b5fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5fc:	e020      	b.n	800b640 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fc7a 	bl	800befa <USBD_CtlError>
              break;
 800b606:	e01b      	b.n	800b640 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	885b      	ldrh	r3, [r3, #2]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10e      	bne.n	800b62e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00b      	beq.n	800b62e <USBD_StdEPReq+0xfe>
 800b616:	7bbb      	ldrb	r3, [r7, #14]
 800b618:	2b80      	cmp	r3, #128	; 0x80
 800b61a:	d008      	beq.n	800b62e <USBD_StdEPReq+0xfe>
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	88db      	ldrh	r3, [r3, #6]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d104      	bne.n	800b62e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b624:	7bbb      	ldrb	r3, [r7, #14]
 800b626:	4619      	mov	r1, r3
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f004 fae8 	bl	800fbfe <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fd11 	bl	800c056 <USBD_CtlSendStatus>

              break;
 800b634:	e004      	b.n	800b640 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fc5e 	bl	800befa <USBD_CtlError>
              break;
 800b63e:	bf00      	nop
          }
          break;
 800b640:	e107      	b.n	800b852 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d002      	beq.n	800b654 <USBD_StdEPReq+0x124>
 800b64e:	2b03      	cmp	r3, #3
 800b650:	d016      	beq.n	800b680 <USBD_StdEPReq+0x150>
 800b652:	e04b      	b.n	800b6ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b654:	7bbb      	ldrb	r3, [r7, #14]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00d      	beq.n	800b676 <USBD_StdEPReq+0x146>
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
 800b65c:	2b80      	cmp	r3, #128	; 0x80
 800b65e:	d00a      	beq.n	800b676 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b660:	7bbb      	ldrb	r3, [r7, #14]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f004 faca 	bl	800fbfe <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b66a:	2180      	movs	r1, #128	; 0x80
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f004 fac6 	bl	800fbfe <USBD_LL_StallEP>
 800b672:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b674:	e040      	b.n	800b6f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b676:	6839      	ldr	r1, [r7, #0]
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fc3e 	bl	800befa <USBD_CtlError>
              break;
 800b67e:	e03b      	b.n	800b6f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	885b      	ldrh	r3, [r3, #2]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d136      	bne.n	800b6f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b688:	7bbb      	ldrb	r3, [r7, #14]
 800b68a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d004      	beq.n	800b69c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b692:	7bbb      	ldrb	r3, [r7, #14]
 800b694:	4619      	mov	r1, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f004 fad0 	bl	800fc3c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fcda 	bl	800c056 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff fde1 	bl	800b26e <USBD_CoreFindEP>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6b0:	7b7b      	ldrb	r3, [r7, #13]
 800b6b2:	2bff      	cmp	r3, #255	; 0xff
 800b6b4:	d01f      	beq.n	800b6f6 <USBD_StdEPReq+0x1c6>
 800b6b6:	7b7b      	ldrb	r3, [r7, #13]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d11c      	bne.n	800b6f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b6bc:	7b7a      	ldrb	r2, [r7, #13]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b6c4:	7b7a      	ldrb	r2, [r7, #13]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	32ae      	adds	r2, #174	; 0xae
 800b6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d010      	beq.n	800b6f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b6d4:	7b7a      	ldrb	r2, [r7, #13]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	32ae      	adds	r2, #174	; 0xae
 800b6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	4798      	blx	r3
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b6ea:	e004      	b.n	800b6f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fc03 	bl	800befa <USBD_CtlError>
              break;
 800b6f4:	e000      	b.n	800b6f8 <USBD_StdEPReq+0x1c8>
              break;
 800b6f6:	bf00      	nop
          }
          break;
 800b6f8:	e0ab      	b.n	800b852 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b700:	b2db      	uxtb	r3, r3
 800b702:	2b02      	cmp	r3, #2
 800b704:	d002      	beq.n	800b70c <USBD_StdEPReq+0x1dc>
 800b706:	2b03      	cmp	r3, #3
 800b708:	d032      	beq.n	800b770 <USBD_StdEPReq+0x240>
 800b70a:	e097      	b.n	800b83c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b70c:	7bbb      	ldrb	r3, [r7, #14]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d007      	beq.n	800b722 <USBD_StdEPReq+0x1f2>
 800b712:	7bbb      	ldrb	r3, [r7, #14]
 800b714:	2b80      	cmp	r3, #128	; 0x80
 800b716:	d004      	beq.n	800b722 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b718:	6839      	ldr	r1, [r7, #0]
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 fbed 	bl	800befa <USBD_CtlError>
                break;
 800b720:	e091      	b.n	800b846 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b726:	2b00      	cmp	r3, #0
 800b728:	da0b      	bge.n	800b742 <USBD_StdEPReq+0x212>
 800b72a:	7bbb      	ldrb	r3, [r7, #14]
 800b72c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b730:	4613      	mov	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	3310      	adds	r3, #16
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	4413      	add	r3, r2
 800b73e:	3304      	adds	r3, #4
 800b740:	e00b      	b.n	800b75a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b742:	7bbb      	ldrb	r3, [r7, #14]
 800b744:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b748:	4613      	mov	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4413      	add	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	4413      	add	r3, r2
 800b758:	3304      	adds	r3, #4
 800b75a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2200      	movs	r2, #0
 800b760:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2202      	movs	r2, #2
 800b766:	4619      	mov	r1, r3
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fc37 	bl	800bfdc <USBD_CtlSendData>
              break;
 800b76e:	e06a      	b.n	800b846 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b774:	2b00      	cmp	r3, #0
 800b776:	da11      	bge.n	800b79c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b778:	7bbb      	ldrb	r3, [r7, #14]
 800b77a:	f003 020f 	and.w	r2, r3, #15
 800b77e:	6879      	ldr	r1, [r7, #4]
 800b780:	4613      	mov	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	4413      	add	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	440b      	add	r3, r1
 800b78a:	3324      	adds	r3, #36	; 0x24
 800b78c:	881b      	ldrh	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d117      	bne.n	800b7c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fbb0 	bl	800befa <USBD_CtlError>
                  break;
 800b79a:	e054      	b.n	800b846 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b79c:	7bbb      	ldrb	r3, [r7, #14]
 800b79e:	f003 020f 	and.w	r2, r3, #15
 800b7a2:	6879      	ldr	r1, [r7, #4]
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4413      	add	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	440b      	add	r3, r1
 800b7ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b7b2:	881b      	ldrh	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d104      	bne.n	800b7c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fb9d 	bl	800befa <USBD_CtlError>
                  break;
 800b7c0:	e041      	b.n	800b846 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	da0b      	bge.n	800b7e2 <USBD_StdEPReq+0x2b2>
 800b7ca:	7bbb      	ldrb	r3, [r7, #14]
 800b7cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	3310      	adds	r3, #16
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	4413      	add	r3, r2
 800b7de:	3304      	adds	r3, #4
 800b7e0:	e00b      	b.n	800b7fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b7e2:	7bbb      	ldrb	r3, [r7, #14]
 800b7e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d002      	beq.n	800b808 <USBD_StdEPReq+0x2d8>
 800b802:	7bbb      	ldrb	r3, [r7, #14]
 800b804:	2b80      	cmp	r3, #128	; 0x80
 800b806:	d103      	bne.n	800b810 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2200      	movs	r2, #0
 800b80c:	601a      	str	r2, [r3, #0]
 800b80e:	e00e      	b.n	800b82e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b810:	7bbb      	ldrb	r3, [r7, #14]
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f004 fa30 	bl	800fc7a <USBD_LL_IsStallEP>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d003      	beq.n	800b828 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2201      	movs	r2, #1
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	e002      	b.n	800b82e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	2200      	movs	r2, #0
 800b82c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	2202      	movs	r2, #2
 800b832:	4619      	mov	r1, r3
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fbd1 	bl	800bfdc <USBD_CtlSendData>
              break;
 800b83a:	e004      	b.n	800b846 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b83c:	6839      	ldr	r1, [r7, #0]
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fb5b 	bl	800befa <USBD_CtlError>
              break;
 800b844:	bf00      	nop
          }
          break;
 800b846:	e004      	b.n	800b852 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b848:	6839      	ldr	r1, [r7, #0]
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 fb55 	bl	800befa <USBD_CtlError>
          break;
 800b850:	bf00      	nop
      }
      break;
 800b852:	e005      	b.n	800b860 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b854:	6839      	ldr	r1, [r7, #0]
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 fb4f 	bl	800befa <USBD_CtlError>
      break;
 800b85c:	e000      	b.n	800b860 <USBD_StdEPReq+0x330>
      break;
 800b85e:	bf00      	nop
  }

  return ret;
 800b860:	7bfb      	ldrb	r3, [r7, #15]
}
 800b862:	4618      	mov	r0, r3
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
	...

0800b86c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b876:	2300      	movs	r3, #0
 800b878:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b87e:	2300      	movs	r3, #0
 800b880:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	885b      	ldrh	r3, [r3, #2]
 800b886:	0a1b      	lsrs	r3, r3, #8
 800b888:	b29b      	uxth	r3, r3
 800b88a:	3b01      	subs	r3, #1
 800b88c:	2b06      	cmp	r3, #6
 800b88e:	f200 8128 	bhi.w	800bae2 <USBD_GetDescriptor+0x276>
 800b892:	a201      	add	r2, pc, #4	; (adr r2, 800b898 <USBD_GetDescriptor+0x2c>)
 800b894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b898:	0800b8b5 	.word	0x0800b8b5
 800b89c:	0800b8cd 	.word	0x0800b8cd
 800b8a0:	0800b90d 	.word	0x0800b90d
 800b8a4:	0800bae3 	.word	0x0800bae3
 800b8a8:	0800bae3 	.word	0x0800bae3
 800b8ac:	0800ba83 	.word	0x0800ba83
 800b8b0:	0800baaf 	.word	0x0800baaf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	7c12      	ldrb	r2, [r2, #16]
 800b8c0:	f107 0108 	add.w	r1, r7, #8
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	4798      	blx	r3
 800b8c8:	60f8      	str	r0, [r7, #12]
      break;
 800b8ca:	e112      	b.n	800baf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	7c1b      	ldrb	r3, [r3, #16]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10d      	bne.n	800b8f0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8dc:	f107 0208 	add.w	r2, r7, #8
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	4798      	blx	r3
 800b8e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b8ee:	e100      	b.n	800baf2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f8:	f107 0208 	add.w	r2, r7, #8
 800b8fc:	4610      	mov	r0, r2
 800b8fe:	4798      	blx	r3
 800b900:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	3301      	adds	r3, #1
 800b906:	2202      	movs	r2, #2
 800b908:	701a      	strb	r2, [r3, #0]
      break;
 800b90a:	e0f2      	b.n	800baf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	885b      	ldrh	r3, [r3, #2]
 800b910:	b2db      	uxtb	r3, r3
 800b912:	2b05      	cmp	r3, #5
 800b914:	f200 80ac 	bhi.w	800ba70 <USBD_GetDescriptor+0x204>
 800b918:	a201      	add	r2, pc, #4	; (adr r2, 800b920 <USBD_GetDescriptor+0xb4>)
 800b91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91e:	bf00      	nop
 800b920:	0800b939 	.word	0x0800b939
 800b924:	0800b96d 	.word	0x0800b96d
 800b928:	0800b9a1 	.word	0x0800b9a1
 800b92c:	0800b9d5 	.word	0x0800b9d5
 800b930:	0800ba09 	.word	0x0800ba09
 800b934:	0800ba3d 	.word	0x0800ba3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00b      	beq.n	800b95c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	7c12      	ldrb	r2, [r2, #16]
 800b950:	f107 0108 	add.w	r1, r7, #8
 800b954:	4610      	mov	r0, r2
 800b956:	4798      	blx	r3
 800b958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b95a:	e091      	b.n	800ba80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 facb 	bl	800befa <USBD_CtlError>
            err++;
 800b964:	7afb      	ldrb	r3, [r7, #11]
 800b966:	3301      	adds	r3, #1
 800b968:	72fb      	strb	r3, [r7, #11]
          break;
 800b96a:	e089      	b.n	800ba80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00b      	beq.n	800b990 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	7c12      	ldrb	r2, [r2, #16]
 800b984:	f107 0108 	add.w	r1, r7, #8
 800b988:	4610      	mov	r0, r2
 800b98a:	4798      	blx	r3
 800b98c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b98e:	e077      	b.n	800ba80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b990:	6839      	ldr	r1, [r7, #0]
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 fab1 	bl	800befa <USBD_CtlError>
            err++;
 800b998:	7afb      	ldrb	r3, [r7, #11]
 800b99a:	3301      	adds	r3, #1
 800b99c:	72fb      	strb	r3, [r7, #11]
          break;
 800b99e:	e06f      	b.n	800ba80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00b      	beq.n	800b9c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	7c12      	ldrb	r2, [r2, #16]
 800b9b8:	f107 0108 	add.w	r1, r7, #8
 800b9bc:	4610      	mov	r0, r2
 800b9be:	4798      	blx	r3
 800b9c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9c2:	e05d      	b.n	800ba80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9c4:	6839      	ldr	r1, [r7, #0]
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 fa97 	bl	800befa <USBD_CtlError>
            err++;
 800b9cc:	7afb      	ldrb	r3, [r7, #11]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b9d2:	e055      	b.n	800ba80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00b      	beq.n	800b9f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	7c12      	ldrb	r2, [r2, #16]
 800b9ec:	f107 0108 	add.w	r1, r7, #8
 800b9f0:	4610      	mov	r0, r2
 800b9f2:	4798      	blx	r3
 800b9f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9f6:	e043      	b.n	800ba80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fa7d 	bl	800befa <USBD_CtlError>
            err++;
 800ba00:	7afb      	ldrb	r3, [r7, #11]
 800ba02:	3301      	adds	r3, #1
 800ba04:	72fb      	strb	r3, [r7, #11]
          break;
 800ba06:	e03b      	b.n	800ba80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba0e:	695b      	ldr	r3, [r3, #20]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00b      	beq.n	800ba2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	7c12      	ldrb	r2, [r2, #16]
 800ba20:	f107 0108 	add.w	r1, r7, #8
 800ba24:	4610      	mov	r0, r2
 800ba26:	4798      	blx	r3
 800ba28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba2a:	e029      	b.n	800ba80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba2c:	6839      	ldr	r1, [r7, #0]
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 fa63 	bl	800befa <USBD_CtlError>
            err++;
 800ba34:	7afb      	ldrb	r3, [r7, #11]
 800ba36:	3301      	adds	r3, #1
 800ba38:	72fb      	strb	r3, [r7, #11]
          break;
 800ba3a:	e021      	b.n	800ba80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00b      	beq.n	800ba60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	7c12      	ldrb	r2, [r2, #16]
 800ba54:	f107 0108 	add.w	r1, r7, #8
 800ba58:	4610      	mov	r0, r2
 800ba5a:	4798      	blx	r3
 800ba5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba5e:	e00f      	b.n	800ba80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 fa49 	bl	800befa <USBD_CtlError>
            err++;
 800ba68:	7afb      	ldrb	r3, [r7, #11]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	72fb      	strb	r3, [r7, #11]
          break;
 800ba6e:	e007      	b.n	800ba80 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fa41 	bl	800befa <USBD_CtlError>
          err++;
 800ba78:	7afb      	ldrb	r3, [r7, #11]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ba7e:	bf00      	nop
      }
      break;
 800ba80:	e037      	b.n	800baf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	7c1b      	ldrb	r3, [r3, #16]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d109      	bne.n	800ba9e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba92:	f107 0208 	add.w	r2, r7, #8
 800ba96:	4610      	mov	r0, r2
 800ba98:	4798      	blx	r3
 800ba9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba9c:	e029      	b.n	800baf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fa2a 	bl	800befa <USBD_CtlError>
        err++;
 800baa6:	7afb      	ldrb	r3, [r7, #11]
 800baa8:	3301      	adds	r3, #1
 800baaa:	72fb      	strb	r3, [r7, #11]
      break;
 800baac:	e021      	b.n	800baf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	7c1b      	ldrb	r3, [r3, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10d      	bne.n	800bad2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800babc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800babe:	f107 0208 	add.w	r2, r7, #8
 800bac2:	4610      	mov	r0, r2
 800bac4:	4798      	blx	r3
 800bac6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	3301      	adds	r3, #1
 800bacc:	2207      	movs	r2, #7
 800bace:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bad0:	e00f      	b.n	800baf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fa10 	bl	800befa <USBD_CtlError>
        err++;
 800bada:	7afb      	ldrb	r3, [r7, #11]
 800badc:	3301      	adds	r3, #1
 800bade:	72fb      	strb	r3, [r7, #11]
      break;
 800bae0:	e007      	b.n	800baf2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bae2:	6839      	ldr	r1, [r7, #0]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fa08 	bl	800befa <USBD_CtlError>
      err++;
 800baea:	7afb      	ldrb	r3, [r7, #11]
 800baec:	3301      	adds	r3, #1
 800baee:	72fb      	strb	r3, [r7, #11]
      break;
 800baf0:	bf00      	nop
  }

  if (err != 0U)
 800baf2:	7afb      	ldrb	r3, [r7, #11]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d11e      	bne.n	800bb36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	88db      	ldrh	r3, [r3, #6]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d016      	beq.n	800bb2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bb00:	893b      	ldrh	r3, [r7, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00e      	beq.n	800bb24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	88da      	ldrh	r2, [r3, #6]
 800bb0a:	893b      	ldrh	r3, [r7, #8]
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	bf28      	it	cs
 800bb10:	4613      	movcs	r3, r2
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bb16:	893b      	ldrh	r3, [r7, #8]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	68f9      	ldr	r1, [r7, #12]
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fa5d 	bl	800bfdc <USBD_CtlSendData>
 800bb22:	e009      	b.n	800bb38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bb24:	6839      	ldr	r1, [r7, #0]
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 f9e7 	bl	800befa <USBD_CtlError>
 800bb2c:	e004      	b.n	800bb38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fa91 	bl	800c056 <USBD_CtlSendStatus>
 800bb34:	e000      	b.n	800bb38 <USBD_GetDescriptor+0x2cc>
    return;
 800bb36:	bf00      	nop
  }
}
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop

0800bb40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	889b      	ldrh	r3, [r3, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d131      	bne.n	800bbb6 <USBD_SetAddress+0x76>
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	88db      	ldrh	r3, [r3, #6]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d12d      	bne.n	800bbb6 <USBD_SetAddress+0x76>
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	885b      	ldrh	r3, [r3, #2]
 800bb5e:	2b7f      	cmp	r3, #127	; 0x7f
 800bb60:	d829      	bhi.n	800bbb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	885b      	ldrh	r3, [r3, #2]
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b03      	cmp	r3, #3
 800bb78:	d104      	bne.n	800bb84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bb7a:	6839      	ldr	r1, [r7, #0]
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 f9bc 	bl	800befa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb82:	e01d      	b.n	800bbc0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	7bfa      	ldrb	r2, [r7, #15]
 800bb88:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f004 f89e 	bl	800fcd2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fa5d 	bl	800c056 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d004      	beq.n	800bbac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2202      	movs	r2, #2
 800bba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbaa:	e009      	b.n	800bbc0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbb4:	e004      	b.n	800bbc0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f99e 	bl	800befa <USBD_CtlError>
  }
}
 800bbbe:	bf00      	nop
 800bbc0:	bf00      	nop
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	885b      	ldrh	r3, [r3, #2]
 800bbda:	b2da      	uxtb	r2, r3
 800bbdc:	4b4e      	ldr	r3, [pc, #312]	; (800bd18 <USBD_SetConfig+0x150>)
 800bbde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bbe0:	4b4d      	ldr	r3, [pc, #308]	; (800bd18 <USBD_SetConfig+0x150>)
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d905      	bls.n	800bbf4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f985 	bl	800befa <USBD_CtlError>
    return USBD_FAIL;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e08c      	b.n	800bd0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbfa:	b2db      	uxtb	r3, r3
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d002      	beq.n	800bc06 <USBD_SetConfig+0x3e>
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	d029      	beq.n	800bc58 <USBD_SetConfig+0x90>
 800bc04:	e075      	b.n	800bcf2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bc06:	4b44      	ldr	r3, [pc, #272]	; (800bd18 <USBD_SetConfig+0x150>)
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d020      	beq.n	800bc50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bc0e:	4b42      	ldr	r3, [pc, #264]	; (800bd18 <USBD_SetConfig+0x150>)
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	461a      	mov	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc18:	4b3f      	ldr	r3, [pc, #252]	; (800bd18 <USBD_SetConfig+0x150>)
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f7fe ffe6 	bl	800abf0 <USBD_SetClassConfig>
 800bc24:	4603      	mov	r3, r0
 800bc26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d008      	beq.n	800bc40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f962 	bl	800befa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2202      	movs	r2, #2
 800bc3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc3e:	e065      	b.n	800bd0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fa08 	bl	800c056 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2203      	movs	r2, #3
 800bc4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bc4e:	e05d      	b.n	800bd0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 fa00 	bl	800c056 <USBD_CtlSendStatus>
      break;
 800bc56:	e059      	b.n	800bd0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bc58:	4b2f      	ldr	r3, [pc, #188]	; (800bd18 <USBD_SetConfig+0x150>)
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d112      	bne.n	800bc86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2202      	movs	r2, #2
 800bc64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bc68:	4b2b      	ldr	r3, [pc, #172]	; (800bd18 <USBD_SetConfig+0x150>)
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc72:	4b29      	ldr	r3, [pc, #164]	; (800bd18 <USBD_SetConfig+0x150>)
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	4619      	mov	r1, r3
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7fe ffd5 	bl	800ac28 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f9e9 	bl	800c056 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc84:	e042      	b.n	800bd0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bc86:	4b24      	ldr	r3, [pc, #144]	; (800bd18 <USBD_SetConfig+0x150>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d02a      	beq.n	800bcea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f7fe ffc3 	bl	800ac28 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bca2:	4b1d      	ldr	r3, [pc, #116]	; (800bd18 <USBD_SetConfig+0x150>)
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	461a      	mov	r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bcac:	4b1a      	ldr	r3, [pc, #104]	; (800bd18 <USBD_SetConfig+0x150>)
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7fe ff9c 	bl	800abf0 <USBD_SetClassConfig>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00f      	beq.n	800bce2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bcc2:	6839      	ldr	r1, [r7, #0]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 f918 	bl	800befa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7fe ffa8 	bl	800ac28 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2202      	movs	r2, #2
 800bcdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bce0:	e014      	b.n	800bd0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f9b7 	bl	800c056 <USBD_CtlSendStatus>
      break;
 800bce8:	e010      	b.n	800bd0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f9b3 	bl	800c056 <USBD_CtlSendStatus>
      break;
 800bcf0:	e00c      	b.n	800bd0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 f900 	bl	800befa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bcfa:	4b07      	ldr	r3, [pc, #28]	; (800bd18 <USBD_SetConfig+0x150>)
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7fe ff91 	bl	800ac28 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bd06:	2303      	movs	r3, #3
 800bd08:	73fb      	strb	r3, [r7, #15]
      break;
 800bd0a:	bf00      	nop
  }

  return ret;
 800bd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	200024ec 	.word	0x200024ec

0800bd1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	88db      	ldrh	r3, [r3, #6]
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d004      	beq.n	800bd38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bd2e:	6839      	ldr	r1, [r7, #0]
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 f8e2 	bl	800befa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bd36:	e023      	b.n	800bd80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	dc02      	bgt.n	800bd4a <USBD_GetConfig+0x2e>
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	dc03      	bgt.n	800bd50 <USBD_GetConfig+0x34>
 800bd48:	e015      	b.n	800bd76 <USBD_GetConfig+0x5a>
 800bd4a:	2b03      	cmp	r3, #3
 800bd4c:	d00b      	beq.n	800bd66 <USBD_GetConfig+0x4a>
 800bd4e:	e012      	b.n	800bd76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	3308      	adds	r3, #8
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f93c 	bl	800bfdc <USBD_CtlSendData>
        break;
 800bd64:	e00c      	b.n	800bd80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	3304      	adds	r3, #4
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 f934 	bl	800bfdc <USBD_CtlSendData>
        break;
 800bd74:	e004      	b.n	800bd80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 f8be 	bl	800befa <USBD_CtlError>
        break;
 800bd7e:	bf00      	nop
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	3b01      	subs	r3, #1
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d81e      	bhi.n	800bdde <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	88db      	ldrh	r3, [r3, #6]
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d004      	beq.n	800bdb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 f8a5 	bl	800befa <USBD_CtlError>
        break;
 800bdb0:	e01a      	b.n	800bde8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d005      	beq.n	800bdce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	f043 0202 	orr.w	r2, r3, #2
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	330c      	adds	r3, #12
 800bdd2:	2202      	movs	r2, #2
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f900 	bl	800bfdc <USBD_CtlSendData>
      break;
 800bddc:	e004      	b.n	800bde8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 f88a 	bl	800befa <USBD_CtlError>
      break;
 800bde6:	bf00      	nop
  }
}
 800bde8:	bf00      	nop
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	885b      	ldrh	r3, [r3, #2]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d107      	bne.n	800be12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2201      	movs	r2, #1
 800be06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f923 	bl	800c056 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800be10:	e013      	b.n	800be3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	885b      	ldrh	r3, [r3, #2]
 800be16:	2b02      	cmp	r3, #2
 800be18:	d10b      	bne.n	800be32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	889b      	ldrh	r3, [r3, #4]
 800be1e:	0a1b      	lsrs	r3, r3, #8
 800be20:	b29b      	uxth	r3, r3
 800be22:	b2da      	uxtb	r2, r3
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f913 	bl	800c056 <USBD_CtlSendStatus>
}
 800be30:	e003      	b.n	800be3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 f860 	bl	800befa <USBD_CtlError>
}
 800be3a:	bf00      	nop
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b082      	sub	sp, #8
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be52:	b2db      	uxtb	r3, r3
 800be54:	3b01      	subs	r3, #1
 800be56:	2b02      	cmp	r3, #2
 800be58:	d80b      	bhi.n	800be72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	885b      	ldrh	r3, [r3, #2]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d10c      	bne.n	800be7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 f8f3 	bl	800c056 <USBD_CtlSendStatus>
      }
      break;
 800be70:	e004      	b.n	800be7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800be72:	6839      	ldr	r1, [r7, #0]
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 f840 	bl	800befa <USBD_CtlError>
      break;
 800be7a:	e000      	b.n	800be7e <USBD_ClrFeature+0x3c>
      break;
 800be7c:	bf00      	nop
  }
}
 800be7e:	bf00      	nop
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	781a      	ldrb	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	3301      	adds	r3, #1
 800bea0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	781a      	ldrb	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	3301      	adds	r3, #1
 800beae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f7ff fa40 	bl	800b336 <SWAPBYTE>
 800beb6:	4603      	mov	r3, r0
 800beb8:	461a      	mov	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	3301      	adds	r3, #1
 800bec2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	3301      	adds	r3, #1
 800bec8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f7ff fa33 	bl	800b336 <SWAPBYTE>
 800bed0:	4603      	mov	r3, r0
 800bed2:	461a      	mov	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	3301      	adds	r3, #1
 800bedc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3301      	adds	r3, #1
 800bee2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f7ff fa26 	bl	800b336 <SWAPBYTE>
 800beea:	4603      	mov	r3, r0
 800beec:	461a      	mov	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	80da      	strh	r2, [r3, #6]
}
 800bef2:	bf00      	nop
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b082      	sub	sp, #8
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
 800bf02:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf04:	2180      	movs	r1, #128	; 0x80
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f003 fe79 	bl	800fbfe <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f003 fe75 	bl	800fbfe <USBD_LL_StallEP>
}
 800bf14:	bf00      	nop
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d036      	beq.n	800bfa0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bf36:	6938      	ldr	r0, [r7, #16]
 800bf38:	f000 f836 	bl	800bfa8 <USBD_GetLen>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	3301      	adds	r3, #1
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	005b      	lsls	r3, r3, #1
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	4413      	add	r3, r2
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	7812      	ldrb	r2, [r2, #0]
 800bf54:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf56:	7dfb      	ldrb	r3, [r7, #23]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bf5c:	7dfb      	ldrb	r3, [r7, #23]
 800bf5e:	68ba      	ldr	r2, [r7, #8]
 800bf60:	4413      	add	r3, r2
 800bf62:	2203      	movs	r2, #3
 800bf64:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf66:	7dfb      	ldrb	r3, [r7, #23]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bf6c:	e013      	b.n	800bf96 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	4413      	add	r3, r2
 800bf74:	693a      	ldr	r2, [r7, #16]
 800bf76:	7812      	ldrb	r2, [r2, #0]
 800bf78:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	613b      	str	r3, [r7, #16]
    idx++;
 800bf80:	7dfb      	ldrb	r3, [r7, #23]
 800bf82:	3301      	adds	r3, #1
 800bf84:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf90:	7dfb      	ldrb	r3, [r7, #23]
 800bf92:	3301      	adds	r3, #1
 800bf94:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1e7      	bne.n	800bf6e <USBD_GetString+0x52>
 800bf9e:	e000      	b.n	800bfa2 <USBD_GetString+0x86>
    return;
 800bfa0:	bf00      	nop
  }
}
 800bfa2:	3718      	adds	r7, #24
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bfb8:	e005      	b.n	800bfc6 <USBD_GetLen+0x1e>
  {
    len++;
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1f5      	bne.n	800bfba <USBD_GetLen+0x12>
  }

  return len;
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2202      	movs	r2, #2
 800bfec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	2100      	movs	r1, #0
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f003 fe84 	bl	800fd10 <USBD_LL_Transmit>

  return USBD_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b084      	sub	sp, #16
 800c016:	af00      	add	r7, sp, #0
 800c018:	60f8      	str	r0, [r7, #12]
 800c01a:	60b9      	str	r1, [r7, #8]
 800c01c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	2100      	movs	r1, #0
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f003 fe73 	bl	800fd10 <USBD_LL_Transmit>

  return USBD_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	2100      	movs	r1, #0
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f003 fe83 	bl	800fd52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2204      	movs	r2, #4
 800c062:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c066:	2300      	movs	r3, #0
 800c068:	2200      	movs	r2, #0
 800c06a:	2100      	movs	r1, #0
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f003 fe4f 	bl	800fd10 <USBD_LL_Transmit>

  return USBD_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2205      	movs	r2, #5
 800c088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c08c:	2300      	movs	r3, #0
 800c08e:	2200      	movs	r2, #0
 800c090:	2100      	movs	r1, #0
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f003 fe5d 	bl	800fd52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
	...

0800c0a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	4a08      	ldr	r2, [pc, #32]	; (800c0d4 <disk_status+0x30>)
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4413      	add	r3, r2
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	79fa      	ldrb	r2, [r7, #7]
 800c0bc:	4905      	ldr	r1, [pc, #20]	; (800c0d4 <disk_status+0x30>)
 800c0be:	440a      	add	r2, r1
 800c0c0:	7a12      	ldrb	r2, [r2, #8]
 800c0c2:	4610      	mov	r0, r2
 800c0c4:	4798      	blx	r3
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	20002718 	.word	0x20002718

0800c0d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	4603      	mov	r3, r0
 800c0e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c0e6:	79fb      	ldrb	r3, [r7, #7]
 800c0e8:	4a0d      	ldr	r2, [pc, #52]	; (800c120 <disk_initialize+0x48>)
 800c0ea:	5cd3      	ldrb	r3, [r2, r3]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d111      	bne.n	800c114 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c0f0:	79fb      	ldrb	r3, [r7, #7]
 800c0f2:	4a0b      	ldr	r2, [pc, #44]	; (800c120 <disk_initialize+0x48>)
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c0f8:	79fb      	ldrb	r3, [r7, #7]
 800c0fa:	4a09      	ldr	r2, [pc, #36]	; (800c120 <disk_initialize+0x48>)
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	4413      	add	r3, r2
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	79fa      	ldrb	r2, [r7, #7]
 800c106:	4906      	ldr	r1, [pc, #24]	; (800c120 <disk_initialize+0x48>)
 800c108:	440a      	add	r2, r1
 800c10a:	7a12      	ldrb	r2, [r2, #8]
 800c10c:	4610      	mov	r0, r2
 800c10e:	4798      	blx	r3
 800c110:	4603      	mov	r3, r0
 800c112:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c114:	7bfb      	ldrb	r3, [r7, #15]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	20002718 	.word	0x20002718

0800c124 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c124:	b590      	push	{r4, r7, lr}
 800c126:	b087      	sub	sp, #28
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60b9      	str	r1, [r7, #8]
 800c12c:	607a      	str	r2, [r7, #4]
 800c12e:	603b      	str	r3, [r7, #0]
 800c130:	4603      	mov	r3, r0
 800c132:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c134:	7bfb      	ldrb	r3, [r7, #15]
 800c136:	4a0a      	ldr	r2, [pc, #40]	; (800c160 <disk_read+0x3c>)
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	4413      	add	r3, r2
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	689c      	ldr	r4, [r3, #8]
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	4a07      	ldr	r2, [pc, #28]	; (800c160 <disk_read+0x3c>)
 800c144:	4413      	add	r3, r2
 800c146:	7a18      	ldrb	r0, [r3, #8]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	68b9      	ldr	r1, [r7, #8]
 800c14e:	47a0      	blx	r4
 800c150:	4603      	mov	r3, r0
 800c152:	75fb      	strb	r3, [r7, #23]
  return res;
 800c154:	7dfb      	ldrb	r3, [r7, #23]
}
 800c156:	4618      	mov	r0, r3
 800c158:	371c      	adds	r7, #28
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd90      	pop	{r4, r7, pc}
 800c15e:	bf00      	nop
 800c160:	20002718 	.word	0x20002718

0800c164 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c164:	b590      	push	{r4, r7, lr}
 800c166:	b087      	sub	sp, #28
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60b9      	str	r1, [r7, #8]
 800c16c:	607a      	str	r2, [r7, #4]
 800c16e:	603b      	str	r3, [r7, #0]
 800c170:	4603      	mov	r3, r0
 800c172:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c174:	7bfb      	ldrb	r3, [r7, #15]
 800c176:	4a0a      	ldr	r2, [pc, #40]	; (800c1a0 <disk_write+0x3c>)
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	4413      	add	r3, r2
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	68dc      	ldr	r4, [r3, #12]
 800c180:	7bfb      	ldrb	r3, [r7, #15]
 800c182:	4a07      	ldr	r2, [pc, #28]	; (800c1a0 <disk_write+0x3c>)
 800c184:	4413      	add	r3, r2
 800c186:	7a18      	ldrb	r0, [r3, #8]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	68b9      	ldr	r1, [r7, #8]
 800c18e:	47a0      	blx	r4
 800c190:	4603      	mov	r3, r0
 800c192:	75fb      	strb	r3, [r7, #23]
  return res;
 800c194:	7dfb      	ldrb	r3, [r7, #23]
}
 800c196:	4618      	mov	r0, r3
 800c198:	371c      	adds	r7, #28
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd90      	pop	{r4, r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	20002718 	.word	0x20002718

0800c1a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	603a      	str	r2, [r7, #0]
 800c1ae:	71fb      	strb	r3, [r7, #7]
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c1b4:	79fb      	ldrb	r3, [r7, #7]
 800c1b6:	4a09      	ldr	r2, [pc, #36]	; (800c1dc <disk_ioctl+0x38>)
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	79fa      	ldrb	r2, [r7, #7]
 800c1c2:	4906      	ldr	r1, [pc, #24]	; (800c1dc <disk_ioctl+0x38>)
 800c1c4:	440a      	add	r2, r1
 800c1c6:	7a10      	ldrb	r0, [r2, #8]
 800c1c8:	79b9      	ldrb	r1, [r7, #6]
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	4798      	blx	r3
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	73fb      	strb	r3, [r7, #15]
  return res;
 800c1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	20002718 	.word	0x20002718

0800c1e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c1f0:	89fb      	ldrh	r3, [r7, #14]
 800c1f2:	021b      	lsls	r3, r3, #8
 800c1f4:	b21a      	sxth	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	b21b      	sxth	r3, r3
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	b21b      	sxth	r3, r3
 800c200:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c202:	89fb      	ldrh	r3, [r7, #14]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	3303      	adds	r3, #3
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	021b      	lsls	r3, r3, #8
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	3202      	adds	r2, #2
 800c228:	7812      	ldrb	r2, [r2, #0]
 800c22a:	4313      	orrs	r3, r2
 800c22c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	021b      	lsls	r3, r3, #8
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	3201      	adds	r2, #1
 800c236:	7812      	ldrb	r2, [r2, #0]
 800c238:	4313      	orrs	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	021b      	lsls	r3, r3, #8
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	7812      	ldrb	r2, [r2, #0]
 800c244:	4313      	orrs	r3, r2
 800c246:	60fb      	str	r3, [r7, #12]
	return rv;
 800c248:	68fb      	ldr	r3, [r7, #12]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c256:	b480      	push	{r7}
 800c258:	b083      	sub	sp, #12
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
 800c25e:	460b      	mov	r3, r1
 800c260:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	1c5a      	adds	r2, r3, #1
 800c266:	607a      	str	r2, [r7, #4]
 800c268:	887a      	ldrh	r2, [r7, #2]
 800c26a:	b2d2      	uxtb	r2, r2
 800c26c:	701a      	strb	r2, [r3, #0]
 800c26e:	887b      	ldrh	r3, [r7, #2]
 800c270:	0a1b      	lsrs	r3, r3, #8
 800c272:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	1c5a      	adds	r2, r3, #1
 800c278:	607a      	str	r2, [r7, #4]
 800c27a:	887a      	ldrh	r2, [r7, #2]
 800c27c:	b2d2      	uxtb	r2, r2
 800c27e:	701a      	strb	r2, [r3, #0]
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	1c5a      	adds	r2, r3, #1
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	b2d2      	uxtb	r2, r2
 800c2a0:	701a      	strb	r2, [r3, #0]
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	0a1b      	lsrs	r3, r3, #8
 800c2a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	1c5a      	adds	r2, r3, #1
 800c2ac:	607a      	str	r2, [r7, #4]
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	b2d2      	uxtb	r2, r2
 800c2b2:	701a      	strb	r2, [r3, #0]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	0a1b      	lsrs	r3, r3, #8
 800c2b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	1c5a      	adds	r2, r3, #1
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	683a      	ldr	r2, [r7, #0]
 800c2c2:	b2d2      	uxtb	r2, r2
 800c2c4:	701a      	strb	r2, [r3, #0]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	0a1b      	lsrs	r3, r3, #8
 800c2ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	1c5a      	adds	r2, r3, #1
 800c2d0:	607a      	str	r2, [r7, #4]
 800c2d2:	683a      	ldr	r2, [r7, #0]
 800c2d4:	b2d2      	uxtb	r2, r2
 800c2d6:	701a      	strb	r2, [r3, #0]
}
 800c2d8:	bf00      	nop
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c2e4:	b480      	push	{r7}
 800c2e6:	b087      	sub	sp, #28
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00d      	beq.n	800c31a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c2fe:	693a      	ldr	r2, [r7, #16]
 800c300:	1c53      	adds	r3, r2, #1
 800c302:	613b      	str	r3, [r7, #16]
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	1c59      	adds	r1, r3, #1
 800c308:	6179      	str	r1, [r7, #20]
 800c30a:	7812      	ldrb	r2, [r2, #0]
 800c30c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	3b01      	subs	r3, #1
 800c312:	607b      	str	r3, [r7, #4]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1f1      	bne.n	800c2fe <mem_cpy+0x1a>
	}
}
 800c31a:	bf00      	nop
 800c31c:	371c      	adds	r7, #28
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c326:	b480      	push	{r7}
 800c328:	b087      	sub	sp, #28
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	60b9      	str	r1, [r7, #8]
 800c330:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	1c5a      	adds	r2, r3, #1
 800c33a:	617a      	str	r2, [r7, #20]
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	b2d2      	uxtb	r2, r2
 800c340:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	3b01      	subs	r3, #1
 800c346:	607b      	str	r3, [r7, #4]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1f3      	bne.n	800c336 <mem_set+0x10>
}
 800c34e:	bf00      	nop
 800c350:	bf00      	nop
 800c352:	371c      	adds	r7, #28
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c35c:	b480      	push	{r7}
 800c35e:	b089      	sub	sp, #36	; 0x24
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	61fb      	str	r3, [r7, #28]
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c370:	2300      	movs	r3, #0
 800c372:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	1c5a      	adds	r2, r3, #1
 800c378:	61fa      	str	r2, [r7, #28]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	4619      	mov	r1, r3
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	1c5a      	adds	r2, r3, #1
 800c382:	61ba      	str	r2, [r7, #24]
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	1acb      	subs	r3, r1, r3
 800c388:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	607b      	str	r3, [r7, #4]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d002      	beq.n	800c39c <mem_cmp+0x40>
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d0eb      	beq.n	800c374 <mem_cmp+0x18>

	return r;
 800c39c:	697b      	ldr	r3, [r7, #20]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3724      	adds	r7, #36	; 0x24
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr

0800c3aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c3aa:	b480      	push	{r7}
 800c3ac:	b083      	sub	sp, #12
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c3b4:	e002      	b.n	800c3bc <chk_chr+0x12>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	607b      	str	r3, [r7, #4]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d005      	beq.n	800c3d0 <chk_chr+0x26>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d1f2      	bne.n	800c3b6 <chk_chr+0xc>
	return *str;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	781b      	ldrb	r3, [r3, #0]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	60bb      	str	r3, [r7, #8]
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	60fb      	str	r3, [r7, #12]
 800c3f2:	e029      	b.n	800c448 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c3f4:	4a27      	ldr	r2, [pc, #156]	; (800c494 <chk_lock+0xb4>)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	011b      	lsls	r3, r3, #4
 800c3fa:	4413      	add	r3, r2
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d01d      	beq.n	800c43e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c402:	4a24      	ldr	r2, [pc, #144]	; (800c494 <chk_lock+0xb4>)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	011b      	lsls	r3, r3, #4
 800c408:	4413      	add	r3, r2
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	429a      	cmp	r2, r3
 800c412:	d116      	bne.n	800c442 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c414:	4a1f      	ldr	r2, [pc, #124]	; (800c494 <chk_lock+0xb4>)
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	011b      	lsls	r3, r3, #4
 800c41a:	4413      	add	r3, r2
 800c41c:	3304      	adds	r3, #4
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c424:	429a      	cmp	r2, r3
 800c426:	d10c      	bne.n	800c442 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c428:	4a1a      	ldr	r2, [pc, #104]	; (800c494 <chk_lock+0xb4>)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	011b      	lsls	r3, r3, #4
 800c42e:	4413      	add	r3, r2
 800c430:	3308      	adds	r3, #8
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c438:	429a      	cmp	r2, r3
 800c43a:	d102      	bne.n	800c442 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c43c:	e007      	b.n	800c44e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c43e:	2301      	movs	r3, #1
 800c440:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	3301      	adds	r3, #1
 800c446:	60fb      	str	r3, [r7, #12]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d9d2      	bls.n	800c3f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2b02      	cmp	r3, #2
 800c452:	d109      	bne.n	800c468 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d102      	bne.n	800c460 <chk_lock+0x80>
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d101      	bne.n	800c464 <chk_lock+0x84>
 800c460:	2300      	movs	r3, #0
 800c462:	e010      	b.n	800c486 <chk_lock+0xa6>
 800c464:	2312      	movs	r3, #18
 800c466:	e00e      	b.n	800c486 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d108      	bne.n	800c480 <chk_lock+0xa0>
 800c46e:	4a09      	ldr	r2, [pc, #36]	; (800c494 <chk_lock+0xb4>)
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	011b      	lsls	r3, r3, #4
 800c474:	4413      	add	r3, r2
 800c476:	330c      	adds	r3, #12
 800c478:	881b      	ldrh	r3, [r3, #0]
 800c47a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c47e:	d101      	bne.n	800c484 <chk_lock+0xa4>
 800c480:	2310      	movs	r3, #16
 800c482:	e000      	b.n	800c486 <chk_lock+0xa6>
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	200024f8 	.word	0x200024f8

0800c498 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	607b      	str	r3, [r7, #4]
 800c4a2:	e002      	b.n	800c4aa <enq_lock+0x12>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	607b      	str	r3, [r7, #4]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d806      	bhi.n	800c4be <enq_lock+0x26>
 800c4b0:	4a09      	ldr	r2, [pc, #36]	; (800c4d8 <enq_lock+0x40>)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	011b      	lsls	r3, r3, #4
 800c4b6:	4413      	add	r3, r2
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d1f2      	bne.n	800c4a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	bf14      	ite	ne
 800c4c4:	2301      	movne	r3, #1
 800c4c6:	2300      	moveq	r3, #0
 800c4c8:	b2db      	uxtb	r3, r3
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	370c      	adds	r7, #12
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	200024f8 	.word	0x200024f8

0800c4dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	60fb      	str	r3, [r7, #12]
 800c4ea:	e01f      	b.n	800c52c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c4ec:	4a41      	ldr	r2, [pc, #260]	; (800c5f4 <inc_lock+0x118>)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	011b      	lsls	r3, r3, #4
 800c4f2:	4413      	add	r3, r2
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d113      	bne.n	800c526 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c4fe:	4a3d      	ldr	r2, [pc, #244]	; (800c5f4 <inc_lock+0x118>)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	011b      	lsls	r3, r3, #4
 800c504:	4413      	add	r3, r2
 800c506:	3304      	adds	r3, #4
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c50e:	429a      	cmp	r2, r3
 800c510:	d109      	bne.n	800c526 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c512:	4a38      	ldr	r2, [pc, #224]	; (800c5f4 <inc_lock+0x118>)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	011b      	lsls	r3, r3, #4
 800c518:	4413      	add	r3, r2
 800c51a:	3308      	adds	r3, #8
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c522:	429a      	cmp	r2, r3
 800c524:	d006      	beq.n	800c534 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	3301      	adds	r3, #1
 800c52a:	60fb      	str	r3, [r7, #12]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d9dc      	bls.n	800c4ec <inc_lock+0x10>
 800c532:	e000      	b.n	800c536 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c534:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d132      	bne.n	800c5a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c53c:	2300      	movs	r3, #0
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	e002      	b.n	800c548 <inc_lock+0x6c>
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	3301      	adds	r3, #1
 800c546:	60fb      	str	r3, [r7, #12]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d806      	bhi.n	800c55c <inc_lock+0x80>
 800c54e:	4a29      	ldr	r2, [pc, #164]	; (800c5f4 <inc_lock+0x118>)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	011b      	lsls	r3, r3, #4
 800c554:	4413      	add	r3, r2
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1f2      	bne.n	800c542 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d101      	bne.n	800c566 <inc_lock+0x8a>
 800c562:	2300      	movs	r3, #0
 800c564:	e040      	b.n	800c5e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	4922      	ldr	r1, [pc, #136]	; (800c5f4 <inc_lock+0x118>)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	011b      	lsls	r3, r3, #4
 800c570:	440b      	add	r3, r1
 800c572:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	689a      	ldr	r2, [r3, #8]
 800c578:	491e      	ldr	r1, [pc, #120]	; (800c5f4 <inc_lock+0x118>)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	011b      	lsls	r3, r3, #4
 800c57e:	440b      	add	r3, r1
 800c580:	3304      	adds	r3, #4
 800c582:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	695a      	ldr	r2, [r3, #20]
 800c588:	491a      	ldr	r1, [pc, #104]	; (800c5f4 <inc_lock+0x118>)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	011b      	lsls	r3, r3, #4
 800c58e:	440b      	add	r3, r1
 800c590:	3308      	adds	r3, #8
 800c592:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c594:	4a17      	ldr	r2, [pc, #92]	; (800c5f4 <inc_lock+0x118>)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	011b      	lsls	r3, r3, #4
 800c59a:	4413      	add	r3, r2
 800c59c:	330c      	adds	r3, #12
 800c59e:	2200      	movs	r2, #0
 800c5a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d009      	beq.n	800c5bc <inc_lock+0xe0>
 800c5a8:	4a12      	ldr	r2, [pc, #72]	; (800c5f4 <inc_lock+0x118>)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	011b      	lsls	r3, r3, #4
 800c5ae:	4413      	add	r3, r2
 800c5b0:	330c      	adds	r3, #12
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d001      	beq.n	800c5bc <inc_lock+0xe0>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	e015      	b.n	800c5e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d108      	bne.n	800c5d4 <inc_lock+0xf8>
 800c5c2:	4a0c      	ldr	r2, [pc, #48]	; (800c5f4 <inc_lock+0x118>)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	011b      	lsls	r3, r3, #4
 800c5c8:	4413      	add	r3, r2
 800c5ca:	330c      	adds	r3, #12
 800c5cc:	881b      	ldrh	r3, [r3, #0]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	e001      	b.n	800c5d8 <inc_lock+0xfc>
 800c5d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5d8:	4906      	ldr	r1, [pc, #24]	; (800c5f4 <inc_lock+0x118>)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	011b      	lsls	r3, r3, #4
 800c5de:	440b      	add	r3, r1
 800c5e0:	330c      	adds	r3, #12
 800c5e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	3301      	adds	r3, #1
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3714      	adds	r7, #20
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	200024f8 	.word	0x200024f8

0800c5f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	3b01      	subs	r3, #1
 800c604:	607b      	str	r3, [r7, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d825      	bhi.n	800c658 <dec_lock+0x60>
		n = Files[i].ctr;
 800c60c:	4a17      	ldr	r2, [pc, #92]	; (800c66c <dec_lock+0x74>)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	011b      	lsls	r3, r3, #4
 800c612:	4413      	add	r3, r2
 800c614:	330c      	adds	r3, #12
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c61a:	89fb      	ldrh	r3, [r7, #14]
 800c61c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c620:	d101      	bne.n	800c626 <dec_lock+0x2e>
 800c622:	2300      	movs	r3, #0
 800c624:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c626:	89fb      	ldrh	r3, [r7, #14]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <dec_lock+0x3a>
 800c62c:	89fb      	ldrh	r3, [r7, #14]
 800c62e:	3b01      	subs	r3, #1
 800c630:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c632:	4a0e      	ldr	r2, [pc, #56]	; (800c66c <dec_lock+0x74>)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	011b      	lsls	r3, r3, #4
 800c638:	4413      	add	r3, r2
 800c63a:	330c      	adds	r3, #12
 800c63c:	89fa      	ldrh	r2, [r7, #14]
 800c63e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c640:	89fb      	ldrh	r3, [r7, #14]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d105      	bne.n	800c652 <dec_lock+0x5a>
 800c646:	4a09      	ldr	r2, [pc, #36]	; (800c66c <dec_lock+0x74>)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	011b      	lsls	r3, r3, #4
 800c64c:	4413      	add	r3, r2
 800c64e:	2200      	movs	r2, #0
 800c650:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c652:	2300      	movs	r3, #0
 800c654:	737b      	strb	r3, [r7, #13]
 800c656:	e001      	b.n	800c65c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c658:	2302      	movs	r3, #2
 800c65a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c65c:	7b7b      	ldrb	r3, [r7, #13]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3714      	adds	r7, #20
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	200024f8 	.word	0x200024f8

0800c670 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c670:	b480      	push	{r7}
 800c672:	b085      	sub	sp, #20
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c678:	2300      	movs	r3, #0
 800c67a:	60fb      	str	r3, [r7, #12]
 800c67c:	e010      	b.n	800c6a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c67e:	4a0d      	ldr	r2, [pc, #52]	; (800c6b4 <clear_lock+0x44>)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	011b      	lsls	r3, r3, #4
 800c684:	4413      	add	r3, r2
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d105      	bne.n	800c69a <clear_lock+0x2a>
 800c68e:	4a09      	ldr	r2, [pc, #36]	; (800c6b4 <clear_lock+0x44>)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	011b      	lsls	r3, r3, #4
 800c694:	4413      	add	r3, r2
 800c696:	2200      	movs	r2, #0
 800c698:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	3301      	adds	r3, #1
 800c69e:	60fb      	str	r3, [r7, #12]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d9eb      	bls.n	800c67e <clear_lock+0xe>
	}
}
 800c6a6:	bf00      	nop
 800c6a8:	bf00      	nop
 800c6aa:	3714      	adds	r7, #20
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr
 800c6b4:	200024f8 	.word	0x200024f8

0800c6b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b086      	sub	sp, #24
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	78db      	ldrb	r3, [r3, #3]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d034      	beq.n	800c736 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	7858      	ldrb	r0, [r3, #1]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c6dc:	2301      	movs	r3, #1
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	f7ff fd40 	bl	800c164 <disk_write>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d002      	beq.n	800c6f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	73fb      	strb	r3, [r7, #15]
 800c6ee:	e022      	b.n	800c736 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	1ad2      	subs	r2, r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a1b      	ldr	r3, [r3, #32]
 800c702:	429a      	cmp	r2, r3
 800c704:	d217      	bcs.n	800c736 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	789b      	ldrb	r3, [r3, #2]
 800c70a:	613b      	str	r3, [r7, #16]
 800c70c:	e010      	b.n	800c730 <sync_window+0x78>
					wsect += fs->fsize;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6a1b      	ldr	r3, [r3, #32]
 800c712:	697a      	ldr	r2, [r7, #20]
 800c714:	4413      	add	r3, r2
 800c716:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	7858      	ldrb	r0, [r3, #1]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c722:	2301      	movs	r3, #1
 800c724:	697a      	ldr	r2, [r7, #20]
 800c726:	f7ff fd1d 	bl	800c164 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	613b      	str	r3, [r7, #16]
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	2b01      	cmp	r3, #1
 800c734:	d8eb      	bhi.n	800c70e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c736:	7bfb      	ldrb	r3, [r7, #15]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3718      	adds	r7, #24
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c74a:	2300      	movs	r3, #0
 800c74c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	429a      	cmp	r2, r3
 800c756:	d01b      	beq.n	800c790 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f7ff ffad 	bl	800c6b8 <sync_window>
 800c75e:	4603      	mov	r3, r0
 800c760:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c762:	7bfb      	ldrb	r3, [r7, #15]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d113      	bne.n	800c790 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	7858      	ldrb	r0, [r3, #1]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c772:	2301      	movs	r3, #1
 800c774:	683a      	ldr	r2, [r7, #0]
 800c776:	f7ff fcd5 	bl	800c124 <disk_read>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d004      	beq.n	800c78a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c780:	f04f 33ff 	mov.w	r3, #4294967295
 800c784:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c786:	2301      	movs	r3, #1
 800c788:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	683a      	ldr	r2, [r7, #0]
 800c78e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c790:	7bfb      	ldrb	r3, [r7, #15]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
	...

0800c79c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff ff87 	bl	800c6b8 <sync_window>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c7ae:	7bfb      	ldrb	r3, [r7, #15]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d159      	bne.n	800c868 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	2b03      	cmp	r3, #3
 800c7ba:	d149      	bne.n	800c850 <sync_fs+0xb4>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	791b      	ldrb	r3, [r3, #4]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d145      	bne.n	800c850 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	899b      	ldrh	r3, [r3, #12]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	f7ff fda8 	bl	800c326 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3338      	adds	r3, #56	; 0x38
 800c7da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c7de:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7ff fd37 	bl	800c256 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	3338      	adds	r3, #56	; 0x38
 800c7ec:	4921      	ldr	r1, [pc, #132]	; (800c874 <sync_fs+0xd8>)
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7ff fd4c 	bl	800c28c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3338      	adds	r3, #56	; 0x38
 800c7f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c7fc:	491e      	ldr	r1, [pc, #120]	; (800c878 <sync_fs+0xdc>)
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7ff fd44 	bl	800c28c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3338      	adds	r3, #56	; 0x38
 800c808:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	699b      	ldr	r3, [r3, #24]
 800c810:	4619      	mov	r1, r3
 800c812:	4610      	mov	r0, r2
 800c814:	f7ff fd3a 	bl	800c28c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	3338      	adds	r3, #56	; 0x38
 800c81c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	695b      	ldr	r3, [r3, #20]
 800c824:	4619      	mov	r1, r3
 800c826:	4610      	mov	r0, r2
 800c828:	f7ff fd30 	bl	800c28c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c830:	1c5a      	adds	r2, r3, #1
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	7858      	ldrb	r0, [r3, #1]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c844:	2301      	movs	r3, #1
 800c846:	f7ff fc8d 	bl	800c164 <disk_write>
			fs->fsi_flag = 0;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	785b      	ldrb	r3, [r3, #1]
 800c854:	2200      	movs	r2, #0
 800c856:	2100      	movs	r1, #0
 800c858:	4618      	mov	r0, r3
 800c85a:	f7ff fca3 	bl	800c1a4 <disk_ioctl>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <sync_fs+0xcc>
 800c864:	2301      	movs	r3, #1
 800c866:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c868:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	41615252 	.word	0x41615252
 800c878:	61417272 	.word	0x61417272

0800c87c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b083      	sub	sp, #12
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	3b02      	subs	r3, #2
 800c88a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	69db      	ldr	r3, [r3, #28]
 800c890:	3b02      	subs	r3, #2
 800c892:	683a      	ldr	r2, [r7, #0]
 800c894:	429a      	cmp	r2, r3
 800c896:	d301      	bcc.n	800c89c <clust2sect+0x20>
 800c898:	2300      	movs	r3, #0
 800c89a:	e008      	b.n	800c8ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	895b      	ldrh	r3, [r3, #10]
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	fb03 f202 	mul.w	r2, r3, r2
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ac:	4413      	add	r3, r2
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	370c      	adds	r7, #12
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr

0800c8ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b086      	sub	sp, #24
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
 800c8c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d904      	bls.n	800c8da <get_fat+0x20>
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	69db      	ldr	r3, [r3, #28]
 800c8d4:	683a      	ldr	r2, [r7, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d302      	bcc.n	800c8e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c8da:	2301      	movs	r3, #1
 800c8dc:	617b      	str	r3, [r7, #20]
 800c8de:	e0bb      	b.n	800ca58 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c8e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	2b03      	cmp	r3, #3
 800c8ec:	f000 8083 	beq.w	800c9f6 <get_fat+0x13c>
 800c8f0:	2b03      	cmp	r3, #3
 800c8f2:	f300 80a7 	bgt.w	800ca44 <get_fat+0x18a>
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d002      	beq.n	800c900 <get_fat+0x46>
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d056      	beq.n	800c9ac <get_fat+0xf2>
 800c8fe:	e0a1      	b.n	800ca44 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	085b      	lsrs	r3, r3, #1
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	4413      	add	r3, r2
 800c90c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	899b      	ldrh	r3, [r3, #12]
 800c916:	4619      	mov	r1, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c91e:	4413      	add	r3, r2
 800c920:	4619      	mov	r1, r3
 800c922:	6938      	ldr	r0, [r7, #16]
 800c924:	f7ff ff0c 	bl	800c740 <move_window>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f040 808d 	bne.w	800ca4a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	1c5a      	adds	r2, r3, #1
 800c934:	60fa      	str	r2, [r7, #12]
 800c936:	693a      	ldr	r2, [r7, #16]
 800c938:	8992      	ldrh	r2, [r2, #12]
 800c93a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c93e:	fb01 f202 	mul.w	r2, r1, r2
 800c942:	1a9b      	subs	r3, r3, r2
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	4413      	add	r3, r2
 800c948:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c94c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	899b      	ldrh	r3, [r3, #12]
 800c956:	4619      	mov	r1, r3
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c95e:	4413      	add	r3, r2
 800c960:	4619      	mov	r1, r3
 800c962:	6938      	ldr	r0, [r7, #16]
 800c964:	f7ff feec 	bl	800c740 <move_window>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d16f      	bne.n	800ca4e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	899b      	ldrh	r3, [r3, #12]
 800c972:	461a      	mov	r2, r3
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	fbb3 f1f2 	udiv	r1, r3, r2
 800c97a:	fb01 f202 	mul.w	r2, r1, r2
 800c97e:	1a9b      	subs	r3, r3, r2
 800c980:	693a      	ldr	r2, [r7, #16]
 800c982:	4413      	add	r3, r2
 800c984:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c988:	021b      	lsls	r3, r3, #8
 800c98a:	461a      	mov	r2, r3
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	4313      	orrs	r3, r2
 800c990:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	f003 0301 	and.w	r3, r3, #1
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <get_fat+0xe8>
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	091b      	lsrs	r3, r3, #4
 800c9a0:	e002      	b.n	800c9a8 <get_fat+0xee>
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9a8:	617b      	str	r3, [r7, #20]
			break;
 800c9aa:	e055      	b.n	800ca58 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	899b      	ldrh	r3, [r3, #12]
 800c9b4:	085b      	lsrs	r3, r3, #1
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	fbb3 f3f1 	udiv	r3, r3, r1
 800c9c0:	4413      	add	r3, r2
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	6938      	ldr	r0, [r7, #16]
 800c9c6:	f7ff febb 	bl	800c740 <move_window>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d140      	bne.n	800ca52 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	8992      	ldrh	r2, [r2, #12]
 800c9de:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9e2:	fb00 f202 	mul.w	r2, r0, r2
 800c9e6:	1a9b      	subs	r3, r3, r2
 800c9e8:	440b      	add	r3, r1
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7ff fbf8 	bl	800c1e0 <ld_word>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	617b      	str	r3, [r7, #20]
			break;
 800c9f4:	e030      	b.n	800ca58 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	899b      	ldrh	r3, [r3, #12]
 800c9fe:	089b      	lsrs	r3, r3, #2
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	4619      	mov	r1, r3
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca0a:	4413      	add	r3, r2
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6938      	ldr	r0, [r7, #16]
 800ca10:	f7ff fe96 	bl	800c740 <move_window>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d11d      	bne.n	800ca56 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	8992      	ldrh	r2, [r2, #12]
 800ca28:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca2c:	fb00 f202 	mul.w	r2, r0, r2
 800ca30:	1a9b      	subs	r3, r3, r2
 800ca32:	440b      	add	r3, r1
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7ff fbeb 	bl	800c210 <ld_dword>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ca40:	617b      	str	r3, [r7, #20]
			break;
 800ca42:	e009      	b.n	800ca58 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ca44:	2301      	movs	r3, #1
 800ca46:	617b      	str	r3, [r7, #20]
 800ca48:	e006      	b.n	800ca58 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca4a:	bf00      	nop
 800ca4c:	e004      	b.n	800ca58 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca4e:	bf00      	nop
 800ca50:	e002      	b.n	800ca58 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ca52:	bf00      	nop
 800ca54:	e000      	b.n	800ca58 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ca56:	bf00      	nop
		}
	}

	return val;
 800ca58:	697b      	ldr	r3, [r7, #20]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3718      	adds	r7, #24
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ca62:	b590      	push	{r4, r7, lr}
 800ca64:	b089      	sub	sp, #36	; 0x24
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	60f8      	str	r0, [r7, #12]
 800ca6a:	60b9      	str	r1, [r7, #8]
 800ca6c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ca6e:	2302      	movs	r3, #2
 800ca70:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	f240 8102 	bls.w	800cc7e <put_fat+0x21c>
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	69db      	ldr	r3, [r3, #28]
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	f080 80fc 	bcs.w	800cc7e <put_fat+0x21c>
		switch (fs->fs_type) {
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	2b03      	cmp	r3, #3
 800ca8c:	f000 80b6 	beq.w	800cbfc <put_fat+0x19a>
 800ca90:	2b03      	cmp	r3, #3
 800ca92:	f300 80fd 	bgt.w	800cc90 <put_fat+0x22e>
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d003      	beq.n	800caa2 <put_fat+0x40>
 800ca9a:	2b02      	cmp	r3, #2
 800ca9c:	f000 8083 	beq.w	800cba6 <put_fat+0x144>
 800caa0:	e0f6      	b.n	800cc90 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	61bb      	str	r3, [r7, #24]
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	085b      	lsrs	r3, r3, #1
 800caaa:	69ba      	ldr	r2, [r7, #24]
 800caac:	4413      	add	r3, r2
 800caae:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	899b      	ldrh	r3, [r3, #12]
 800cab8:	4619      	mov	r1, r3
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	fbb3 f3f1 	udiv	r3, r3, r1
 800cac0:	4413      	add	r3, r2
 800cac2:	4619      	mov	r1, r3
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f7ff fe3b 	bl	800c740 <move_window>
 800caca:	4603      	mov	r3, r0
 800cacc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cace:	7ffb      	ldrb	r3, [r7, #31]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f040 80d6 	bne.w	800cc82 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	1c5a      	adds	r2, r3, #1
 800cae0:	61ba      	str	r2, [r7, #24]
 800cae2:	68fa      	ldr	r2, [r7, #12]
 800cae4:	8992      	ldrh	r2, [r2, #12]
 800cae6:	fbb3 f0f2 	udiv	r0, r3, r2
 800caea:	fb00 f202 	mul.w	r2, r0, r2
 800caee:	1a9b      	subs	r3, r3, r2
 800caf0:	440b      	add	r3, r1
 800caf2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	f003 0301 	and.w	r3, r3, #1
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00d      	beq.n	800cb1a <put_fat+0xb8>
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	b25b      	sxtb	r3, r3
 800cb04:	f003 030f 	and.w	r3, r3, #15
 800cb08:	b25a      	sxtb	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	011b      	lsls	r3, r3, #4
 800cb10:	b25b      	sxtb	r3, r3
 800cb12:	4313      	orrs	r3, r2
 800cb14:	b25b      	sxtb	r3, r3
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	e001      	b.n	800cb1e <put_fat+0xbc>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	697a      	ldr	r2, [r7, #20]
 800cb20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2201      	movs	r2, #1
 800cb26:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	899b      	ldrh	r3, [r3, #12]
 800cb30:	4619      	mov	r1, r3
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb38:	4413      	add	r3, r2
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	f7ff fdff 	bl	800c740 <move_window>
 800cb42:	4603      	mov	r3, r0
 800cb44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb46:	7ffb      	ldrb	r3, [r7, #31]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f040 809c 	bne.w	800cc86 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	899b      	ldrh	r3, [r3, #12]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb60:	fb00 f202 	mul.w	r2, r0, r2
 800cb64:	1a9b      	subs	r3, r3, r2
 800cb66:	440b      	add	r3, r1
 800cb68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	f003 0301 	and.w	r3, r3, #1
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d003      	beq.n	800cb7c <put_fat+0x11a>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	091b      	lsrs	r3, r3, #4
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	e00e      	b.n	800cb9a <put_fat+0x138>
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	b25b      	sxtb	r3, r3
 800cb82:	f023 030f 	bic.w	r3, r3, #15
 800cb86:	b25a      	sxtb	r2, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	0a1b      	lsrs	r3, r3, #8
 800cb8c:	b25b      	sxtb	r3, r3
 800cb8e:	f003 030f 	and.w	r3, r3, #15
 800cb92:	b25b      	sxtb	r3, r3
 800cb94:	4313      	orrs	r3, r2
 800cb96:	b25b      	sxtb	r3, r3
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	697a      	ldr	r2, [r7, #20]
 800cb9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2201      	movs	r2, #1
 800cba2:	70da      	strb	r2, [r3, #3]
			break;
 800cba4:	e074      	b.n	800cc90 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	899b      	ldrh	r3, [r3, #12]
 800cbae:	085b      	lsrs	r3, r3, #1
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	fbb3 f3f1 	udiv	r3, r3, r1
 800cbba:	4413      	add	r3, r2
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f7ff fdbe 	bl	800c740 <move_window>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cbc8:	7ffb      	ldrb	r3, [r7, #31]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d15d      	bne.n	800cc8a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	8992      	ldrh	r2, [r2, #12]
 800cbdc:	fbb3 f0f2 	udiv	r0, r3, r2
 800cbe0:	fb00 f202 	mul.w	r2, r0, r2
 800cbe4:	1a9b      	subs	r3, r3, r2
 800cbe6:	440b      	add	r3, r1
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	b292      	uxth	r2, r2
 800cbec:	4611      	mov	r1, r2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7ff fb31 	bl	800c256 <st_word>
			fs->wflag = 1;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	70da      	strb	r2, [r3, #3]
			break;
 800cbfa:	e049      	b.n	800cc90 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	899b      	ldrh	r3, [r3, #12]
 800cc04:	089b      	lsrs	r3, r3, #2
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	4619      	mov	r1, r3
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc10:	4413      	add	r3, r2
 800cc12:	4619      	mov	r1, r3
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f7ff fd93 	bl	800c740 <move_window>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc1e:	7ffb      	ldrb	r3, [r7, #31]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d134      	bne.n	800cc8e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	8992      	ldrh	r2, [r2, #12]
 800cc38:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc3c:	fb00 f202 	mul.w	r2, r0, r2
 800cc40:	1a9b      	subs	r3, r3, r2
 800cc42:	440b      	add	r3, r1
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7ff fae3 	bl	800c210 <ld_dword>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cc50:	4323      	orrs	r3, r4
 800cc52:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	009b      	lsls	r3, r3, #2
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	8992      	ldrh	r2, [r2, #12]
 800cc62:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc66:	fb00 f202 	mul.w	r2, r0, r2
 800cc6a:	1a9b      	subs	r3, r3, r2
 800cc6c:	440b      	add	r3, r1
 800cc6e:	6879      	ldr	r1, [r7, #4]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7ff fb0b 	bl	800c28c <st_dword>
			fs->wflag = 1;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2201      	movs	r2, #1
 800cc7a:	70da      	strb	r2, [r3, #3]
			break;
 800cc7c:	e008      	b.n	800cc90 <put_fat+0x22e>
		}
	}
 800cc7e:	bf00      	nop
 800cc80:	e006      	b.n	800cc90 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cc82:	bf00      	nop
 800cc84:	e004      	b.n	800cc90 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cc86:	bf00      	nop
 800cc88:	e002      	b.n	800cc90 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cc8a:	bf00      	nop
 800cc8c:	e000      	b.n	800cc90 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cc8e:	bf00      	nop
	return res;
 800cc90:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3724      	adds	r7, #36	; 0x24
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd90      	pop	{r4, r7, pc}

0800cc9a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b088      	sub	sp, #32
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	60f8      	str	r0, [r7, #12]
 800cca2:	60b9      	str	r1, [r7, #8]
 800cca4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d904      	bls.n	800ccc0 <remove_chain+0x26>
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	69db      	ldr	r3, [r3, #28]
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d301      	bcc.n	800ccc4 <remove_chain+0x2a>
 800ccc0:	2302      	movs	r3, #2
 800ccc2:	e04b      	b.n	800cd5c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00c      	beq.n	800cce4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ccca:	f04f 32ff 	mov.w	r2, #4294967295
 800ccce:	6879      	ldr	r1, [r7, #4]
 800ccd0:	69b8      	ldr	r0, [r7, #24]
 800ccd2:	f7ff fec6 	bl	800ca62 <put_fat>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ccda:	7ffb      	ldrb	r3, [r7, #31]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <remove_chain+0x4a>
 800cce0:	7ffb      	ldrb	r3, [r7, #31]
 800cce2:	e03b      	b.n	800cd5c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cce4:	68b9      	ldr	r1, [r7, #8]
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	f7ff fde7 	bl	800c8ba <get_fat>
 800ccec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d031      	beq.n	800cd58 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d101      	bne.n	800ccfe <remove_chain+0x64>
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	e02e      	b.n	800cd5c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd04:	d101      	bne.n	800cd0a <remove_chain+0x70>
 800cd06:	2301      	movs	r3, #1
 800cd08:	e028      	b.n	800cd5c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	68b9      	ldr	r1, [r7, #8]
 800cd0e:	69b8      	ldr	r0, [r7, #24]
 800cd10:	f7ff fea7 	bl	800ca62 <put_fat>
 800cd14:	4603      	mov	r3, r0
 800cd16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cd18:	7ffb      	ldrb	r3, [r7, #31]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <remove_chain+0x88>
 800cd1e:	7ffb      	ldrb	r3, [r7, #31]
 800cd20:	e01c      	b.n	800cd5c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	699a      	ldr	r2, [r3, #24]
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	69db      	ldr	r3, [r3, #28]
 800cd2a:	3b02      	subs	r3, #2
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d20b      	bcs.n	800cd48 <remove_chain+0xae>
			fs->free_clst++;
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	1c5a      	adds	r2, r3, #1
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	791b      	ldrb	r3, [r3, #4]
 800cd3e:	f043 0301 	orr.w	r3, r3, #1
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	69db      	ldr	r3, [r3, #28]
 800cd50:	68ba      	ldr	r2, [r7, #8]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d3c6      	bcc.n	800cce4 <remove_chain+0x4a>
 800cd56:	e000      	b.n	800cd5a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cd58:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cd5a:	2300      	movs	r3, #0
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3720      	adds	r7, #32
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b088      	sub	sp, #32
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d10d      	bne.n	800cd96 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	695b      	ldr	r3, [r3, #20]
 800cd7e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d004      	beq.n	800cd90 <create_chain+0x2c>
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	69db      	ldr	r3, [r3, #28]
 800cd8a:	69ba      	ldr	r2, [r7, #24]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d31b      	bcc.n	800cdc8 <create_chain+0x64>
 800cd90:	2301      	movs	r3, #1
 800cd92:	61bb      	str	r3, [r7, #24]
 800cd94:	e018      	b.n	800cdc8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cd96:	6839      	ldr	r1, [r7, #0]
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f7ff fd8e 	bl	800c8ba <get_fat>
 800cd9e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d801      	bhi.n	800cdaa <create_chain+0x46>
 800cda6:	2301      	movs	r3, #1
 800cda8:	e070      	b.n	800ce8c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb0:	d101      	bne.n	800cdb6 <create_chain+0x52>
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	e06a      	b.n	800ce8c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	69db      	ldr	r3, [r3, #28]
 800cdba:	68fa      	ldr	r2, [r7, #12]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d201      	bcs.n	800cdc4 <create_chain+0x60>
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	e063      	b.n	800ce8c <create_chain+0x128>
		scl = clst;
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	69db      	ldr	r3, [r3, #28]
 800cdd6:	69fa      	ldr	r2, [r7, #28]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d307      	bcc.n	800cdec <create_chain+0x88>
				ncl = 2;
 800cddc:	2302      	movs	r3, #2
 800cdde:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cde0:	69fa      	ldr	r2, [r7, #28]
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d901      	bls.n	800cdec <create_chain+0x88>
 800cde8:	2300      	movs	r3, #0
 800cdea:	e04f      	b.n	800ce8c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cdec:	69f9      	ldr	r1, [r7, #28]
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7ff fd63 	bl	800c8ba <get_fat>
 800cdf4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00e      	beq.n	800ce1a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d003      	beq.n	800ce0a <create_chain+0xa6>
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce08:	d101      	bne.n	800ce0e <create_chain+0xaa>
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	e03e      	b.n	800ce8c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ce0e:	69fa      	ldr	r2, [r7, #28]
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d1da      	bne.n	800cdcc <create_chain+0x68>
 800ce16:	2300      	movs	r3, #0
 800ce18:	e038      	b.n	800ce8c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ce1a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ce1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce20:	69f9      	ldr	r1, [r7, #28]
 800ce22:	6938      	ldr	r0, [r7, #16]
 800ce24:	f7ff fe1d 	bl	800ca62 <put_fat>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ce2c:	7dfb      	ldrb	r3, [r7, #23]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d109      	bne.n	800ce46 <create_chain+0xe2>
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d006      	beq.n	800ce46 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ce38:	69fa      	ldr	r2, [r7, #28]
 800ce3a:	6839      	ldr	r1, [r7, #0]
 800ce3c:	6938      	ldr	r0, [r7, #16]
 800ce3e:	f7ff fe10 	bl	800ca62 <put_fat>
 800ce42:	4603      	mov	r3, r0
 800ce44:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d116      	bne.n	800ce7a <create_chain+0x116>
		fs->last_clst = ncl;
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	69fa      	ldr	r2, [r7, #28]
 800ce50:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	699a      	ldr	r2, [r3, #24]
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	69db      	ldr	r3, [r3, #28]
 800ce5a:	3b02      	subs	r3, #2
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d804      	bhi.n	800ce6a <create_chain+0x106>
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	699b      	ldr	r3, [r3, #24]
 800ce64:	1e5a      	subs	r2, r3, #1
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	791b      	ldrb	r3, [r3, #4]
 800ce6e:	f043 0301 	orr.w	r3, r3, #1
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	711a      	strb	r2, [r3, #4]
 800ce78:	e007      	b.n	800ce8a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ce7a:	7dfb      	ldrb	r3, [r7, #23]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d102      	bne.n	800ce86 <create_chain+0x122>
 800ce80:	f04f 33ff 	mov.w	r3, #4294967295
 800ce84:	e000      	b.n	800ce88 <create_chain+0x124>
 800ce86:	2301      	movs	r3, #1
 800ce88:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ce8a:	69fb      	ldr	r3, [r7, #28]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3720      	adds	r7, #32
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b087      	sub	sp, #28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea8:	3304      	adds	r3, #4
 800ceaa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	899b      	ldrh	r3, [r3, #12]
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	8952      	ldrh	r2, [r2, #10]
 800cebc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cec0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	1d1a      	adds	r2, r3, #4
 800cec6:	613a      	str	r2, [r7, #16]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <clmt_clust+0x42>
 800ced2:	2300      	movs	r3, #0
 800ced4:	e010      	b.n	800cef8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d307      	bcc.n	800ceee <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800cede:	697a      	ldr	r2, [r7, #20]
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	617b      	str	r3, [r7, #20]
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	3304      	adds	r3, #4
 800ceea:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ceec:	e7e9      	b.n	800cec2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ceee:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	4413      	add	r3, r2
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	371c      	adds	r7, #28
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr

0800cf04 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b086      	sub	sp, #24
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cf1a:	d204      	bcs.n	800cf26 <dir_sdi+0x22>
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	f003 031f 	and.w	r3, r3, #31
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d001      	beq.n	800cf2a <dir_sdi+0x26>
		return FR_INT_ERR;
 800cf26:	2302      	movs	r3, #2
 800cf28:	e071      	b.n	800d00e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	683a      	ldr	r2, [r7, #0]
 800cf2e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d106      	bne.n	800cf4a <dir_sdi+0x46>
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d902      	bls.n	800cf4a <dir_sdi+0x46>
		clst = fs->dirbase;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf48:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10c      	bne.n	800cf6a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	095b      	lsrs	r3, r3, #5
 800cf54:	693a      	ldr	r2, [r7, #16]
 800cf56:	8912      	ldrh	r2, [r2, #8]
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d301      	bcc.n	800cf60 <dir_sdi+0x5c>
 800cf5c:	2302      	movs	r3, #2
 800cf5e:	e056      	b.n	800d00e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	61da      	str	r2, [r3, #28]
 800cf68:	e02d      	b.n	800cfc6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	895b      	ldrh	r3, [r3, #10]
 800cf6e:	461a      	mov	r2, r3
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	899b      	ldrh	r3, [r3, #12]
 800cf74:	fb02 f303 	mul.w	r3, r2, r3
 800cf78:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cf7a:	e019      	b.n	800cfb0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6979      	ldr	r1, [r7, #20]
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7ff fc9a 	bl	800c8ba <get_fat>
 800cf86:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8e:	d101      	bne.n	800cf94 <dir_sdi+0x90>
 800cf90:	2301      	movs	r3, #1
 800cf92:	e03c      	b.n	800d00e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d904      	bls.n	800cfa4 <dir_sdi+0xa0>
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	69db      	ldr	r3, [r3, #28]
 800cf9e:	697a      	ldr	r2, [r7, #20]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d301      	bcc.n	800cfa8 <dir_sdi+0xa4>
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	e032      	b.n	800d00e <dir_sdi+0x10a>
			ofs -= csz;
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	1ad3      	subs	r3, r2, r3
 800cfae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cfb0:	683a      	ldr	r2, [r7, #0]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d2e1      	bcs.n	800cf7c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800cfb8:	6979      	ldr	r1, [r7, #20]
 800cfba:	6938      	ldr	r0, [r7, #16]
 800cfbc:	f7ff fc5e 	bl	800c87c <clust2sect>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	697a      	ldr	r2, [r7, #20]
 800cfca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	69db      	ldr	r3, [r3, #28]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d101      	bne.n	800cfd8 <dir_sdi+0xd4>
 800cfd4:	2302      	movs	r3, #2
 800cfd6:	e01a      	b.n	800d00e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	69da      	ldr	r2, [r3, #28]
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	899b      	ldrh	r3, [r3, #12]
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	fbb3 f3f1 	udiv	r3, r3, r1
 800cfe8:	441a      	add	r2, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	899b      	ldrh	r3, [r3, #12]
 800cff8:	461a      	mov	r2, r3
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	fbb3 f0f2 	udiv	r0, r3, r2
 800d000:	fb00 f202 	mul.w	r2, r0, r2
 800d004:	1a9b      	subs	r3, r3, r2
 800d006:	18ca      	adds	r2, r1, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3718      	adds	r7, #24
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b086      	sub	sp, #24
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
 800d01e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	695b      	ldr	r3, [r3, #20]
 800d02a:	3320      	adds	r3, #32
 800d02c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	69db      	ldr	r3, [r3, #28]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <dir_next+0x28>
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d03c:	d301      	bcc.n	800d042 <dir_next+0x2c>
 800d03e:	2304      	movs	r3, #4
 800d040:	e0bb      	b.n	800d1ba <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	899b      	ldrh	r3, [r3, #12]
 800d046:	461a      	mov	r2, r3
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d04e:	fb01 f202 	mul.w	r2, r1, r2
 800d052:	1a9b      	subs	r3, r3, r2
 800d054:	2b00      	cmp	r3, #0
 800d056:	f040 809d 	bne.w	800d194 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	69db      	ldr	r3, [r3, #28]
 800d05e:	1c5a      	adds	r2, r3, #1
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	699b      	ldr	r3, [r3, #24]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10b      	bne.n	800d084 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	095b      	lsrs	r3, r3, #5
 800d070:	68fa      	ldr	r2, [r7, #12]
 800d072:	8912      	ldrh	r2, [r2, #8]
 800d074:	4293      	cmp	r3, r2
 800d076:	f0c0 808d 	bcc.w	800d194 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	61da      	str	r2, [r3, #28]
 800d080:	2304      	movs	r3, #4
 800d082:	e09a      	b.n	800d1ba <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	899b      	ldrh	r3, [r3, #12]
 800d088:	461a      	mov	r2, r3
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	8952      	ldrh	r2, [r2, #10]
 800d094:	3a01      	subs	r2, #1
 800d096:	4013      	ands	r3, r2
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d17b      	bne.n	800d194 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	699b      	ldr	r3, [r3, #24]
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	f7ff fc08 	bl	800c8ba <get_fat>
 800d0aa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d801      	bhi.n	800d0b6 <dir_next+0xa0>
 800d0b2:	2302      	movs	r3, #2
 800d0b4:	e081      	b.n	800d1ba <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0bc:	d101      	bne.n	800d0c2 <dir_next+0xac>
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e07b      	b.n	800d1ba <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	69db      	ldr	r3, [r3, #28]
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d359      	bcc.n	800d180 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d104      	bne.n	800d0dc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	61da      	str	r2, [r3, #28]
 800d0d8:	2304      	movs	r3, #4
 800d0da:	e06e      	b.n	800d1ba <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	699b      	ldr	r3, [r3, #24]
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	f7ff fe3d 	bl	800cd64 <create_chain>
 800d0ea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d101      	bne.n	800d0f6 <dir_next+0xe0>
 800d0f2:	2307      	movs	r3, #7
 800d0f4:	e061      	b.n	800d1ba <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d101      	bne.n	800d100 <dir_next+0xea>
 800d0fc:	2302      	movs	r3, #2
 800d0fe:	e05c      	b.n	800d1ba <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d106:	d101      	bne.n	800d10c <dir_next+0xf6>
 800d108:	2301      	movs	r3, #1
 800d10a:	e056      	b.n	800d1ba <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f7ff fad3 	bl	800c6b8 <sync_window>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d001      	beq.n	800d11c <dir_next+0x106>
 800d118:	2301      	movs	r3, #1
 800d11a:	e04e      	b.n	800d1ba <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	899b      	ldrh	r3, [r3, #12]
 800d126:	461a      	mov	r2, r3
 800d128:	2100      	movs	r1, #0
 800d12a:	f7ff f8fc 	bl	800c326 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d12e:	2300      	movs	r3, #0
 800d130:	613b      	str	r3, [r7, #16]
 800d132:	6979      	ldr	r1, [r7, #20]
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f7ff fba1 	bl	800c87c <clust2sect>
 800d13a:	4602      	mov	r2, r0
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	635a      	str	r2, [r3, #52]	; 0x34
 800d140:	e012      	b.n	800d168 <dir_next+0x152>
						fs->wflag = 1;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2201      	movs	r2, #1
 800d146:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f7ff fab5 	bl	800c6b8 <sync_window>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d001      	beq.n	800d158 <dir_next+0x142>
 800d154:	2301      	movs	r3, #1
 800d156:	e030      	b.n	800d1ba <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	3301      	adds	r3, #1
 800d15c:	613b      	str	r3, [r7, #16]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d162:	1c5a      	adds	r2, r3, #1
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	635a      	str	r2, [r3, #52]	; 0x34
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	895b      	ldrh	r3, [r3, #10]
 800d16c:	461a      	mov	r2, r3
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	4293      	cmp	r3, r2
 800d172:	d3e6      	bcc.n	800d142 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	1ad2      	subs	r2, r2, r3
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	697a      	ldr	r2, [r7, #20]
 800d184:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d186:	6979      	ldr	r1, [r7, #20]
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f7ff fb77 	bl	800c87c <clust2sect>
 800d18e:	4602      	mov	r2, r0
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	899b      	ldrh	r3, [r3, #12]
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1ac:	fb00 f202 	mul.w	r2, r0, r2
 800d1b0:	1a9b      	subs	r3, r3, r2
 800d1b2:	18ca      	adds	r2, r1, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b086      	sub	sp, #24
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
 800d1ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7ff fe95 	bl	800cf04 <dir_sdi>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d1de:	7dfb      	ldrb	r3, [r7, #23]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d12b      	bne.n	800d23c <dir_alloc+0x7a>
		n = 0;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	69db      	ldr	r3, [r3, #28]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f7ff faa6 	bl	800c740 <move_window>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d1f8:	7dfb      	ldrb	r3, [r7, #23]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d11d      	bne.n	800d23a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6a1b      	ldr	r3, [r3, #32]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	2be5      	cmp	r3, #229	; 0xe5
 800d206:	d004      	beq.n	800d212 <dir_alloc+0x50>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6a1b      	ldr	r3, [r3, #32]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d107      	bne.n	800d222 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	3301      	adds	r3, #1
 800d216:	613b      	str	r3, [r7, #16]
 800d218:	693a      	ldr	r2, [r7, #16]
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d102      	bne.n	800d226 <dir_alloc+0x64>
 800d220:	e00c      	b.n	800d23c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d222:	2300      	movs	r3, #0
 800d224:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d226:	2101      	movs	r1, #1
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f7ff fef4 	bl	800d016 <dir_next>
 800d22e:	4603      	mov	r3, r0
 800d230:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d232:	7dfb      	ldrb	r3, [r7, #23]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d0d7      	beq.n	800d1e8 <dir_alloc+0x26>
 800d238:	e000      	b.n	800d23c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d23a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
 800d23e:	2b04      	cmp	r3, #4
 800d240:	d101      	bne.n	800d246 <dir_alloc+0x84>
 800d242:	2307      	movs	r3, #7
 800d244:	75fb      	strb	r3, [r7, #23]
	return res;
 800d246:	7dfb      	ldrb	r3, [r7, #23]
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3718      	adds	r7, #24
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	331a      	adds	r3, #26
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fe ffbe 	bl	800c1e0 <ld_word>
 800d264:	4603      	mov	r3, r0
 800d266:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	2b03      	cmp	r3, #3
 800d26e:	d109      	bne.n	800d284 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	3314      	adds	r3, #20
 800d274:	4618      	mov	r0, r3
 800d276:	f7fe ffb3 	bl	800c1e0 <ld_word>
 800d27a:	4603      	mov	r3, r0
 800d27c:	041b      	lsls	r3, r3, #16
 800d27e:	68fa      	ldr	r2, [r7, #12]
 800d280:	4313      	orrs	r3, r2
 800d282:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d284:	68fb      	ldr	r3, [r7, #12]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d28e:	b580      	push	{r7, lr}
 800d290:	b084      	sub	sp, #16
 800d292:	af00      	add	r7, sp, #0
 800d294:	60f8      	str	r0, [r7, #12]
 800d296:	60b9      	str	r1, [r7, #8]
 800d298:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	331a      	adds	r3, #26
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	b292      	uxth	r2, r2
 800d2a2:	4611      	mov	r1, r2
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fe ffd6 	bl	800c256 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	2b03      	cmp	r3, #3
 800d2b0:	d109      	bne.n	800d2c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	f103 0214 	add.w	r2, r3, #20
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	0c1b      	lsrs	r3, r3, #16
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	4619      	mov	r1, r3
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	f7fe ffc8 	bl	800c256 <st_word>
	}
}
 800d2c6:	bf00      	nop
 800d2c8:	3710      	adds	r7, #16
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
	...

0800d2d0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d2d0:	b590      	push	{r4, r7, lr}
 800d2d2:	b087      	sub	sp, #28
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	331a      	adds	r3, #26
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7fe ff7e 	bl	800c1e0 <ld_word>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <cmp_lfn+0x1e>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	e059      	b.n	800d3a2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2f6:	1e5a      	subs	r2, r3, #1
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	005b      	lsls	r3, r3, #1
 800d2fc:	4413      	add	r3, r2
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4413      	add	r3, r2
 800d302:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d304:	2301      	movs	r3, #1
 800d306:	81fb      	strh	r3, [r7, #14]
 800d308:	2300      	movs	r3, #0
 800d30a:	613b      	str	r3, [r7, #16]
 800d30c:	e033      	b.n	800d376 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d30e:	4a27      	ldr	r2, [pc, #156]	; (800d3ac <cmp_lfn+0xdc>)
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	4413      	add	r3, r2
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	461a      	mov	r2, r3
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	4413      	add	r3, r2
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7fe ff5f 	bl	800c1e0 <ld_word>
 800d322:	4603      	mov	r3, r0
 800d324:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d326:	89fb      	ldrh	r3, [r7, #14]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d01a      	beq.n	800d362 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	2bfe      	cmp	r3, #254	; 0xfe
 800d330:	d812      	bhi.n	800d358 <cmp_lfn+0x88>
 800d332:	89bb      	ldrh	r3, [r7, #12]
 800d334:	4618      	mov	r0, r3
 800d336:	f002 f80f 	bl	800f358 <ff_wtoupper>
 800d33a:	4603      	mov	r3, r0
 800d33c:	461c      	mov	r4, r3
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	1c5a      	adds	r2, r3, #1
 800d342:	617a      	str	r2, [r7, #20]
 800d344:	005b      	lsls	r3, r3, #1
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	4413      	add	r3, r2
 800d34a:	881b      	ldrh	r3, [r3, #0]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f002 f803 	bl	800f358 <ff_wtoupper>
 800d352:	4603      	mov	r3, r0
 800d354:	429c      	cmp	r4, r3
 800d356:	d001      	beq.n	800d35c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d358:	2300      	movs	r3, #0
 800d35a:	e022      	b.n	800d3a2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d35c:	89bb      	ldrh	r3, [r7, #12]
 800d35e:	81fb      	strh	r3, [r7, #14]
 800d360:	e006      	b.n	800d370 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d362:	89bb      	ldrh	r3, [r7, #12]
 800d364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d368:	4293      	cmp	r3, r2
 800d36a:	d001      	beq.n	800d370 <cmp_lfn+0xa0>
 800d36c:	2300      	movs	r3, #0
 800d36e:	e018      	b.n	800d3a2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	3301      	adds	r3, #1
 800d374:	613b      	str	r3, [r7, #16]
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	2b0c      	cmp	r3, #12
 800d37a:	d9c8      	bls.n	800d30e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d384:	2b00      	cmp	r3, #0
 800d386:	d00b      	beq.n	800d3a0 <cmp_lfn+0xd0>
 800d388:	89fb      	ldrh	r3, [r7, #14]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d008      	beq.n	800d3a0 <cmp_lfn+0xd0>
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	005b      	lsls	r3, r3, #1
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	4413      	add	r3, r2
 800d396:	881b      	ldrh	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d001      	beq.n	800d3a0 <cmp_lfn+0xd0>
 800d39c:	2300      	movs	r3, #0
 800d39e:	e000      	b.n	800d3a2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d3a0:	2301      	movs	r3, #1
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	371c      	adds	r7, #28
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd90      	pop	{r4, r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	08012ee8 	.word	0x08012ee8

0800d3b0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b086      	sub	sp, #24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	331a      	adds	r3, #26
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fe ff0e 	bl	800c1e0 <ld_word>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d001      	beq.n	800d3ce <pick_lfn+0x1e>
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	e04d      	b.n	800d46a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3d6:	1e5a      	subs	r2, r3, #1
 800d3d8:	4613      	mov	r3, r2
 800d3da:	005b      	lsls	r3, r3, #1
 800d3dc:	4413      	add	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	4413      	add	r3, r2
 800d3e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	81fb      	strh	r3, [r7, #14]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	613b      	str	r3, [r7, #16]
 800d3ec:	e028      	b.n	800d440 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d3ee:	4a21      	ldr	r2, [pc, #132]	; (800d474 <pick_lfn+0xc4>)
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fe feef 	bl	800c1e0 <ld_word>
 800d402:	4603      	mov	r3, r0
 800d404:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d406:	89fb      	ldrh	r3, [r7, #14]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00f      	beq.n	800d42c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	2bfe      	cmp	r3, #254	; 0xfe
 800d410:	d901      	bls.n	800d416 <pick_lfn+0x66>
 800d412:	2300      	movs	r3, #0
 800d414:	e029      	b.n	800d46a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d416:	89bb      	ldrh	r3, [r7, #12]
 800d418:	81fb      	strh	r3, [r7, #14]
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	1c5a      	adds	r2, r3, #1
 800d41e:	617a      	str	r2, [r7, #20]
 800d420:	005b      	lsls	r3, r3, #1
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4413      	add	r3, r2
 800d426:	89fa      	ldrh	r2, [r7, #14]
 800d428:	801a      	strh	r2, [r3, #0]
 800d42a:	e006      	b.n	800d43a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d42c:	89bb      	ldrh	r3, [r7, #12]
 800d42e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d432:	4293      	cmp	r3, r2
 800d434:	d001      	beq.n	800d43a <pick_lfn+0x8a>
 800d436:	2300      	movs	r3, #0
 800d438:	e017      	b.n	800d46a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	3301      	adds	r3, #1
 800d43e:	613b      	str	r3, [r7, #16]
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	2b0c      	cmp	r3, #12
 800d444:	d9d3      	bls.n	800d3ee <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00a      	beq.n	800d468 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	2bfe      	cmp	r3, #254	; 0xfe
 800d456:	d901      	bls.n	800d45c <pick_lfn+0xac>
 800d458:	2300      	movs	r3, #0
 800d45a:	e006      	b.n	800d46a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	005b      	lsls	r3, r3, #1
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	4413      	add	r3, r2
 800d464:	2200      	movs	r2, #0
 800d466:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800d468:	2301      	movs	r3, #1
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3718      	adds	r7, #24
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	08012ee8 	.word	0x08012ee8

0800d478 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b088      	sub	sp, #32
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	4611      	mov	r1, r2
 800d484:	461a      	mov	r2, r3
 800d486:	460b      	mov	r3, r1
 800d488:	71fb      	strb	r3, [r7, #7]
 800d48a:	4613      	mov	r3, r2
 800d48c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	330d      	adds	r3, #13
 800d492:	79ba      	ldrb	r2, [r7, #6]
 800d494:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	330b      	adds	r3, #11
 800d49a:	220f      	movs	r2, #15
 800d49c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	330c      	adds	r3, #12
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	331a      	adds	r3, #26
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fe fed2 	bl	800c256 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d4b2:	79fb      	ldrb	r3, [r7, #7]
 800d4b4:	1e5a      	subs	r2, r3, #1
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	005b      	lsls	r3, r3, #1
 800d4ba:	4413      	add	r3, r2
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	4413      	add	r3, r2
 800d4c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	82fb      	strh	r3, [r7, #22]
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d4ca:	8afb      	ldrh	r3, [r7, #22]
 800d4cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d007      	beq.n	800d4e4 <put_lfn+0x6c>
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	1c5a      	adds	r2, r3, #1
 800d4d8:	61fa      	str	r2, [r7, #28]
 800d4da:	005b      	lsls	r3, r3, #1
 800d4dc:	68fa      	ldr	r2, [r7, #12]
 800d4de:	4413      	add	r3, r2
 800d4e0:	881b      	ldrh	r3, [r3, #0]
 800d4e2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d4e4:	4a17      	ldr	r2, [pc, #92]	; (800d544 <put_lfn+0xcc>)
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	8afa      	ldrh	r2, [r7, #22]
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fe fead 	bl	800c256 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d4fc:	8afb      	ldrh	r3, [r7, #22]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d102      	bne.n	800d508 <put_lfn+0x90>
 800d502:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d506:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	3301      	adds	r3, #1
 800d50c:	61bb      	str	r3, [r7, #24]
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	2b0c      	cmp	r3, #12
 800d512:	d9da      	bls.n	800d4ca <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d514:	8afb      	ldrh	r3, [r7, #22]
 800d516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d006      	beq.n	800d52c <put_lfn+0xb4>
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	005b      	lsls	r3, r3, #1
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	4413      	add	r3, r2
 800d526:	881b      	ldrh	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d103      	bne.n	800d534 <put_lfn+0xbc>
 800d52c:	79fb      	ldrb	r3, [r7, #7]
 800d52e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d532:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	79fa      	ldrb	r2, [r7, #7]
 800d538:	701a      	strb	r2, [r3, #0]
}
 800d53a:	bf00      	nop
 800d53c:	3720      	adds	r7, #32
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	08012ee8 	.word	0x08012ee8

0800d548 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b08c      	sub	sp, #48	; 0x30
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	607a      	str	r2, [r7, #4]
 800d554:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d556:	220b      	movs	r2, #11
 800d558:	68b9      	ldr	r1, [r7, #8]
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f7fe fec2 	bl	800c2e4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	2b05      	cmp	r3, #5
 800d564:	d92b      	bls.n	800d5be <gen_numname+0x76>
		sr = seq;
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d56a:	e022      	b.n	800d5b2 <gen_numname+0x6a>
			wc = *lfn++;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	1c9a      	adds	r2, r3, #2
 800d570:	607a      	str	r2, [r7, #4]
 800d572:	881b      	ldrh	r3, [r3, #0]
 800d574:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d576:	2300      	movs	r3, #0
 800d578:	62bb      	str	r3, [r7, #40]	; 0x28
 800d57a:	e017      	b.n	800d5ac <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	005a      	lsls	r2, r3, #1
 800d580:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d582:	f003 0301 	and.w	r3, r3, #1
 800d586:	4413      	add	r3, r2
 800d588:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d58a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d58c:	085b      	lsrs	r3, r3, #1
 800d58e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d596:	2b00      	cmp	r3, #0
 800d598:	d005      	beq.n	800d5a6 <gen_numname+0x5e>
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d5a0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d5a4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ae:	2b0f      	cmp	r3, #15
 800d5b0:	d9e4      	bls.n	800d57c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	881b      	ldrh	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1d8      	bne.n	800d56c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d5be:	2307      	movs	r3, #7
 800d5c0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	f003 030f 	and.w	r3, r3, #15
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	3330      	adds	r3, #48	; 0x30
 800d5ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d5d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5d6:	2b39      	cmp	r3, #57	; 0x39
 800d5d8:	d904      	bls.n	800d5e4 <gen_numname+0x9c>
 800d5da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5de:	3307      	adds	r3, #7
 800d5e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e6:	1e5a      	subs	r2, r3, #1
 800d5e8:	62ba      	str	r2, [r7, #40]	; 0x28
 800d5ea:	3330      	adds	r3, #48	; 0x30
 800d5ec:	443b      	add	r3, r7
 800d5ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d5f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	091b      	lsrs	r3, r3, #4
 800d5fa:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1df      	bne.n	800d5c2 <gen_numname+0x7a>
	ns[i] = '~';
 800d602:	f107 0214 	add.w	r2, r7, #20
 800d606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d608:	4413      	add	r3, r2
 800d60a:	227e      	movs	r2, #126	; 0x7e
 800d60c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d60e:	2300      	movs	r3, #0
 800d610:	627b      	str	r3, [r7, #36]	; 0x24
 800d612:	e002      	b.n	800d61a <gen_numname+0xd2>
 800d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d616:	3301      	adds	r3, #1
 800d618:	627b      	str	r3, [r7, #36]	; 0x24
 800d61a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61e:	429a      	cmp	r2, r3
 800d620:	d205      	bcs.n	800d62e <gen_numname+0xe6>
 800d622:	68fa      	ldr	r2, [r7, #12]
 800d624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d626:	4413      	add	r3, r2
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	2b20      	cmp	r3, #32
 800d62c:	d1f2      	bne.n	800d614 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d630:	2b07      	cmp	r3, #7
 800d632:	d807      	bhi.n	800d644 <gen_numname+0xfc>
 800d634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d636:	1c5a      	adds	r2, r3, #1
 800d638:	62ba      	str	r2, [r7, #40]	; 0x28
 800d63a:	3330      	adds	r3, #48	; 0x30
 800d63c:	443b      	add	r3, r7
 800d63e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d642:	e000      	b.n	800d646 <gen_numname+0xfe>
 800d644:	2120      	movs	r1, #32
 800d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d648:	1c5a      	adds	r2, r3, #1
 800d64a:	627a      	str	r2, [r7, #36]	; 0x24
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	4413      	add	r3, r2
 800d650:	460a      	mov	r2, r1
 800d652:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d656:	2b07      	cmp	r3, #7
 800d658:	d9e9      	bls.n	800d62e <gen_numname+0xe6>
}
 800d65a:	bf00      	nop
 800d65c:	bf00      	nop
 800d65e:	3730      	adds	r7, #48	; 0x30
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d664:	b480      	push	{r7}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d66c:	2300      	movs	r3, #0
 800d66e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d670:	230b      	movs	r3, #11
 800d672:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d674:	7bfb      	ldrb	r3, [r7, #15]
 800d676:	b2da      	uxtb	r2, r3
 800d678:	0852      	lsrs	r2, r2, #1
 800d67a:	01db      	lsls	r3, r3, #7
 800d67c:	4313      	orrs	r3, r2
 800d67e:	b2da      	uxtb	r2, r3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	1c59      	adds	r1, r3, #1
 800d684:	6079      	str	r1, [r7, #4]
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	4413      	add	r3, r2
 800d68a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	3b01      	subs	r3, #1
 800d690:	60bb      	str	r3, [r7, #8]
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1ed      	bne.n	800d674 <sum_sfn+0x10>
	return sum;
 800d698:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3714      	adds	r7, #20
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr

0800d6a6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b086      	sub	sp, #24
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
 800d6ae:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d6b0:	2304      	movs	r3, #4
 800d6b2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d6ba:	23ff      	movs	r3, #255	; 0xff
 800d6bc:	757b      	strb	r3, [r7, #21]
 800d6be:	23ff      	movs	r3, #255	; 0xff
 800d6c0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d6c2:	e081      	b.n	800d7c8 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	69db      	ldr	r3, [r3, #28]
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6938      	ldr	r0, [r7, #16]
 800d6cc:	f7ff f838 	bl	800c740 <move_window>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d6d4:	7dfb      	ldrb	r3, [r7, #23]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d17c      	bne.n	800d7d4 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a1b      	ldr	r3, [r3, #32]
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d6e2:	7dbb      	ldrb	r3, [r7, #22]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d102      	bne.n	800d6ee <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d6e8:	2304      	movs	r3, #4
 800d6ea:	75fb      	strb	r3, [r7, #23]
 800d6ec:	e077      	b.n	800d7de <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6a1b      	ldr	r3, [r3, #32]
 800d6f2:	330b      	adds	r3, #11
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6fa:	73fb      	strb	r3, [r7, #15]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	7bfa      	ldrb	r2, [r7, #15]
 800d700:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d702:	7dbb      	ldrb	r3, [r7, #22]
 800d704:	2be5      	cmp	r3, #229	; 0xe5
 800d706:	d00e      	beq.n	800d726 <dir_read+0x80>
 800d708:	7dbb      	ldrb	r3, [r7, #22]
 800d70a:	2b2e      	cmp	r3, #46	; 0x2e
 800d70c:	d00b      	beq.n	800d726 <dir_read+0x80>
 800d70e:	7bfb      	ldrb	r3, [r7, #15]
 800d710:	f023 0320 	bic.w	r3, r3, #32
 800d714:	2b08      	cmp	r3, #8
 800d716:	bf0c      	ite	eq
 800d718:	2301      	moveq	r3, #1
 800d71a:	2300      	movne	r3, #0
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	461a      	mov	r2, r3
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	4293      	cmp	r3, r2
 800d724:	d002      	beq.n	800d72c <dir_read+0x86>
				ord = 0xFF;
 800d726:	23ff      	movs	r3, #255	; 0xff
 800d728:	757b      	strb	r3, [r7, #21]
 800d72a:	e044      	b.n	800d7b6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d72c:	7bfb      	ldrb	r3, [r7, #15]
 800d72e:	2b0f      	cmp	r3, #15
 800d730:	d12f      	bne.n	800d792 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d732:	7dbb      	ldrb	r3, [r7, #22]
 800d734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00d      	beq.n	800d758 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6a1b      	ldr	r3, [r3, #32]
 800d740:	7b5b      	ldrb	r3, [r3, #13]
 800d742:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d744:	7dbb      	ldrb	r3, [r7, #22]
 800d746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d74a:	75bb      	strb	r3, [r7, #22]
 800d74c:	7dbb      	ldrb	r3, [r7, #22]
 800d74e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	695a      	ldr	r2, [r3, #20]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d758:	7dba      	ldrb	r2, [r7, #22]
 800d75a:	7d7b      	ldrb	r3, [r7, #21]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d115      	bne.n	800d78c <dir_read+0xe6>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a1b      	ldr	r3, [r3, #32]
 800d764:	330d      	adds	r3, #13
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	7d3a      	ldrb	r2, [r7, #20]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d10e      	bne.n	800d78c <dir_read+0xe6>
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	691a      	ldr	r2, [r3, #16]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6a1b      	ldr	r3, [r3, #32]
 800d776:	4619      	mov	r1, r3
 800d778:	4610      	mov	r0, r2
 800d77a:	f7ff fe19 	bl	800d3b0 <pick_lfn>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d003      	beq.n	800d78c <dir_read+0xe6>
 800d784:	7d7b      	ldrb	r3, [r7, #21]
 800d786:	3b01      	subs	r3, #1
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	e000      	b.n	800d78e <dir_read+0xe8>
 800d78c:	23ff      	movs	r3, #255	; 0xff
 800d78e:	757b      	strb	r3, [r7, #21]
 800d790:	e011      	b.n	800d7b6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d792:	7d7b      	ldrb	r3, [r7, #21]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d109      	bne.n	800d7ac <dir_read+0x106>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6a1b      	ldr	r3, [r3, #32]
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7ff ff61 	bl	800d664 <sum_sfn>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	7d3b      	ldrb	r3, [r7, #20]
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d015      	beq.n	800d7d8 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800d7b4:	e010      	b.n	800d7d8 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f7ff fc2c 	bl	800d016 <dir_next>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d7c2:	7dfb      	ldrb	r3, [r7, #23]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d109      	bne.n	800d7dc <dir_read+0x136>
	while (dp->sect) {
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	69db      	ldr	r3, [r3, #28]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f47f af79 	bne.w	800d6c4 <dir_read+0x1e>
 800d7d2:	e004      	b.n	800d7de <dir_read+0x138>
		if (res != FR_OK) break;
 800d7d4:	bf00      	nop
 800d7d6:	e002      	b.n	800d7de <dir_read+0x138>
					break;
 800d7d8:	bf00      	nop
 800d7da:	e000      	b.n	800d7de <dir_read+0x138>
		if (res != FR_OK) break;
 800d7dc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d7de:	7dfb      	ldrb	r3, [r7, #23]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <dir_read+0x144>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	61da      	str	r2, [r3, #28]
	return res;
 800d7ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3718      	adds	r7, #24
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d802:	2100      	movs	r1, #0
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7ff fb7d 	bl	800cf04 <dir_sdi>
 800d80a:	4603      	mov	r3, r0
 800d80c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d80e:	7dfb      	ldrb	r3, [r7, #23]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d001      	beq.n	800d818 <dir_find+0x24>
 800d814:	7dfb      	ldrb	r3, [r7, #23]
 800d816:	e0a9      	b.n	800d96c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d818:	23ff      	movs	r3, #255	; 0xff
 800d81a:	753b      	strb	r3, [r7, #20]
 800d81c:	7d3b      	ldrb	r3, [r7, #20]
 800d81e:	757b      	strb	r3, [r7, #21]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f04f 32ff 	mov.w	r2, #4294967295
 800d826:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	69db      	ldr	r3, [r3, #28]
 800d82c:	4619      	mov	r1, r3
 800d82e:	6938      	ldr	r0, [r7, #16]
 800d830:	f7fe ff86 	bl	800c740 <move_window>
 800d834:	4603      	mov	r3, r0
 800d836:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d838:	7dfb      	ldrb	r3, [r7, #23]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f040 8090 	bne.w	800d960 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6a1b      	ldr	r3, [r3, #32]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d848:	7dbb      	ldrb	r3, [r7, #22]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d102      	bne.n	800d854 <dir_find+0x60>
 800d84e:	2304      	movs	r3, #4
 800d850:	75fb      	strb	r3, [r7, #23]
 800d852:	e08a      	b.n	800d96a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6a1b      	ldr	r3, [r3, #32]
 800d858:	330b      	adds	r3, #11
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d860:	73fb      	strb	r3, [r7, #15]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	7bfa      	ldrb	r2, [r7, #15]
 800d866:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d868:	7dbb      	ldrb	r3, [r7, #22]
 800d86a:	2be5      	cmp	r3, #229	; 0xe5
 800d86c:	d007      	beq.n	800d87e <dir_find+0x8a>
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
 800d870:	f003 0308 	and.w	r3, r3, #8
 800d874:	2b00      	cmp	r3, #0
 800d876:	d009      	beq.n	800d88c <dir_find+0x98>
 800d878:	7bfb      	ldrb	r3, [r7, #15]
 800d87a:	2b0f      	cmp	r3, #15
 800d87c:	d006      	beq.n	800d88c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d87e:	23ff      	movs	r3, #255	; 0xff
 800d880:	757b      	strb	r3, [r7, #21]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f04f 32ff 	mov.w	r2, #4294967295
 800d888:	631a      	str	r2, [r3, #48]	; 0x30
 800d88a:	e05e      	b.n	800d94a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d88c:	7bfb      	ldrb	r3, [r7, #15]
 800d88e:	2b0f      	cmp	r3, #15
 800d890:	d136      	bne.n	800d900 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d154      	bne.n	800d94a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d8a0:	7dbb      	ldrb	r3, [r7, #22]
 800d8a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d00d      	beq.n	800d8c6 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6a1b      	ldr	r3, [r3, #32]
 800d8ae:	7b5b      	ldrb	r3, [r3, #13]
 800d8b0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d8b2:	7dbb      	ldrb	r3, [r7, #22]
 800d8b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8b8:	75bb      	strb	r3, [r7, #22]
 800d8ba:	7dbb      	ldrb	r3, [r7, #22]
 800d8bc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	695a      	ldr	r2, [r3, #20]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d8c6:	7dba      	ldrb	r2, [r7, #22]
 800d8c8:	7d7b      	ldrb	r3, [r7, #21]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d115      	bne.n	800d8fa <dir_find+0x106>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	330d      	adds	r3, #13
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	7d3a      	ldrb	r2, [r7, #20]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d10e      	bne.n	800d8fa <dir_find+0x106>
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	691a      	ldr	r2, [r3, #16]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6a1b      	ldr	r3, [r3, #32]
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	f7ff fcf2 	bl	800d2d0 <cmp_lfn>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <dir_find+0x106>
 800d8f2:	7d7b      	ldrb	r3, [r7, #21]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	e000      	b.n	800d8fc <dir_find+0x108>
 800d8fa:	23ff      	movs	r3, #255	; 0xff
 800d8fc:	757b      	strb	r3, [r7, #21]
 800d8fe:	e024      	b.n	800d94a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d900:	7d7b      	ldrb	r3, [r7, #21]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d109      	bne.n	800d91a <dir_find+0x126>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6a1b      	ldr	r3, [r3, #32]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7ff feaa 	bl	800d664 <sum_sfn>
 800d910:	4603      	mov	r3, r0
 800d912:	461a      	mov	r2, r3
 800d914:	7d3b      	ldrb	r3, [r7, #20]
 800d916:	4293      	cmp	r3, r2
 800d918:	d024      	beq.n	800d964 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d920:	f003 0301 	and.w	r3, r3, #1
 800d924:	2b00      	cmp	r3, #0
 800d926:	d10a      	bne.n	800d93e <dir_find+0x14a>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6a18      	ldr	r0, [r3, #32]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	3324      	adds	r3, #36	; 0x24
 800d930:	220b      	movs	r2, #11
 800d932:	4619      	mov	r1, r3
 800d934:	f7fe fd12 	bl	800c35c <mem_cmp>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d014      	beq.n	800d968 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d93e:	23ff      	movs	r3, #255	; 0xff
 800d940:	757b      	strb	r3, [r7, #21]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f04f 32ff 	mov.w	r2, #4294967295
 800d948:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d94a:	2100      	movs	r1, #0
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f7ff fb62 	bl	800d016 <dir_next>
 800d952:	4603      	mov	r3, r0
 800d954:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d956:	7dfb      	ldrb	r3, [r7, #23]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f43f af65 	beq.w	800d828 <dir_find+0x34>
 800d95e:	e004      	b.n	800d96a <dir_find+0x176>
		if (res != FR_OK) break;
 800d960:	bf00      	nop
 800d962:	e002      	b.n	800d96a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d964:	bf00      	nop
 800d966:	e000      	b.n	800d96a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d968:	bf00      	nop

	return res;
 800d96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3718      	adds	r7, #24
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b08c      	sub	sp, #48	; 0x30
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d988:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d001      	beq.n	800d994 <dir_register+0x20>
 800d990:	2306      	movs	r3, #6
 800d992:	e0e0      	b.n	800db56 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d994:	2300      	movs	r3, #0
 800d996:	627b      	str	r3, [r7, #36]	; 0x24
 800d998:	e002      	b.n	800d9a0 <dir_register+0x2c>
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	3301      	adds	r3, #1
 800d99e:	627b      	str	r3, [r7, #36]	; 0x24
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	691a      	ldr	r2, [r3, #16]
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	4413      	add	r3, r2
 800d9aa:	881b      	ldrh	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d1f4      	bne.n	800d99a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d9b6:	f107 030c 	add.w	r3, r7, #12
 800d9ba:	220c      	movs	r2, #12
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7fe fc91 	bl	800c2e4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d9c2:	7dfb      	ldrb	r3, [r7, #23]
 800d9c4:	f003 0301 	and.w	r3, r3, #1
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d032      	beq.n	800da32 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2240      	movs	r2, #64	; 0x40
 800d9d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9d8:	e016      	b.n	800da08 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	691a      	ldr	r2, [r3, #16]
 800d9e4:	f107 010c 	add.w	r1, r7, #12
 800d9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ea:	f7ff fdad 	bl	800d548 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7ff ff00 	bl	800d7f4 <dir_find>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d9fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d106      	bne.n	800da10 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800da02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da04:	3301      	adds	r3, #1
 800da06:	62bb      	str	r3, [r7, #40]	; 0x28
 800da08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0a:	2b63      	cmp	r3, #99	; 0x63
 800da0c:	d9e5      	bls.n	800d9da <dir_register+0x66>
 800da0e:	e000      	b.n	800da12 <dir_register+0x9e>
			if (res != FR_OK) break;
 800da10:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800da12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da14:	2b64      	cmp	r3, #100	; 0x64
 800da16:	d101      	bne.n	800da1c <dir_register+0xa8>
 800da18:	2307      	movs	r3, #7
 800da1a:	e09c      	b.n	800db56 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800da1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da20:	2b04      	cmp	r3, #4
 800da22:	d002      	beq.n	800da2a <dir_register+0xb6>
 800da24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da28:	e095      	b.n	800db56 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800da2a:	7dfa      	ldrb	r2, [r7, #23]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800da32:	7dfb      	ldrb	r3, [r7, #23]
 800da34:	f003 0302 	and.w	r3, r3, #2
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d007      	beq.n	800da4c <dir_register+0xd8>
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	330c      	adds	r3, #12
 800da40:	4a47      	ldr	r2, [pc, #284]	; (800db60 <dir_register+0x1ec>)
 800da42:	fba2 2303 	umull	r2, r3, r2, r3
 800da46:	089b      	lsrs	r3, r3, #2
 800da48:	3301      	adds	r3, #1
 800da4a:	e000      	b.n	800da4e <dir_register+0xda>
 800da4c:	2301      	movs	r3, #1
 800da4e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800da50:	6a39      	ldr	r1, [r7, #32]
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7ff fbb5 	bl	800d1c2 <dir_alloc>
 800da58:	4603      	mov	r3, r0
 800da5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800da5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da62:	2b00      	cmp	r3, #0
 800da64:	d148      	bne.n	800daf8 <dir_register+0x184>
 800da66:	6a3b      	ldr	r3, [r7, #32]
 800da68:	3b01      	subs	r3, #1
 800da6a:	623b      	str	r3, [r7, #32]
 800da6c:	6a3b      	ldr	r3, [r7, #32]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d042      	beq.n	800daf8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	695a      	ldr	r2, [r3, #20]
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	015b      	lsls	r3, r3, #5
 800da7a:	1ad3      	subs	r3, r2, r3
 800da7c:	4619      	mov	r1, r3
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7ff fa40 	bl	800cf04 <dir_sdi>
 800da84:	4603      	mov	r3, r0
 800da86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800da8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d132      	bne.n	800daf8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	3324      	adds	r3, #36	; 0x24
 800da96:	4618      	mov	r0, r3
 800da98:	f7ff fde4 	bl	800d664 <sum_sfn>
 800da9c:	4603      	mov	r3, r0
 800da9e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	69db      	ldr	r3, [r3, #28]
 800daa4:	4619      	mov	r1, r3
 800daa6:	69f8      	ldr	r0, [r7, #28]
 800daa8:	f7fe fe4a 	bl	800c740 <move_window>
 800daac:	4603      	mov	r3, r0
 800daae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800dab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d11d      	bne.n	800daf6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	6918      	ldr	r0, [r3, #16]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6a19      	ldr	r1, [r3, #32]
 800dac2:	6a3b      	ldr	r3, [r7, #32]
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	7efb      	ldrb	r3, [r7, #27]
 800dac8:	f7ff fcd6 	bl	800d478 <put_lfn>
				fs->wflag = 1;
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	2201      	movs	r2, #1
 800dad0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800dad2:	2100      	movs	r1, #0
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7ff fa9e 	bl	800d016 <dir_next>
 800dada:	4603      	mov	r3, r0
 800dadc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800dae0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d107      	bne.n	800daf8 <dir_register+0x184>
 800dae8:	6a3b      	ldr	r3, [r7, #32]
 800daea:	3b01      	subs	r3, #1
 800daec:	623b      	str	r3, [r7, #32]
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1d5      	bne.n	800daa0 <dir_register+0x12c>
 800daf4:	e000      	b.n	800daf8 <dir_register+0x184>
				if (res != FR_OK) break;
 800daf6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800daf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d128      	bne.n	800db52 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	69db      	ldr	r3, [r3, #28]
 800db04:	4619      	mov	r1, r3
 800db06:	69f8      	ldr	r0, [r7, #28]
 800db08:	f7fe fe1a 	bl	800c740 <move_window>
 800db0c:	4603      	mov	r3, r0
 800db0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800db12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db16:	2b00      	cmp	r3, #0
 800db18:	d11b      	bne.n	800db52 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a1b      	ldr	r3, [r3, #32]
 800db1e:	2220      	movs	r2, #32
 800db20:	2100      	movs	r1, #0
 800db22:	4618      	mov	r0, r3
 800db24:	f7fe fbff 	bl	800c326 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6a18      	ldr	r0, [r3, #32]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	3324      	adds	r3, #36	; 0x24
 800db30:	220b      	movs	r2, #11
 800db32:	4619      	mov	r1, r3
 800db34:	f7fe fbd6 	bl	800c2e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	330c      	adds	r3, #12
 800db44:	f002 0218 	and.w	r2, r2, #24
 800db48:	b2d2      	uxtb	r2, r2
 800db4a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800db4c:	69fb      	ldr	r3, [r7, #28]
 800db4e:	2201      	movs	r2, #1
 800db50:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800db52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800db56:	4618      	mov	r0, r3
 800db58:	3730      	adds	r7, #48	; 0x30
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	4ec4ec4f 	.word	0x4ec4ec4f

0800db64 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b086      	sub	sp, #24
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db80:	d007      	beq.n	800db92 <dir_remove+0x2e>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db86:	4619      	mov	r1, r3
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f7ff f9bb 	bl	800cf04 <dir_sdi>
 800db8e:	4603      	mov	r3, r0
 800db90:	e000      	b.n	800db94 <dir_remove+0x30>
 800db92:	2300      	movs	r3, #0
 800db94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800db96:	7dfb      	ldrb	r3, [r7, #23]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d128      	bne.n	800dbee <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	69db      	ldr	r3, [r3, #28]
 800dba0:	4619      	mov	r1, r3
 800dba2:	6938      	ldr	r0, [r7, #16]
 800dba4:	f7fe fdcc 	bl	800c740 <move_window>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dbac:	7dfb      	ldrb	r3, [r7, #23]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d115      	bne.n	800dbde <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6a1b      	ldr	r3, [r3, #32]
 800dbb6:	22e5      	movs	r2, #229	; 0xe5
 800dbb8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	695b      	ldr	r3, [r3, #20]
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d90b      	bls.n	800dbe2 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800dbca:	2100      	movs	r1, #0
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7ff fa22 	bl	800d016 <dir_next>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800dbd6:	7dfb      	ldrb	r3, [r7, #23]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d0df      	beq.n	800db9c <dir_remove+0x38>
 800dbdc:	e002      	b.n	800dbe4 <dir_remove+0x80>
			if (res != FR_OK) break;
 800dbde:	bf00      	nop
 800dbe0:	e000      	b.n	800dbe4 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800dbe2:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800dbe4:	7dfb      	ldrb	r3, [r7, #23]
 800dbe6:	2b04      	cmp	r3, #4
 800dbe8:	d101      	bne.n	800dbee <dir_remove+0x8a>
 800dbea:	2302      	movs	r3, #2
 800dbec:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800dbee:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3718      	adds	r7, #24
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b08a      	sub	sp, #40	; 0x28
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	613b      	str	r3, [r7, #16]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	691b      	ldr	r3, [r3, #16]
 800dc0e:	60fb      	str	r3, [r7, #12]
 800dc10:	2300      	movs	r3, #0
 800dc12:	617b      	str	r3, [r7, #20]
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	61ba      	str	r2, [r7, #24]
 800dc1e:	693a      	ldr	r2, [r7, #16]
 800dc20:	4413      	add	r3, r2
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800dc26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc28:	2b1f      	cmp	r3, #31
 800dc2a:	d940      	bls.n	800dcae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dc2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc2e:	2b2f      	cmp	r3, #47	; 0x2f
 800dc30:	d006      	beq.n	800dc40 <create_name+0x48>
 800dc32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc34:	2b5c      	cmp	r3, #92	; 0x5c
 800dc36:	d110      	bne.n	800dc5a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dc38:	e002      	b.n	800dc40 <create_name+0x48>
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	61bb      	str	r3, [r7, #24]
 800dc40:	693a      	ldr	r2, [r7, #16]
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	4413      	add	r3, r2
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	2b2f      	cmp	r3, #47	; 0x2f
 800dc4a:	d0f6      	beq.n	800dc3a <create_name+0x42>
 800dc4c:	693a      	ldr	r2, [r7, #16]
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	4413      	add	r3, r2
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	2b5c      	cmp	r3, #92	; 0x5c
 800dc56:	d0f0      	beq.n	800dc3a <create_name+0x42>
			break;
 800dc58:	e02a      	b.n	800dcb0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	2bfe      	cmp	r3, #254	; 0xfe
 800dc5e:	d901      	bls.n	800dc64 <create_name+0x6c>
 800dc60:	2306      	movs	r3, #6
 800dc62:	e17d      	b.n	800df60 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800dc64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800dc6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc6c:	2101      	movs	r1, #1
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f001 fb36 	bl	800f2e0 <ff_convert>
 800dc74:	4603      	mov	r3, r0
 800dc76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dc78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d101      	bne.n	800dc82 <create_name+0x8a>
 800dc7e:	2306      	movs	r3, #6
 800dc80:	e16e      	b.n	800df60 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dc82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc84:	2b7f      	cmp	r3, #127	; 0x7f
 800dc86:	d809      	bhi.n	800dc9c <create_name+0xa4>
 800dc88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	488d      	ldr	r0, [pc, #564]	; (800dec4 <create_name+0x2cc>)
 800dc8e:	f7fe fb8c 	bl	800c3aa <chk_chr>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <create_name+0xa4>
 800dc98:	2306      	movs	r3, #6
 800dc9a:	e161      	b.n	800df60 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	1c5a      	adds	r2, r3, #1
 800dca0:	617a      	str	r2, [r7, #20]
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	68fa      	ldr	r2, [r7, #12]
 800dca6:	4413      	add	r3, r2
 800dca8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dcaa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800dcac:	e7b4      	b.n	800dc18 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800dcae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800dcb0:	693a      	ldr	r2, [r7, #16]
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	441a      	add	r2, r3
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dcba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcbc:	2b1f      	cmp	r3, #31
 800dcbe:	d801      	bhi.n	800dcc4 <create_name+0xcc>
 800dcc0:	2304      	movs	r3, #4
 800dcc2:	e000      	b.n	800dcc6 <create_name+0xce>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dcca:	e011      	b.n	800dcf0 <create_name+0xf8>
		w = lfn[di - 1];
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	005b      	lsls	r3, r3, #1
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	4413      	add	r3, r2
 800dcda:	881b      	ldrh	r3, [r3, #0]
 800dcdc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800dcde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dce0:	2b20      	cmp	r3, #32
 800dce2:	d002      	beq.n	800dcea <create_name+0xf2>
 800dce4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dce6:	2b2e      	cmp	r3, #46	; 0x2e
 800dce8:	d106      	bne.n	800dcf8 <create_name+0x100>
		di--;
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	3b01      	subs	r3, #1
 800dcee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1ea      	bne.n	800dccc <create_name+0xd4>
 800dcf6:	e000      	b.n	800dcfa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dcf8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	005b      	lsls	r3, r3, #1
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	4413      	add	r3, r2
 800dd02:	2200      	movs	r2, #0
 800dd04:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d101      	bne.n	800dd10 <create_name+0x118>
 800dd0c:	2306      	movs	r3, #6
 800dd0e:	e127      	b.n	800df60 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	3324      	adds	r3, #36	; 0x24
 800dd14:	220b      	movs	r2, #11
 800dd16:	2120      	movs	r1, #32
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fe fb04 	bl	800c326 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dd1e:	2300      	movs	r3, #0
 800dd20:	61bb      	str	r3, [r7, #24]
 800dd22:	e002      	b.n	800dd2a <create_name+0x132>
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	3301      	adds	r3, #1
 800dd28:	61bb      	str	r3, [r7, #24]
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	005b      	lsls	r3, r3, #1
 800dd2e:	68fa      	ldr	r2, [r7, #12]
 800dd30:	4413      	add	r3, r2
 800dd32:	881b      	ldrh	r3, [r3, #0]
 800dd34:	2b20      	cmp	r3, #32
 800dd36:	d0f5      	beq.n	800dd24 <create_name+0x12c>
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	005b      	lsls	r3, r3, #1
 800dd3c:	68fa      	ldr	r2, [r7, #12]
 800dd3e:	4413      	add	r3, r2
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	2b2e      	cmp	r3, #46	; 0x2e
 800dd44:	d0ee      	beq.n	800dd24 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d009      	beq.n	800dd60 <create_name+0x168>
 800dd4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd50:	f043 0303 	orr.w	r3, r3, #3
 800dd54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dd58:	e002      	b.n	800dd60 <create_name+0x168>
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	617b      	str	r3, [r7, #20]
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d009      	beq.n	800dd7a <create_name+0x182>
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	005b      	lsls	r3, r3, #1
 800dd70:	68fa      	ldr	r2, [r7, #12]
 800dd72:	4413      	add	r3, r2
 800dd74:	881b      	ldrh	r3, [r3, #0]
 800dd76:	2b2e      	cmp	r3, #46	; 0x2e
 800dd78:	d1ef      	bne.n	800dd5a <create_name+0x162>

	i = b = 0; ni = 8;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dd80:	2300      	movs	r3, #0
 800dd82:	623b      	str	r3, [r7, #32]
 800dd84:	2308      	movs	r3, #8
 800dd86:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800dd88:	69bb      	ldr	r3, [r7, #24]
 800dd8a:	1c5a      	adds	r2, r3, #1
 800dd8c:	61ba      	str	r2, [r7, #24]
 800dd8e:	005b      	lsls	r3, r3, #1
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	4413      	add	r3, r2
 800dd94:	881b      	ldrh	r3, [r3, #0]
 800dd96:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800dd98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f000 8090 	beq.w	800dec0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dda0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dda2:	2b20      	cmp	r3, #32
 800dda4:	d006      	beq.n	800ddb4 <create_name+0x1bc>
 800dda6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dda8:	2b2e      	cmp	r3, #46	; 0x2e
 800ddaa:	d10a      	bne.n	800ddc2 <create_name+0x1ca>
 800ddac:	69ba      	ldr	r2, [r7, #24]
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d006      	beq.n	800ddc2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ddb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddb8:	f043 0303 	orr.w	r3, r3, #3
 800ddbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ddc0:	e07d      	b.n	800debe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ddc2:	6a3a      	ldr	r2, [r7, #32]
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d203      	bcs.n	800ddd2 <create_name+0x1da>
 800ddca:	69ba      	ldr	r2, [r7, #24]
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d123      	bne.n	800de1a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	2b0b      	cmp	r3, #11
 800ddd6:	d106      	bne.n	800dde6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ddd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dddc:	f043 0303 	orr.w	r3, r3, #3
 800dde0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dde4:	e075      	b.n	800ded2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dde6:	69ba      	ldr	r2, [r7, #24]
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d005      	beq.n	800ddfa <create_name+0x202>
 800ddee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddf2:	f043 0303 	orr.w	r3, r3, #3
 800ddf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ddfa:	69ba      	ldr	r2, [r7, #24]
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d866      	bhi.n	800ded0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	61bb      	str	r3, [r7, #24]
 800de06:	2308      	movs	r3, #8
 800de08:	623b      	str	r3, [r7, #32]
 800de0a:	230b      	movs	r3, #11
 800de0c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800de0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800de18:	e051      	b.n	800debe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800de1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de1c:	2b7f      	cmp	r3, #127	; 0x7f
 800de1e:	d914      	bls.n	800de4a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800de20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de22:	2100      	movs	r1, #0
 800de24:	4618      	mov	r0, r3
 800de26:	f001 fa5b 	bl	800f2e0 <ff_convert>
 800de2a:	4603      	mov	r3, r0
 800de2c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800de2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de30:	2b00      	cmp	r3, #0
 800de32:	d004      	beq.n	800de3e <create_name+0x246>
 800de34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de36:	3b80      	subs	r3, #128	; 0x80
 800de38:	4a23      	ldr	r2, [pc, #140]	; (800dec8 <create_name+0x2d0>)
 800de3a:	5cd3      	ldrb	r3, [r2, r3]
 800de3c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800de3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de42:	f043 0302 	orr.w	r3, r3, #2
 800de46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800de4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d007      	beq.n	800de60 <create_name+0x268>
 800de50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de52:	4619      	mov	r1, r3
 800de54:	481d      	ldr	r0, [pc, #116]	; (800decc <create_name+0x2d4>)
 800de56:	f7fe faa8 	bl	800c3aa <chk_chr>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d008      	beq.n	800de72 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800de60:	235f      	movs	r3, #95	; 0x5f
 800de62:	84bb      	strh	r3, [r7, #36]	; 0x24
 800de64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de68:	f043 0303 	orr.w	r3, r3, #3
 800de6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de70:	e01b      	b.n	800deaa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800de72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de74:	2b40      	cmp	r3, #64	; 0x40
 800de76:	d909      	bls.n	800de8c <create_name+0x294>
 800de78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de7a:	2b5a      	cmp	r3, #90	; 0x5a
 800de7c:	d806      	bhi.n	800de8c <create_name+0x294>
					b |= 2;
 800de7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de82:	f043 0302 	orr.w	r3, r3, #2
 800de86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800de8a:	e00e      	b.n	800deaa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800de8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de8e:	2b60      	cmp	r3, #96	; 0x60
 800de90:	d90b      	bls.n	800deaa <create_name+0x2b2>
 800de92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de94:	2b7a      	cmp	r3, #122	; 0x7a
 800de96:	d808      	bhi.n	800deaa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800de98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de9c:	f043 0301 	orr.w	r3, r3, #1
 800dea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dea6:	3b20      	subs	r3, #32
 800dea8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800deaa:	6a3b      	ldr	r3, [r7, #32]
 800deac:	1c5a      	adds	r2, r3, #1
 800deae:	623a      	str	r2, [r7, #32]
 800deb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800deb2:	b2d1      	uxtb	r1, r2
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	4413      	add	r3, r2
 800deb8:	460a      	mov	r2, r1
 800deba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800debe:	e763      	b.n	800dd88 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dec0:	bf00      	nop
 800dec2:	e006      	b.n	800ded2 <create_name+0x2da>
 800dec4:	08012dc4 	.word	0x08012dc4
 800dec8:	08012e68 	.word	0x08012e68
 800decc:	08012dd0 	.word	0x08012dd0
			if (si > di) break;			/* No extension */
 800ded0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ded8:	2be5      	cmp	r3, #229	; 0xe5
 800deda:	d103      	bne.n	800dee4 <create_name+0x2ec>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2205      	movs	r2, #5
 800dee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	2b08      	cmp	r3, #8
 800dee8:	d104      	bne.n	800def4 <create_name+0x2fc>
 800deea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800def4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800def8:	f003 030c 	and.w	r3, r3, #12
 800defc:	2b0c      	cmp	r3, #12
 800defe:	d005      	beq.n	800df0c <create_name+0x314>
 800df00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df04:	f003 0303 	and.w	r3, r3, #3
 800df08:	2b03      	cmp	r3, #3
 800df0a:	d105      	bne.n	800df18 <create_name+0x320>
 800df0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df10:	f043 0302 	orr.w	r3, r3, #2
 800df14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800df18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df1c:	f003 0302 	and.w	r3, r3, #2
 800df20:	2b00      	cmp	r3, #0
 800df22:	d117      	bne.n	800df54 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800df24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df28:	f003 0303 	and.w	r3, r3, #3
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d105      	bne.n	800df3c <create_name+0x344>
 800df30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df34:	f043 0310 	orr.w	r3, r3, #16
 800df38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800df3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df40:	f003 030c 	and.w	r3, r3, #12
 800df44:	2b04      	cmp	r3, #4
 800df46:	d105      	bne.n	800df54 <create_name+0x35c>
 800df48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df4c:	f043 0308 	orr.w	r3, r3, #8
 800df50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800df5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800df5e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800df60:	4618      	mov	r0, r3
 800df62:	3728      	adds	r7, #40	; 0x28
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800df7c:	e002      	b.n	800df84 <follow_path+0x1c>
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	3301      	adds	r3, #1
 800df82:	603b      	str	r3, [r7, #0]
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	2b2f      	cmp	r3, #47	; 0x2f
 800df8a:	d0f8      	beq.n	800df7e <follow_path+0x16>
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2b5c      	cmp	r3, #92	; 0x5c
 800df92:	d0f4      	beq.n	800df7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	2200      	movs	r2, #0
 800df98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	2b1f      	cmp	r3, #31
 800dfa0:	d80a      	bhi.n	800dfb8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2280      	movs	r2, #128	; 0x80
 800dfa6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dfaa:	2100      	movs	r1, #0
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7fe ffa9 	bl	800cf04 <dir_sdi>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	75fb      	strb	r3, [r7, #23]
 800dfb6:	e048      	b.n	800e04a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dfb8:	463b      	mov	r3, r7
 800dfba:	4619      	mov	r1, r3
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f7ff fe1b 	bl	800dbf8 <create_name>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dfc6:	7dfb      	ldrb	r3, [r7, #23]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d139      	bne.n	800e040 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7ff fc11 	bl	800d7f4 <dir_find>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dfdc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dfde:	7dfb      	ldrb	r3, [r7, #23]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00a      	beq.n	800dffa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dfe4:	7dfb      	ldrb	r3, [r7, #23]
 800dfe6:	2b04      	cmp	r3, #4
 800dfe8:	d12c      	bne.n	800e044 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dfea:	7afb      	ldrb	r3, [r7, #11]
 800dfec:	f003 0304 	and.w	r3, r3, #4
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d127      	bne.n	800e044 <follow_path+0xdc>
 800dff4:	2305      	movs	r3, #5
 800dff6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dff8:	e024      	b.n	800e044 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dffa:	7afb      	ldrb	r3, [r7, #11]
 800dffc:	f003 0304 	and.w	r3, r3, #4
 800e000:	2b00      	cmp	r3, #0
 800e002:	d121      	bne.n	800e048 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	799b      	ldrb	r3, [r3, #6]
 800e008:	f003 0310 	and.w	r3, r3, #16
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d102      	bne.n	800e016 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e010:	2305      	movs	r3, #5
 800e012:	75fb      	strb	r3, [r7, #23]
 800e014:	e019      	b.n	800e04a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	695b      	ldr	r3, [r3, #20]
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	8992      	ldrh	r2, [r2, #12]
 800e024:	fbb3 f0f2 	udiv	r0, r3, r2
 800e028:	fb00 f202 	mul.w	r2, r0, r2
 800e02c:	1a9b      	subs	r3, r3, r2
 800e02e:	440b      	add	r3, r1
 800e030:	4619      	mov	r1, r3
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f7ff f90c 	bl	800d250 <ld_clust>
 800e038:	4602      	mov	r2, r0
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e03e:	e7bb      	b.n	800dfb8 <follow_path+0x50>
			if (res != FR_OK) break;
 800e040:	bf00      	nop
 800e042:	e002      	b.n	800e04a <follow_path+0xe2>
				break;
 800e044:	bf00      	nop
 800e046:	e000      	b.n	800e04a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e048:	bf00      	nop
			}
		}
	}

	return res;
 800e04a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3718      	adds	r7, #24
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e054:	b480      	push	{r7}
 800e056:	b087      	sub	sp, #28
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e05c:	f04f 33ff 	mov.w	r3, #4294967295
 800e060:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d031      	beq.n	800e0ce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	617b      	str	r3, [r7, #20]
 800e070:	e002      	b.n	800e078 <get_ldnumber+0x24>
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	3301      	adds	r3, #1
 800e076:	617b      	str	r3, [r7, #20]
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	2b1f      	cmp	r3, #31
 800e07e:	d903      	bls.n	800e088 <get_ldnumber+0x34>
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	2b3a      	cmp	r3, #58	; 0x3a
 800e086:	d1f4      	bne.n	800e072 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	2b3a      	cmp	r3, #58	; 0x3a
 800e08e:	d11c      	bne.n	800e0ca <get_ldnumber+0x76>
			tp = *path;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	1c5a      	adds	r2, r3, #1
 800e09a:	60fa      	str	r2, [r7, #12]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	3b30      	subs	r3, #48	; 0x30
 800e0a0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	2b09      	cmp	r3, #9
 800e0a6:	d80e      	bhi.n	800e0c6 <get_ldnumber+0x72>
 800e0a8:	68fa      	ldr	r2, [r7, #12]
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d10a      	bne.n	800e0c6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d107      	bne.n	800e0c6 <get_ldnumber+0x72>
					vol = (int)i;
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	617b      	str	r3, [r7, #20]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	697a      	ldr	r2, [r7, #20]
 800e0c4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	e002      	b.n	800e0d0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e0ce:	693b      	ldr	r3, [r7, #16]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	371c      	adds	r7, #28
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	70da      	strb	r2, [r3, #3]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f7fe fb22 	bl	800c740 <move_window>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d001      	beq.n	800e106 <check_fs+0x2a>
 800e102:	2304      	movs	r3, #4
 800e104:	e038      	b.n	800e178 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	3338      	adds	r3, #56	; 0x38
 800e10a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fe f866 	bl	800c1e0 <ld_word>
 800e114:	4603      	mov	r3, r0
 800e116:	461a      	mov	r2, r3
 800e118:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d001      	beq.n	800e124 <check_fs+0x48>
 800e120:	2303      	movs	r3, #3
 800e122:	e029      	b.n	800e178 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e12a:	2be9      	cmp	r3, #233	; 0xe9
 800e12c:	d009      	beq.n	800e142 <check_fs+0x66>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e134:	2beb      	cmp	r3, #235	; 0xeb
 800e136:	d11e      	bne.n	800e176 <check_fs+0x9a>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e13e:	2b90      	cmp	r3, #144	; 0x90
 800e140:	d119      	bne.n	800e176 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	3338      	adds	r3, #56	; 0x38
 800e146:	3336      	adds	r3, #54	; 0x36
 800e148:	4618      	mov	r0, r3
 800e14a:	f7fe f861 	bl	800c210 <ld_dword>
 800e14e:	4603      	mov	r3, r0
 800e150:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e154:	4a0a      	ldr	r2, [pc, #40]	; (800e180 <check_fs+0xa4>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d101      	bne.n	800e15e <check_fs+0x82>
 800e15a:	2300      	movs	r3, #0
 800e15c:	e00c      	b.n	800e178 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	3338      	adds	r3, #56	; 0x38
 800e162:	3352      	adds	r3, #82	; 0x52
 800e164:	4618      	mov	r0, r3
 800e166:	f7fe f853 	bl	800c210 <ld_dword>
 800e16a:	4603      	mov	r3, r0
 800e16c:	4a05      	ldr	r2, [pc, #20]	; (800e184 <check_fs+0xa8>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d101      	bne.n	800e176 <check_fs+0x9a>
 800e172:	2300      	movs	r3, #0
 800e174:	e000      	b.n	800e178 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e176:	2302      	movs	r3, #2
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	00544146 	.word	0x00544146
 800e184:	33544146 	.word	0x33544146

0800e188 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b096      	sub	sp, #88	; 0x58
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	4613      	mov	r3, r2
 800e194:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2200      	movs	r2, #0
 800e19a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f7ff ff59 	bl	800e054 <get_ldnumber>
 800e1a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	da01      	bge.n	800e1ae <find_volume+0x26>
 800e1aa:	230b      	movs	r3, #11
 800e1ac:	e265      	b.n	800e67a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e1ae:	4a9f      	ldr	r2, [pc, #636]	; (800e42c <find_volume+0x2a4>)
 800e1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d101      	bne.n	800e1c2 <find_volume+0x3a>
 800e1be:	230c      	movs	r3, #12
 800e1c0:	e25b      	b.n	800e67a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e1c8:	79fb      	ldrb	r3, [r7, #7]
 800e1ca:	f023 0301 	bic.w	r3, r3, #1
 800e1ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d01a      	beq.n	800e20e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1da:	785b      	ldrb	r3, [r3, #1]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7fd ff61 	bl	800c0a4 <disk_status>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e1e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1ec:	f003 0301 	and.w	r3, r3, #1
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d10c      	bne.n	800e20e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d007      	beq.n	800e20a <find_volume+0x82>
 800e1fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1fe:	f003 0304 	and.w	r3, r3, #4
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e206:	230a      	movs	r3, #10
 800e208:	e237      	b.n	800e67a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800e20a:	2300      	movs	r3, #0
 800e20c:	e235      	b.n	800e67a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e210:	2200      	movs	r2, #0
 800e212:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e216:	b2da      	uxtb	r2, r3
 800e218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21e:	785b      	ldrb	r3, [r3, #1]
 800e220:	4618      	mov	r0, r3
 800e222:	f7fd ff59 	bl	800c0d8 <disk_initialize>
 800e226:	4603      	mov	r3, r0
 800e228:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e22c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e230:	f003 0301 	and.w	r3, r3, #1
 800e234:	2b00      	cmp	r3, #0
 800e236:	d001      	beq.n	800e23c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e238:	2303      	movs	r3, #3
 800e23a:	e21e      	b.n	800e67a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e23c:	79fb      	ldrb	r3, [r7, #7]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d007      	beq.n	800e252 <find_volume+0xca>
 800e242:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e246:	f003 0304 	and.w	r3, r3, #4
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d001      	beq.n	800e252 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e24e:	230a      	movs	r3, #10
 800e250:	e213      	b.n	800e67a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e254:	7858      	ldrb	r0, [r3, #1]
 800e256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e258:	330c      	adds	r3, #12
 800e25a:	461a      	mov	r2, r3
 800e25c:	2102      	movs	r1, #2
 800e25e:	f7fd ffa1 	bl	800c1a4 <disk_ioctl>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d001      	beq.n	800e26c <find_volume+0xe4>
 800e268:	2301      	movs	r3, #1
 800e26a:	e206      	b.n	800e67a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26e:	899b      	ldrh	r3, [r3, #12]
 800e270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e274:	d80d      	bhi.n	800e292 <find_volume+0x10a>
 800e276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e278:	899b      	ldrh	r3, [r3, #12]
 800e27a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e27e:	d308      	bcc.n	800e292 <find_volume+0x10a>
 800e280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e282:	899b      	ldrh	r3, [r3, #12]
 800e284:	461a      	mov	r2, r3
 800e286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e288:	899b      	ldrh	r3, [r3, #12]
 800e28a:	3b01      	subs	r3, #1
 800e28c:	4013      	ands	r3, r2
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d001      	beq.n	800e296 <find_volume+0x10e>
 800e292:	2301      	movs	r3, #1
 800e294:	e1f1      	b.n	800e67a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e29a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e29c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e29e:	f7ff ff1d 	bl	800e0dc <check_fs>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e2a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2ac:	2b02      	cmp	r3, #2
 800e2ae:	d149      	bne.n	800e344 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	643b      	str	r3, [r7, #64]	; 0x40
 800e2b4:	e01e      	b.n	800e2f4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2be:	011b      	lsls	r3, r3, #4
 800e2c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e2c4:	4413      	add	r3, r2
 800e2c6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ca:	3304      	adds	r3, #4
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d006      	beq.n	800e2e0 <find_volume+0x158>
 800e2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d4:	3308      	adds	r3, #8
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fd ff9a 	bl	800c210 <ld_dword>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	e000      	b.n	800e2e2 <find_volume+0x15a>
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	3358      	adds	r3, #88	; 0x58
 800e2e8:	443b      	add	r3, r7
 800e2ea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	643b      	str	r3, [r7, #64]	; 0x40
 800e2f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2f6:	2b03      	cmp	r3, #3
 800e2f8:	d9dd      	bls.n	800e2b6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e300:	2b00      	cmp	r3, #0
 800e302:	d002      	beq.n	800e30a <find_volume+0x182>
 800e304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e306:	3b01      	subs	r3, #1
 800e308:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e30a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	3358      	adds	r3, #88	; 0x58
 800e310:	443b      	add	r3, r7
 800e312:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e316:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d005      	beq.n	800e32a <find_volume+0x1a2>
 800e31e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e320:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e322:	f7ff fedb 	bl	800e0dc <check_fs>
 800e326:	4603      	mov	r3, r0
 800e328:	e000      	b.n	800e32c <find_volume+0x1a4>
 800e32a:	2303      	movs	r3, #3
 800e32c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e334:	2b01      	cmp	r3, #1
 800e336:	d905      	bls.n	800e344 <find_volume+0x1bc>
 800e338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e33a:	3301      	adds	r3, #1
 800e33c:	643b      	str	r3, [r7, #64]	; 0x40
 800e33e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e340:	2b03      	cmp	r3, #3
 800e342:	d9e2      	bls.n	800e30a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e344:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e348:	2b04      	cmp	r3, #4
 800e34a:	d101      	bne.n	800e350 <find_volume+0x1c8>
 800e34c:	2301      	movs	r3, #1
 800e34e:	e194      	b.n	800e67a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e354:	2b01      	cmp	r3, #1
 800e356:	d901      	bls.n	800e35c <find_volume+0x1d4>
 800e358:	230d      	movs	r3, #13
 800e35a:	e18e      	b.n	800e67a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35e:	3338      	adds	r3, #56	; 0x38
 800e360:	330b      	adds	r3, #11
 800e362:	4618      	mov	r0, r3
 800e364:	f7fd ff3c 	bl	800c1e0 <ld_word>
 800e368:	4603      	mov	r3, r0
 800e36a:	461a      	mov	r2, r3
 800e36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36e:	899b      	ldrh	r3, [r3, #12]
 800e370:	429a      	cmp	r2, r3
 800e372:	d001      	beq.n	800e378 <find_volume+0x1f0>
 800e374:	230d      	movs	r3, #13
 800e376:	e180      	b.n	800e67a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37a:	3338      	adds	r3, #56	; 0x38
 800e37c:	3316      	adds	r3, #22
 800e37e:	4618      	mov	r0, r3
 800e380:	f7fd ff2e 	bl	800c1e0 <ld_word>
 800e384:	4603      	mov	r3, r0
 800e386:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d106      	bne.n	800e39c <find_volume+0x214>
 800e38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e390:	3338      	adds	r3, #56	; 0x38
 800e392:	3324      	adds	r3, #36	; 0x24
 800e394:	4618      	mov	r0, r3
 800e396:	f7fd ff3b 	bl	800c210 <ld_dword>
 800e39a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3a0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ae:	789b      	ldrb	r3, [r3, #2]
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d005      	beq.n	800e3c0 <find_volume+0x238>
 800e3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b6:	789b      	ldrb	r3, [r3, #2]
 800e3b8:	2b02      	cmp	r3, #2
 800e3ba:	d001      	beq.n	800e3c0 <find_volume+0x238>
 800e3bc:	230d      	movs	r3, #13
 800e3be:	e15c      	b.n	800e67a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c2:	789b      	ldrb	r3, [r3, #2]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3c8:	fb02 f303 	mul.w	r3, r2, r3
 800e3cc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3dc:	895b      	ldrh	r3, [r3, #10]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d008      	beq.n	800e3f4 <find_volume+0x26c>
 800e3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e4:	895b      	ldrh	r3, [r3, #10]
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ea:	895b      	ldrh	r3, [r3, #10]
 800e3ec:	3b01      	subs	r3, #1
 800e3ee:	4013      	ands	r3, r2
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <find_volume+0x270>
 800e3f4:	230d      	movs	r3, #13
 800e3f6:	e140      	b.n	800e67a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fa:	3338      	adds	r3, #56	; 0x38
 800e3fc:	3311      	adds	r3, #17
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fd feee 	bl	800c1e0 <ld_word>
 800e404:	4603      	mov	r3, r0
 800e406:	461a      	mov	r2, r3
 800e408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40e:	891b      	ldrh	r3, [r3, #8]
 800e410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e412:	8992      	ldrh	r2, [r2, #12]
 800e414:	0952      	lsrs	r2, r2, #5
 800e416:	b292      	uxth	r2, r2
 800e418:	fbb3 f1f2 	udiv	r1, r3, r2
 800e41c:	fb01 f202 	mul.w	r2, r1, r2
 800e420:	1a9b      	subs	r3, r3, r2
 800e422:	b29b      	uxth	r3, r3
 800e424:	2b00      	cmp	r3, #0
 800e426:	d003      	beq.n	800e430 <find_volume+0x2a8>
 800e428:	230d      	movs	r3, #13
 800e42a:	e126      	b.n	800e67a <find_volume+0x4f2>
 800e42c:	200024f0 	.word	0x200024f0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e432:	3338      	adds	r3, #56	; 0x38
 800e434:	3313      	adds	r3, #19
 800e436:	4618      	mov	r0, r3
 800e438:	f7fd fed2 	bl	800c1e0 <ld_word>
 800e43c:	4603      	mov	r3, r0
 800e43e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e442:	2b00      	cmp	r3, #0
 800e444:	d106      	bne.n	800e454 <find_volume+0x2cc>
 800e446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e448:	3338      	adds	r3, #56	; 0x38
 800e44a:	3320      	adds	r3, #32
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fd fedf 	bl	800c210 <ld_dword>
 800e452:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e456:	3338      	adds	r3, #56	; 0x38
 800e458:	330e      	adds	r3, #14
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7fd fec0 	bl	800c1e0 <ld_word>
 800e460:	4603      	mov	r3, r0
 800e462:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e464:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <find_volume+0x2e6>
 800e46a:	230d      	movs	r3, #13
 800e46c:	e105      	b.n	800e67a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e46e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e472:	4413      	add	r3, r2
 800e474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e476:	8911      	ldrh	r1, [r2, #8]
 800e478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e47a:	8992      	ldrh	r2, [r2, #12]
 800e47c:	0952      	lsrs	r2, r2, #5
 800e47e:	b292      	uxth	r2, r2
 800e480:	fbb1 f2f2 	udiv	r2, r1, r2
 800e484:	b292      	uxth	r2, r2
 800e486:	4413      	add	r3, r2
 800e488:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e48a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48e:	429a      	cmp	r2, r3
 800e490:	d201      	bcs.n	800e496 <find_volume+0x30e>
 800e492:	230d      	movs	r3, #13
 800e494:	e0f1      	b.n	800e67a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49a:	1ad3      	subs	r3, r2, r3
 800e49c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e49e:	8952      	ldrh	r2, [r2, #10]
 800e4a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d101      	bne.n	800e4b0 <find_volume+0x328>
 800e4ac:	230d      	movs	r3, #13
 800e4ae:	e0e4      	b.n	800e67a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800e4b0:	2303      	movs	r3, #3
 800e4b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d802      	bhi.n	800e4c6 <find_volume+0x33e>
 800e4c0:	2302      	movs	r3, #2
 800e4c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d802      	bhi.n	800e4d6 <find_volume+0x34e>
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	1c9a      	adds	r2, r3, #2
 800e4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4dc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e4e2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e4e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4e8:	441a      	add	r2, r3
 800e4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ec:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e4ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f2:	441a      	add	r2, r3
 800e4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4f6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e4f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4fc:	2b03      	cmp	r3, #3
 800e4fe:	d11e      	bne.n	800e53e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e502:	3338      	adds	r3, #56	; 0x38
 800e504:	332a      	adds	r3, #42	; 0x2a
 800e506:	4618      	mov	r0, r3
 800e508:	f7fd fe6a 	bl	800c1e0 <ld_word>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d001      	beq.n	800e516 <find_volume+0x38e>
 800e512:	230d      	movs	r3, #13
 800e514:	e0b1      	b.n	800e67a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e518:	891b      	ldrh	r3, [r3, #8]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d001      	beq.n	800e522 <find_volume+0x39a>
 800e51e:	230d      	movs	r3, #13
 800e520:	e0ab      	b.n	800e67a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e524:	3338      	adds	r3, #56	; 0x38
 800e526:	332c      	adds	r3, #44	; 0x2c
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fd fe71 	bl	800c210 <ld_dword>
 800e52e:	4602      	mov	r2, r0
 800e530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e532:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e536:	69db      	ldr	r3, [r3, #28]
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	647b      	str	r3, [r7, #68]	; 0x44
 800e53c:	e01f      	b.n	800e57e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e540:	891b      	ldrh	r3, [r3, #8]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d101      	bne.n	800e54a <find_volume+0x3c2>
 800e546:	230d      	movs	r3, #13
 800e548:	e097      	b.n	800e67a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e54e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e550:	441a      	add	r2, r3
 800e552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e554:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e556:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e55a:	2b02      	cmp	r3, #2
 800e55c:	d103      	bne.n	800e566 <find_volume+0x3de>
 800e55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e560:	69db      	ldr	r3, [r3, #28]
 800e562:	005b      	lsls	r3, r3, #1
 800e564:	e00a      	b.n	800e57c <find_volume+0x3f4>
 800e566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e568:	69da      	ldr	r2, [r3, #28]
 800e56a:	4613      	mov	r3, r2
 800e56c:	005b      	lsls	r3, r3, #1
 800e56e:	4413      	add	r3, r2
 800e570:	085a      	lsrs	r2, r3, #1
 800e572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e574:	69db      	ldr	r3, [r3, #28]
 800e576:	f003 0301 	and.w	r3, r3, #1
 800e57a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e57c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e580:	6a1a      	ldr	r2, [r3, #32]
 800e582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e584:	899b      	ldrh	r3, [r3, #12]
 800e586:	4619      	mov	r1, r3
 800e588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e58a:	440b      	add	r3, r1
 800e58c:	3b01      	subs	r3, #1
 800e58e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e590:	8989      	ldrh	r1, [r1, #12]
 800e592:	fbb3 f3f1 	udiv	r3, r3, r1
 800e596:	429a      	cmp	r2, r3
 800e598:	d201      	bcs.n	800e59e <find_volume+0x416>
 800e59a:	230d      	movs	r3, #13
 800e59c:	e06d      	b.n	800e67a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e5a4:	619a      	str	r2, [r3, #24]
 800e5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a8:	699a      	ldr	r2, [r3, #24]
 800e5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b0:	2280      	movs	r2, #128	; 0x80
 800e5b2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e5b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5b8:	2b03      	cmp	r3, #3
 800e5ba:	d149      	bne.n	800e650 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5be:	3338      	adds	r3, #56	; 0x38
 800e5c0:	3330      	adds	r3, #48	; 0x30
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7fd fe0c 	bl	800c1e0 <ld_word>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	d140      	bne.n	800e650 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e5ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5d6:	f7fe f8b3 	bl	800c740 <move_window>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d137      	bne.n	800e650 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800e5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e8:	3338      	adds	r3, #56	; 0x38
 800e5ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7fd fdf6 	bl	800c1e0 <ld_word>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d127      	bne.n	800e650 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e602:	3338      	adds	r3, #56	; 0x38
 800e604:	4618      	mov	r0, r3
 800e606:	f7fd fe03 	bl	800c210 <ld_dword>
 800e60a:	4603      	mov	r3, r0
 800e60c:	4a1d      	ldr	r2, [pc, #116]	; (800e684 <find_volume+0x4fc>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d11e      	bne.n	800e650 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e614:	3338      	adds	r3, #56	; 0x38
 800e616:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fd fdf8 	bl	800c210 <ld_dword>
 800e620:	4603      	mov	r3, r0
 800e622:	4a19      	ldr	r2, [pc, #100]	; (800e688 <find_volume+0x500>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d113      	bne.n	800e650 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62a:	3338      	adds	r3, #56	; 0x38
 800e62c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e630:	4618      	mov	r0, r3
 800e632:	f7fd fded 	bl	800c210 <ld_dword>
 800e636:	4602      	mov	r2, r0
 800e638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63e:	3338      	adds	r3, #56	; 0x38
 800e640:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e644:	4618      	mov	r0, r3
 800e646:	f7fd fde3 	bl	800c210 <ld_dword>
 800e64a:	4602      	mov	r2, r0
 800e64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e652:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e656:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e658:	4b0c      	ldr	r3, [pc, #48]	; (800e68c <find_volume+0x504>)
 800e65a:	881b      	ldrh	r3, [r3, #0]
 800e65c:	3301      	adds	r3, #1
 800e65e:	b29a      	uxth	r2, r3
 800e660:	4b0a      	ldr	r3, [pc, #40]	; (800e68c <find_volume+0x504>)
 800e662:	801a      	strh	r2, [r3, #0]
 800e664:	4b09      	ldr	r3, [pc, #36]	; (800e68c <find_volume+0x504>)
 800e666:	881a      	ldrh	r2, [r3, #0]
 800e668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66e:	4a08      	ldr	r2, [pc, #32]	; (800e690 <find_volume+0x508>)
 800e670:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e672:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e674:	f7fd fffc 	bl	800c670 <clear_lock>
#endif
	return FR_OK;
 800e678:	2300      	movs	r3, #0
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3758      	adds	r7, #88	; 0x58
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	41615252 	.word	0x41615252
 800e688:	61417272 	.word	0x61417272
 800e68c:	200024f4 	.word	0x200024f4
 800e690:	20002518 	.word	0x20002518

0800e694 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e69e:	2309      	movs	r3, #9
 800e6a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d01c      	beq.n	800e6e2 <validate+0x4e>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d018      	beq.n	800e6e2 <validate+0x4e>
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d013      	beq.n	800e6e2 <validate+0x4e>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	889a      	ldrh	r2, [r3, #4]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	88db      	ldrh	r3, [r3, #6]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d10c      	bne.n	800e6e2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	785b      	ldrb	r3, [r3, #1]
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fd fce8 	bl	800c0a4 <disk_status>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	f003 0301 	and.w	r3, r3, #1
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d101      	bne.n	800e6e2 <validate+0x4e>
			res = FR_OK;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e6e2:	7bfb      	ldrb	r3, [r7, #15]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d102      	bne.n	800e6ee <validate+0x5a>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	e000      	b.n	800e6f0 <validate+0x5c>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	6013      	str	r3, [r2, #0]
	return res;
 800e6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	3710      	adds	r7, #16
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
	...

0800e700 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b088      	sub	sp, #32
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	4613      	mov	r3, r2
 800e70c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e712:	f107 0310 	add.w	r3, r7, #16
 800e716:	4618      	mov	r0, r3
 800e718:	f7ff fc9c 	bl	800e054 <get_ldnumber>
 800e71c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	2b00      	cmp	r3, #0
 800e722:	da01      	bge.n	800e728 <f_mount+0x28>
 800e724:	230b      	movs	r3, #11
 800e726:	e02b      	b.n	800e780 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e728:	4a17      	ldr	r2, [pc, #92]	; (800e788 <f_mount+0x88>)
 800e72a:	69fb      	ldr	r3, [r7, #28]
 800e72c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e730:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e732:	69bb      	ldr	r3, [r7, #24]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d005      	beq.n	800e744 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e738:	69b8      	ldr	r0, [r7, #24]
 800e73a:	f7fd ff99 	bl	800c670 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	2200      	movs	r2, #0
 800e742:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d002      	beq.n	800e750 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2200      	movs	r2, #0
 800e74e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e750:	68fa      	ldr	r2, [r7, #12]
 800e752:	490d      	ldr	r1, [pc, #52]	; (800e788 <f_mount+0x88>)
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d002      	beq.n	800e766 <f_mount+0x66>
 800e760:	79fb      	ldrb	r3, [r7, #7]
 800e762:	2b01      	cmp	r3, #1
 800e764:	d001      	beq.n	800e76a <f_mount+0x6a>
 800e766:	2300      	movs	r3, #0
 800e768:	e00a      	b.n	800e780 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e76a:	f107 010c 	add.w	r1, r7, #12
 800e76e:	f107 0308 	add.w	r3, r7, #8
 800e772:	2200      	movs	r2, #0
 800e774:	4618      	mov	r0, r3
 800e776:	f7ff fd07 	bl	800e188 <find_volume>
 800e77a:	4603      	mov	r3, r0
 800e77c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3720      	adds	r7, #32
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	200024f0 	.word	0x200024f0

0800e78c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b09a      	sub	sp, #104	; 0x68
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	4613      	mov	r3, r2
 800e798:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d101      	bne.n	800e7a4 <f_open+0x18>
 800e7a0:	2309      	movs	r3, #9
 800e7a2:	e1bb      	b.n	800eb1c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e7a4:	79fb      	ldrb	r3, [r7, #7]
 800e7a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7aa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e7ac:	79fa      	ldrb	r2, [r7, #7]
 800e7ae:	f107 0114 	add.w	r1, r7, #20
 800e7b2:	f107 0308 	add.w	r3, r7, #8
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7ff fce6 	bl	800e188 <find_volume>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e7c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f040 819f 	bne.w	800eb0a <f_open+0x37e>
		dj.obj.fs = fs;
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e7d0:	68ba      	ldr	r2, [r7, #8]
 800e7d2:	f107 0318 	add.w	r3, r7, #24
 800e7d6:	4611      	mov	r1, r2
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fbc5 	bl	800df68 <follow_path>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e7e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d11a      	bne.n	800e822 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e7ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e7f0:	b25b      	sxtb	r3, r3
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	da03      	bge.n	800e7fe <f_open+0x72>
				res = FR_INVALID_NAME;
 800e7f6:	2306      	movs	r3, #6
 800e7f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e7fc:	e011      	b.n	800e822 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e7fe:	79fb      	ldrb	r3, [r7, #7]
 800e800:	f023 0301 	bic.w	r3, r3, #1
 800e804:	2b00      	cmp	r3, #0
 800e806:	bf14      	ite	ne
 800e808:	2301      	movne	r3, #1
 800e80a:	2300      	moveq	r3, #0
 800e80c:	b2db      	uxtb	r3, r3
 800e80e:	461a      	mov	r2, r3
 800e810:	f107 0318 	add.w	r3, r7, #24
 800e814:	4611      	mov	r1, r2
 800e816:	4618      	mov	r0, r3
 800e818:	f7fd fde2 	bl	800c3e0 <chk_lock>
 800e81c:	4603      	mov	r3, r0
 800e81e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e822:	79fb      	ldrb	r3, [r7, #7]
 800e824:	f003 031c 	and.w	r3, r3, #28
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d07f      	beq.n	800e92c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e82c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e830:	2b00      	cmp	r3, #0
 800e832:	d017      	beq.n	800e864 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e834:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e838:	2b04      	cmp	r3, #4
 800e83a:	d10e      	bne.n	800e85a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e83c:	f7fd fe2c 	bl	800c498 <enq_lock>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d006      	beq.n	800e854 <f_open+0xc8>
 800e846:	f107 0318 	add.w	r3, r7, #24
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7ff f892 	bl	800d974 <dir_register>
 800e850:	4603      	mov	r3, r0
 800e852:	e000      	b.n	800e856 <f_open+0xca>
 800e854:	2312      	movs	r3, #18
 800e856:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e85a:	79fb      	ldrb	r3, [r7, #7]
 800e85c:	f043 0308 	orr.w	r3, r3, #8
 800e860:	71fb      	strb	r3, [r7, #7]
 800e862:	e010      	b.n	800e886 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e864:	7fbb      	ldrb	r3, [r7, #30]
 800e866:	f003 0311 	and.w	r3, r3, #17
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d003      	beq.n	800e876 <f_open+0xea>
					res = FR_DENIED;
 800e86e:	2307      	movs	r3, #7
 800e870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e874:	e007      	b.n	800e886 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e876:	79fb      	ldrb	r3, [r7, #7]
 800e878:	f003 0304 	and.w	r3, r3, #4
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d002      	beq.n	800e886 <f_open+0xfa>
 800e880:	2308      	movs	r3, #8
 800e882:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e886:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d168      	bne.n	800e960 <f_open+0x1d4>
 800e88e:	79fb      	ldrb	r3, [r7, #7]
 800e890:	f003 0308 	and.w	r3, r3, #8
 800e894:	2b00      	cmp	r3, #0
 800e896:	d063      	beq.n	800e960 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e898:	f7fa f916 	bl	8008ac8 <get_fattime>
 800e89c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a0:	330e      	adds	r3, #14
 800e8a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fd fcf1 	bl	800c28c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ac:	3316      	adds	r3, #22
 800e8ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7fd fceb 	bl	800c28c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b8:	330b      	adds	r3, #11
 800e8ba:	2220      	movs	r2, #32
 800e8bc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8c2:	4611      	mov	r1, r2
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fe fcc3 	bl	800d250 <ld_clust>
 800e8ca:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fe fcdb 	bl	800d28e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8da:	331c      	adds	r3, #28
 800e8dc:	2100      	movs	r1, #0
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7fd fcd4 	bl	800c28c <st_dword>
					fs->wflag = 1;
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e8ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d037      	beq.n	800e960 <f_open+0x1d4>
						dw = fs->winsect;
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8f4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e8f6:	f107 0318 	add.w	r3, r7, #24
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fe f9cb 	bl	800cc9a <remove_chain>
 800e904:	4603      	mov	r3, r0
 800e906:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e90a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d126      	bne.n	800e960 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e916:	4618      	mov	r0, r3
 800e918:	f7fd ff12 	bl	800c740 <move_window>
 800e91c:	4603      	mov	r3, r0
 800e91e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e926:	3a01      	subs	r2, #1
 800e928:	615a      	str	r2, [r3, #20]
 800e92a:	e019      	b.n	800e960 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e92c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e930:	2b00      	cmp	r3, #0
 800e932:	d115      	bne.n	800e960 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e934:	7fbb      	ldrb	r3, [r7, #30]
 800e936:	f003 0310 	and.w	r3, r3, #16
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d003      	beq.n	800e946 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e93e:	2304      	movs	r3, #4
 800e940:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e944:	e00c      	b.n	800e960 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e946:	79fb      	ldrb	r3, [r7, #7]
 800e948:	f003 0302 	and.w	r3, r3, #2
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d007      	beq.n	800e960 <f_open+0x1d4>
 800e950:	7fbb      	ldrb	r3, [r7, #30]
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	2b00      	cmp	r3, #0
 800e958:	d002      	beq.n	800e960 <f_open+0x1d4>
						res = FR_DENIED;
 800e95a:	2307      	movs	r3, #7
 800e95c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e960:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e964:	2b00      	cmp	r3, #0
 800e966:	d128      	bne.n	800e9ba <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e968:	79fb      	ldrb	r3, [r7, #7]
 800e96a:	f003 0308 	and.w	r3, r3, #8
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d003      	beq.n	800e97a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e972:	79fb      	ldrb	r3, [r7, #7]
 800e974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e978:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e982:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e988:	79fb      	ldrb	r3, [r7, #7]
 800e98a:	f023 0301 	bic.w	r3, r3, #1
 800e98e:	2b00      	cmp	r3, #0
 800e990:	bf14      	ite	ne
 800e992:	2301      	movne	r3, #1
 800e994:	2300      	moveq	r3, #0
 800e996:	b2db      	uxtb	r3, r3
 800e998:	461a      	mov	r2, r3
 800e99a:	f107 0318 	add.w	r3, r7, #24
 800e99e:	4611      	mov	r1, r2
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7fd fd9b 	bl	800c4dc <inc_lock>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	691b      	ldr	r3, [r3, #16]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d102      	bne.n	800e9ba <f_open+0x22e>
 800e9b4:	2302      	movs	r3, #2
 800e9b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e9ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f040 80a3 	bne.w	800eb0a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fe fc40 	bl	800d250 <ld_clust>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d8:	331c      	adds	r3, #28
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fd fc18 	bl	800c210 <ld_dword>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e9ec:	697a      	ldr	r2, [r7, #20]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	88da      	ldrh	r2, [r3, #6]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	79fa      	ldrb	r2, [r7, #7]
 800e9fe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2200      	movs	r2, #0
 800ea04:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	3330      	adds	r3, #48	; 0x30
 800ea16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7fd fc82 	bl	800c326 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ea22:	79fb      	ldrb	r3, [r7, #7]
 800ea24:	f003 0320 	and.w	r3, r3, #32
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d06e      	beq.n	800eb0a <f_open+0x37e>
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	68db      	ldr	r3, [r3, #12]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d06a      	beq.n	800eb0a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	68da      	ldr	r2, [r3, #12]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	895b      	ldrh	r3, [r3, #10]
 800ea40:	461a      	mov	r2, r3
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	899b      	ldrh	r3, [r3, #12]
 800ea46:	fb02 f303 	mul.w	r3, r2, r3
 800ea4a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	689b      	ldr	r3, [r3, #8]
 800ea50:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea58:	e016      	b.n	800ea88 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7fd ff2b 	bl	800c8ba <get_fat>
 800ea64:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ea66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d802      	bhi.n	800ea72 <f_open+0x2e6>
 800ea6c:	2302      	movs	r3, #2
 800ea6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ea72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea78:	d102      	bne.n	800ea80 <f_open+0x2f4>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea84:	1ad3      	subs	r3, r2, r3
 800ea86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d103      	bne.n	800ea98 <f_open+0x30c>
 800ea90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d8e0      	bhi.n	800ea5a <f_open+0x2ce>
				}
				fp->clust = clst;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea9c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ea9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d131      	bne.n	800eb0a <f_open+0x37e>
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	899b      	ldrh	r3, [r3, #12]
 800eaaa:	461a      	mov	r2, r3
 800eaac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaae:	fbb3 f1f2 	udiv	r1, r3, r2
 800eab2:	fb01 f202 	mul.w	r2, r1, r2
 800eab6:	1a9b      	subs	r3, r3, r2
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d026      	beq.n	800eb0a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7fd fedb 	bl	800c87c <clust2sect>
 800eac6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800eac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d103      	bne.n	800ead6 <f_open+0x34a>
						res = FR_INT_ERR;
 800eace:	2302      	movs	r3, #2
 800ead0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ead4:	e019      	b.n	800eb0a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	899b      	ldrh	r3, [r3, #12]
 800eada:	461a      	mov	r2, r3
 800eadc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eade:	fbb3 f2f2 	udiv	r2, r3, r2
 800eae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eae4:	441a      	add	r2, r3
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	7858      	ldrb	r0, [r3, #1]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6a1a      	ldr	r2, [r3, #32]
 800eaf8:	2301      	movs	r3, #1
 800eafa:	f7fd fb13 	bl	800c124 <disk_read>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d002      	beq.n	800eb0a <f_open+0x37e>
 800eb04:	2301      	movs	r3, #1
 800eb06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eb0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d002      	beq.n	800eb18 <f_open+0x38c>
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2200      	movs	r2, #0
 800eb16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eb18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3768      	adds	r7, #104	; 0x68
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b08c      	sub	sp, #48	; 0x30
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f107 0210 	add.w	r2, r7, #16
 800eb42:	4611      	mov	r1, r2
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff fda5 	bl	800e694 <validate>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d107      	bne.n	800eb68 <f_write+0x44>
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	7d5b      	ldrb	r3, [r3, #21]
 800eb5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eb60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d002      	beq.n	800eb6e <f_write+0x4a>
 800eb68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb6c:	e16a      	b.n	800ee44 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	7d1b      	ldrb	r3, [r3, #20]
 800eb72:	f003 0302 	and.w	r3, r3, #2
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d101      	bne.n	800eb7e <f_write+0x5a>
 800eb7a:	2307      	movs	r3, #7
 800eb7c:	e162      	b.n	800ee44 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	699a      	ldr	r2, [r3, #24]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	441a      	add	r2, r3
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	699b      	ldr	r3, [r3, #24]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	f080 814c 	bcs.w	800ee28 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	699b      	ldr	r3, [r3, #24]
 800eb94:	43db      	mvns	r3, r3
 800eb96:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800eb98:	e146      	b.n	800ee28 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	699b      	ldr	r3, [r3, #24]
 800eb9e:	693a      	ldr	r2, [r7, #16]
 800eba0:	8992      	ldrh	r2, [r2, #12]
 800eba2:	fbb3 f1f2 	udiv	r1, r3, r2
 800eba6:	fb01 f202 	mul.w	r2, r1, r2
 800ebaa:	1a9b      	subs	r3, r3, r2
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f040 80f1 	bne.w	800ed94 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	699b      	ldr	r3, [r3, #24]
 800ebb6:	693a      	ldr	r2, [r7, #16]
 800ebb8:	8992      	ldrh	r2, [r2, #12]
 800ebba:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebbe:	693a      	ldr	r2, [r7, #16]
 800ebc0:	8952      	ldrh	r2, [r2, #10]
 800ebc2:	3a01      	subs	r2, #1
 800ebc4:	4013      	ands	r3, r2
 800ebc6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ebc8:	69bb      	ldr	r3, [r7, #24]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d143      	bne.n	800ec56 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	699b      	ldr	r3, [r3, #24]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10c      	bne.n	800ebf0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	689b      	ldr	r3, [r3, #8]
 800ebda:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ebdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d11a      	bne.n	800ec18 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fe f8bc 	bl	800cd64 <create_chain>
 800ebec:	62b8      	str	r0, [r7, #40]	; 0x28
 800ebee:	e013      	b.n	800ec18 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d007      	beq.n	800ec08 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	699b      	ldr	r3, [r3, #24]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f7fe f948 	bl	800ce94 <clmt_clust>
 800ec04:	62b8      	str	r0, [r7, #40]	; 0x28
 800ec06:	e007      	b.n	800ec18 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ec08:	68fa      	ldr	r2, [r7, #12]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	69db      	ldr	r3, [r3, #28]
 800ec0e:	4619      	mov	r1, r3
 800ec10:	4610      	mov	r0, r2
 800ec12:	f7fe f8a7 	bl	800cd64 <create_chain>
 800ec16:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ec18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	f000 8109 	beq.w	800ee32 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ec20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	d104      	bne.n	800ec30 <f_write+0x10c>
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2202      	movs	r2, #2
 800ec2a:	755a      	strb	r2, [r3, #21]
 800ec2c:	2302      	movs	r3, #2
 800ec2e:	e109      	b.n	800ee44 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec36:	d104      	bne.n	800ec42 <f_write+0x11e>
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	755a      	strb	r2, [r3, #21]
 800ec3e:	2301      	movs	r3, #1
 800ec40:	e100      	b.n	800ee44 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec46:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d102      	bne.n	800ec56 <f_write+0x132>
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec54:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	7d1b      	ldrb	r3, [r3, #20]
 800ec5a:	b25b      	sxtb	r3, r3
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	da18      	bge.n	800ec92 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	7858      	ldrb	r0, [r3, #1]
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	6a1a      	ldr	r2, [r3, #32]
 800ec6e:	2301      	movs	r3, #1
 800ec70:	f7fd fa78 	bl	800c164 <disk_write>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d004      	beq.n	800ec84 <f_write+0x160>
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	755a      	strb	r2, [r3, #21]
 800ec80:	2301      	movs	r3, #1
 800ec82:	e0df      	b.n	800ee44 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	7d1b      	ldrb	r3, [r3, #20]
 800ec88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec8c:	b2da      	uxtb	r2, r3
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ec92:	693a      	ldr	r2, [r7, #16]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	69db      	ldr	r3, [r3, #28]
 800ec98:	4619      	mov	r1, r3
 800ec9a:	4610      	mov	r0, r2
 800ec9c:	f7fd fdee 	bl	800c87c <clust2sect>
 800eca0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d104      	bne.n	800ecb2 <f_write+0x18e>
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2202      	movs	r2, #2
 800ecac:	755a      	strb	r2, [r3, #21]
 800ecae:	2302      	movs	r3, #2
 800ecb0:	e0c8      	b.n	800ee44 <f_write+0x320>
			sect += csect;
 800ecb2:	697a      	ldr	r2, [r7, #20]
 800ecb4:	69bb      	ldr	r3, [r7, #24]
 800ecb6:	4413      	add	r3, r2
 800ecb8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	899b      	ldrh	r3, [r3, #12]
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecc6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ecc8:	6a3b      	ldr	r3, [r7, #32]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d043      	beq.n	800ed56 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ecce:	69ba      	ldr	r2, [r7, #24]
 800ecd0:	6a3b      	ldr	r3, [r7, #32]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	693a      	ldr	r2, [r7, #16]
 800ecd6:	8952      	ldrh	r2, [r2, #10]
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d905      	bls.n	800ece8 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	895b      	ldrh	r3, [r3, #10]
 800ece0:	461a      	mov	r2, r3
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	1ad3      	subs	r3, r2, r3
 800ece6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	7858      	ldrb	r0, [r3, #1]
 800ecec:	6a3b      	ldr	r3, [r7, #32]
 800ecee:	697a      	ldr	r2, [r7, #20]
 800ecf0:	69f9      	ldr	r1, [r7, #28]
 800ecf2:	f7fd fa37 	bl	800c164 <disk_write>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d004      	beq.n	800ed06 <f_write+0x1e2>
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	755a      	strb	r2, [r3, #21]
 800ed02:	2301      	movs	r3, #1
 800ed04:	e09e      	b.n	800ee44 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6a1a      	ldr	r2, [r3, #32]
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	1ad3      	subs	r3, r2, r3
 800ed0e:	6a3a      	ldr	r2, [r7, #32]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d918      	bls.n	800ed46 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6a1a      	ldr	r2, [r3, #32]
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	693a      	ldr	r2, [r7, #16]
 800ed24:	8992      	ldrh	r2, [r2, #12]
 800ed26:	fb02 f303 	mul.w	r3, r2, r3
 800ed2a:	69fa      	ldr	r2, [r7, #28]
 800ed2c:	18d1      	adds	r1, r2, r3
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	899b      	ldrh	r3, [r3, #12]
 800ed32:	461a      	mov	r2, r3
 800ed34:	f7fd fad6 	bl	800c2e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	7d1b      	ldrb	r3, [r3, #20]
 800ed3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed40:	b2da      	uxtb	r2, r3
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	899b      	ldrh	r3, [r3, #12]
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	6a3b      	ldr	r3, [r7, #32]
 800ed4e:	fb02 f303 	mul.w	r3, r2, r3
 800ed52:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ed54:	e04b      	b.n	800edee <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	6a1b      	ldr	r3, [r3, #32]
 800ed5a:	697a      	ldr	r2, [r7, #20]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d016      	beq.n	800ed8e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	699a      	ldr	r2, [r3, #24]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d210      	bcs.n	800ed8e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	7858      	ldrb	r0, [r3, #1]
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed76:	2301      	movs	r3, #1
 800ed78:	697a      	ldr	r2, [r7, #20]
 800ed7a:	f7fd f9d3 	bl	800c124 <disk_read>
 800ed7e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d004      	beq.n	800ed8e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2201      	movs	r2, #1
 800ed88:	755a      	strb	r2, [r3, #21]
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e05a      	b.n	800ee44 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	697a      	ldr	r2, [r7, #20]
 800ed92:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	899b      	ldrh	r3, [r3, #12]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	699b      	ldr	r3, [r3, #24]
 800ed9e:	693a      	ldr	r2, [r7, #16]
 800eda0:	8992      	ldrh	r2, [r2, #12]
 800eda2:	fbb3 f1f2 	udiv	r1, r3, r2
 800eda6:	fb01 f202 	mul.w	r2, r1, r2
 800edaa:	1a9b      	subs	r3, r3, r2
 800edac:	1ac3      	subs	r3, r0, r3
 800edae:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800edb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d901      	bls.n	800edbc <f_write+0x298>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	699b      	ldr	r3, [r3, #24]
 800edc6:	693a      	ldr	r2, [r7, #16]
 800edc8:	8992      	ldrh	r2, [r2, #12]
 800edca:	fbb3 f0f2 	udiv	r0, r3, r2
 800edce:	fb00 f202 	mul.w	r2, r0, r2
 800edd2:	1a9b      	subs	r3, r3, r2
 800edd4:	440b      	add	r3, r1
 800edd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edd8:	69f9      	ldr	r1, [r7, #28]
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fd fa82 	bl	800c2e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	7d1b      	ldrb	r3, [r3, #20]
 800ede4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ede8:	b2da      	uxtb	r2, r3
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800edee:	69fa      	ldr	r2, [r7, #28]
 800edf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf2:	4413      	add	r3, r2
 800edf4:	61fb      	str	r3, [r7, #28]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	699a      	ldr	r2, [r3, #24]
 800edfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfc:	441a      	add	r2, r3
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	619a      	str	r2, [r3, #24]
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	68da      	ldr	r2, [r3, #12]
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	699b      	ldr	r3, [r3, #24]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	bf38      	it	cc
 800ee0e:	461a      	movcc	r2, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	60da      	str	r2, [r3, #12]
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1a:	441a      	add	r2, r3
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	601a      	str	r2, [r3, #0]
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f47f aeb5 	bne.w	800eb9a <f_write+0x76>
 800ee30:	e000      	b.n	800ee34 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ee32:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	7d1b      	ldrb	r3, [r3, #20]
 800ee38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee3c:	b2da      	uxtb	r2, r3
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ee42:	2300      	movs	r3, #0
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3730      	adds	r7, #48	; 0x30
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b086      	sub	sp, #24
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f107 0208 	add.w	r2, r7, #8
 800ee5a:	4611      	mov	r1, r2
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7ff fc19 	bl	800e694 <validate>
 800ee62:	4603      	mov	r3, r0
 800ee64:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ee66:	7dfb      	ldrb	r3, [r7, #23]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d168      	bne.n	800ef3e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	7d1b      	ldrb	r3, [r3, #20]
 800ee70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d062      	beq.n	800ef3e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	7d1b      	ldrb	r3, [r3, #20]
 800ee7c:	b25b      	sxtb	r3, r3
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	da15      	bge.n	800eeae <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	7858      	ldrb	r0, [r3, #1]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6a1a      	ldr	r2, [r3, #32]
 800ee90:	2301      	movs	r3, #1
 800ee92:	f7fd f967 	bl	800c164 <disk_write>
 800ee96:	4603      	mov	r3, r0
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d001      	beq.n	800eea0 <f_sync+0x54>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	e04f      	b.n	800ef40 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	7d1b      	ldrb	r3, [r3, #20]
 800eea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eea8:	b2da      	uxtb	r2, r3
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eeae:	f7f9 fe0b 	bl	8008ac8 <get_fattime>
 800eeb2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eeb4:	68ba      	ldr	r2, [r7, #8]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeba:	4619      	mov	r1, r3
 800eebc:	4610      	mov	r0, r2
 800eebe:	f7fd fc3f 	bl	800c740 <move_window>
 800eec2:	4603      	mov	r3, r0
 800eec4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eec6:	7dfb      	ldrb	r3, [r7, #23]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d138      	bne.n	800ef3e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eed0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	330b      	adds	r3, #11
 800eed6:	781a      	ldrb	r2, [r3, #0]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	330b      	adds	r3, #11
 800eedc:	f042 0220 	orr.w	r2, r2, #32
 800eee0:	b2d2      	uxtb	r2, r2
 800eee2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6818      	ldr	r0, [r3, #0]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	461a      	mov	r2, r3
 800eeee:	68f9      	ldr	r1, [r7, #12]
 800eef0:	f7fe f9cd 	bl	800d28e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f103 021c 	add.w	r2, r3, #28
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	4619      	mov	r1, r3
 800ef00:	4610      	mov	r0, r2
 800ef02:	f7fd f9c3 	bl	800c28c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	3316      	adds	r3, #22
 800ef0a:	6939      	ldr	r1, [r7, #16]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fd f9bd 	bl	800c28c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	3312      	adds	r3, #18
 800ef16:	2100      	movs	r1, #0
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fd f99c 	bl	800c256 <st_word>
					fs->wflag = 1;
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	2201      	movs	r2, #1
 800ef22:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7fd fc38 	bl	800c79c <sync_fs>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	7d1b      	ldrb	r3, [r3, #20]
 800ef34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef38:	b2da      	uxtb	r2, r3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ef3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3718      	adds	r7, #24
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f7ff ff7b 	bl	800ee4c <f_sync>
 800ef56:	4603      	mov	r3, r0
 800ef58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ef5a:	7bfb      	ldrb	r3, [r7, #15]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d118      	bne.n	800ef92 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f107 0208 	add.w	r2, r7, #8
 800ef66:	4611      	mov	r1, r2
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7ff fb93 	bl	800e694 <validate>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ef72:	7bfb      	ldrb	r3, [r7, #15]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d10c      	bne.n	800ef92 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	691b      	ldr	r3, [r3, #16]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fd fb3b 	bl	800c5f8 <dec_lock>
 800ef82:	4603      	mov	r3, r0
 800ef84:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ef86:	7bfb      	ldrb	r3, [r7, #15]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d102      	bne.n	800ef92 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ef92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b0a0      	sub	sp, #128	; 0x80
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800efa4:	2300      	movs	r3, #0
 800efa6:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800efa8:	f107 010c 	add.w	r1, r7, #12
 800efac:	1d3b      	adds	r3, r7, #4
 800efae:	2202      	movs	r2, #2
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7ff f8e9 	bl	800e188 <find_volume>
 800efb6:	4603      	mov	r3, r0
 800efb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800efc0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f040 808e 	bne.w	800f0e6 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800efd0:	4611      	mov	r1, r2
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fe ffc8 	bl	800df68 <follow_path>
 800efd8:	4603      	mov	r3, r0
 800efda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800efde:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d108      	bne.n	800eff8 <f_unlink+0x5c>
 800efe6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800efea:	2102      	movs	r1, #2
 800efec:	4618      	mov	r0, r3
 800efee:	f7fd f9f7 	bl	800c3e0 <chk_lock>
 800eff2:	4603      	mov	r3, r0
 800eff4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800eff8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800effc:	2b00      	cmp	r3, #0
 800effe:	d172      	bne.n	800f0e6 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800f000:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f004:	b25b      	sxtb	r3, r3
 800f006:	2b00      	cmp	r3, #0
 800f008:	da03      	bge.n	800f012 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800f00a:	2306      	movs	r3, #6
 800f00c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800f010:	e008      	b.n	800f024 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800f012:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800f016:	f003 0301 	and.w	r3, r3, #1
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d002      	beq.n	800f024 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800f01e:	2307      	movs	r3, #7
 800f020:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800f024:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d134      	bne.n	800f096 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f030:	4611      	mov	r1, r2
 800f032:	4618      	mov	r0, r3
 800f034:	f7fe f90c 	bl	800d250 <ld_clust>
 800f038:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800f03a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800f03e:	f003 0310 	and.w	r3, r3, #16
 800f042:	2b00      	cmp	r3, #0
 800f044:	d027      	beq.n	800f096 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800f04a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f04c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800f04e:	f107 0310 	add.w	r3, r7, #16
 800f052:	2100      	movs	r1, #0
 800f054:	4618      	mov	r0, r3
 800f056:	f7fd ff55 	bl	800cf04 <dir_sdi>
 800f05a:	4603      	mov	r3, r0
 800f05c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800f060:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f064:	2b00      	cmp	r3, #0
 800f066:	d116      	bne.n	800f096 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800f068:	f107 0310 	add.w	r3, r7, #16
 800f06c:	2100      	movs	r1, #0
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fe fb19 	bl	800d6a6 <dir_read>
 800f074:	4603      	mov	r3, r0
 800f076:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800f07a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d102      	bne.n	800f088 <f_unlink+0xec>
 800f082:	2307      	movs	r3, #7
 800f084:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800f088:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f08c:	2b04      	cmp	r3, #4
 800f08e:	d102      	bne.n	800f096 <f_unlink+0xfa>
 800f090:	2300      	movs	r3, #0
 800f092:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800f096:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d123      	bne.n	800f0e6 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800f09e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7fe fd5e 	bl	800db64 <dir_remove>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800f0ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d10c      	bne.n	800f0d0 <f_unlink+0x134>
 800f0b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d009      	beq.n	800f0d0 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800f0bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7fd fde8 	bl	800cc9a <remove_chain>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800f0d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d106      	bne.n	800f0e6 <f_unlink+0x14a>
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fd fb5e 	bl	800c79c <sync_fs>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f0e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3780      	adds	r7, #128	; 0x80
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b084      	sub	sp, #16
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800f0fe:	78fb      	ldrb	r3, [r7, #3]
 800f100:	2b0a      	cmp	r3, #10
 800f102:	d103      	bne.n	800f10c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800f104:	210d      	movs	r1, #13
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f7ff fff3 	bl	800f0f2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	2b00      	cmp	r3, #0
 800f116:	db25      	blt.n	800f164 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	1c5a      	adds	r2, r3, #1
 800f11c:	60fa      	str	r2, [r7, #12]
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	4413      	add	r3, r2
 800f122:	78fa      	ldrb	r2, [r7, #3]
 800f124:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2b3c      	cmp	r3, #60	; 0x3c
 800f12a:	dd12      	ble.n	800f152 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6818      	ldr	r0, [r3, #0]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f103 010c 	add.w	r1, r3, #12
 800f136:	68fa      	ldr	r2, [r7, #12]
 800f138:	f107 0308 	add.w	r3, r7, #8
 800f13c:	f7ff fcf2 	bl	800eb24 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	429a      	cmp	r2, r3
 800f146:	d101      	bne.n	800f14c <putc_bfd+0x5a>
 800f148:	2300      	movs	r3, #0
 800f14a:	e001      	b.n	800f150 <putc_bfd+0x5e>
 800f14c:	f04f 33ff 	mov.w	r3, #4294967295
 800f150:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	689b      	ldr	r3, [r3, #8]
 800f15c:	1c5a      	adds	r2, r3, #1
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	609a      	str	r2, [r3, #8]
 800f162:	e000      	b.n	800f166 <putc_bfd+0x74>
	if (i < 0) return;
 800f164:	bf00      	nop
}
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	db16      	blt.n	800f1aa <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6818      	ldr	r0, [r3, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f103 010c 	add.w	r1, r3, #12
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	461a      	mov	r2, r3
 800f18c:	f107 030c 	add.w	r3, r7, #12
 800f190:	f7ff fcc8 	bl	800eb24 <f_write>
 800f194:	4603      	mov	r3, r0
 800f196:	2b00      	cmp	r3, #0
 800f198:	d107      	bne.n	800f1aa <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d102      	bne.n	800f1aa <putc_flush+0x3e>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	e001      	b.n	800f1ae <putc_flush+0x42>
	return EOF;
 800f1aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3710      	adds	r7, #16
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800f1b6:	b480      	push	{r7}
 800f1b8:	b083      	sub	sp, #12
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
 800f1be:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	683a      	ldr	r2, [r7, #0]
 800f1c4:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	605a      	str	r2, [r3, #4]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	685a      	ldr	r2, [r3, #4]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	609a      	str	r2, [r3, #8]
}
 800f1d4:	bf00      	nop
 800f1d6:	370c      	adds	r7, #12
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr

0800f1e0 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b096      	sub	sp, #88	; 0x58
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800f1ea:	f107 030c 	add.w	r3, r7, #12
 800f1ee:	6839      	ldr	r1, [r7, #0]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7ff ffe0 	bl	800f1b6 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800f1f6:	e009      	b.n	800f20c <f_puts+0x2c>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	1c5a      	adds	r2, r3, #1
 800f1fc:	607a      	str	r2, [r7, #4]
 800f1fe:	781a      	ldrb	r2, [r3, #0]
 800f200:	f107 030c 	add.w	r3, r7, #12
 800f204:	4611      	mov	r1, r2
 800f206:	4618      	mov	r0, r3
 800f208:	f7ff ff73 	bl	800f0f2 <putc_bfd>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d1f1      	bne.n	800f1f8 <f_puts+0x18>
	return putc_flush(&pb);
 800f214:	f107 030c 	add.w	r3, r7, #12
 800f218:	4618      	mov	r0, r3
 800f21a:	f7ff ffa7 	bl	800f16c <putc_flush>
 800f21e:	4603      	mov	r3, r0
}
 800f220:	4618      	mov	r0, r3
 800f222:	3758      	adds	r7, #88	; 0x58
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f228:	b480      	push	{r7}
 800f22a:	b087      	sub	sp, #28
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	4613      	mov	r3, r2
 800f234:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f236:	2301      	movs	r3, #1
 800f238:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f23a:	2300      	movs	r3, #0
 800f23c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f23e:	4b1f      	ldr	r3, [pc, #124]	; (800f2bc <FATFS_LinkDriverEx+0x94>)
 800f240:	7a5b      	ldrb	r3, [r3, #9]
 800f242:	b2db      	uxtb	r3, r3
 800f244:	2b00      	cmp	r3, #0
 800f246:	d131      	bne.n	800f2ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f248:	4b1c      	ldr	r3, [pc, #112]	; (800f2bc <FATFS_LinkDriverEx+0x94>)
 800f24a:	7a5b      	ldrb	r3, [r3, #9]
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	461a      	mov	r2, r3
 800f250:	4b1a      	ldr	r3, [pc, #104]	; (800f2bc <FATFS_LinkDriverEx+0x94>)
 800f252:	2100      	movs	r1, #0
 800f254:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f256:	4b19      	ldr	r3, [pc, #100]	; (800f2bc <FATFS_LinkDriverEx+0x94>)
 800f258:	7a5b      	ldrb	r3, [r3, #9]
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	4a17      	ldr	r2, [pc, #92]	; (800f2bc <FATFS_LinkDriverEx+0x94>)
 800f25e:	009b      	lsls	r3, r3, #2
 800f260:	4413      	add	r3, r2
 800f262:	68fa      	ldr	r2, [r7, #12]
 800f264:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f266:	4b15      	ldr	r3, [pc, #84]	; (800f2bc <FATFS_LinkDriverEx+0x94>)
 800f268:	7a5b      	ldrb	r3, [r3, #9]
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	461a      	mov	r2, r3
 800f26e:	4b13      	ldr	r3, [pc, #76]	; (800f2bc <FATFS_LinkDriverEx+0x94>)
 800f270:	4413      	add	r3, r2
 800f272:	79fa      	ldrb	r2, [r7, #7]
 800f274:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f276:	4b11      	ldr	r3, [pc, #68]	; (800f2bc <FATFS_LinkDriverEx+0x94>)
 800f278:	7a5b      	ldrb	r3, [r3, #9]
 800f27a:	b2db      	uxtb	r3, r3
 800f27c:	1c5a      	adds	r2, r3, #1
 800f27e:	b2d1      	uxtb	r1, r2
 800f280:	4a0e      	ldr	r2, [pc, #56]	; (800f2bc <FATFS_LinkDriverEx+0x94>)
 800f282:	7251      	strb	r1, [r2, #9]
 800f284:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f286:	7dbb      	ldrb	r3, [r7, #22]
 800f288:	3330      	adds	r3, #48	; 0x30
 800f28a:	b2da      	uxtb	r2, r3
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	3301      	adds	r3, #1
 800f294:	223a      	movs	r2, #58	; 0x3a
 800f296:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	3302      	adds	r3, #2
 800f29c:	222f      	movs	r2, #47	; 0x2f
 800f29e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	3303      	adds	r3, #3
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f2ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	371c      	adds	r7, #28
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr
 800f2ba:	bf00      	nop
 800f2bc:	20002718 	.word	0x20002718

0800f2c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	6839      	ldr	r1, [r7, #0]
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f7ff ffaa 	bl	800f228 <FATFS_LinkDriverEx>
 800f2d4:	4603      	mov	r3, r0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3708      	adds	r7, #8
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
	...

0800f2e0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b085      	sub	sp, #20
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	6039      	str	r1, [r7, #0]
 800f2ea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f2ec:	88fb      	ldrh	r3, [r7, #6]
 800f2ee:	2b7f      	cmp	r3, #127	; 0x7f
 800f2f0:	d802      	bhi.n	800f2f8 <ff_convert+0x18>
		c = chr;
 800f2f2:	88fb      	ldrh	r3, [r7, #6]
 800f2f4:	81fb      	strh	r3, [r7, #14]
 800f2f6:	e025      	b.n	800f344 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00b      	beq.n	800f316 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f2fe:	88fb      	ldrh	r3, [r7, #6]
 800f300:	2bff      	cmp	r3, #255	; 0xff
 800f302:	d805      	bhi.n	800f310 <ff_convert+0x30>
 800f304:	88fb      	ldrh	r3, [r7, #6]
 800f306:	3b80      	subs	r3, #128	; 0x80
 800f308:	4a12      	ldr	r2, [pc, #72]	; (800f354 <ff_convert+0x74>)
 800f30a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f30e:	e000      	b.n	800f312 <ff_convert+0x32>
 800f310:	2300      	movs	r3, #0
 800f312:	81fb      	strh	r3, [r7, #14]
 800f314:	e016      	b.n	800f344 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f316:	2300      	movs	r3, #0
 800f318:	81fb      	strh	r3, [r7, #14]
 800f31a:	e009      	b.n	800f330 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f31c:	89fb      	ldrh	r3, [r7, #14]
 800f31e:	4a0d      	ldr	r2, [pc, #52]	; (800f354 <ff_convert+0x74>)
 800f320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f324:	88fa      	ldrh	r2, [r7, #6]
 800f326:	429a      	cmp	r2, r3
 800f328:	d006      	beq.n	800f338 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f32a:	89fb      	ldrh	r3, [r7, #14]
 800f32c:	3301      	adds	r3, #1
 800f32e:	81fb      	strh	r3, [r7, #14]
 800f330:	89fb      	ldrh	r3, [r7, #14]
 800f332:	2b7f      	cmp	r3, #127	; 0x7f
 800f334:	d9f2      	bls.n	800f31c <ff_convert+0x3c>
 800f336:	e000      	b.n	800f33a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f338:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f33a:	89fb      	ldrh	r3, [r7, #14]
 800f33c:	3380      	adds	r3, #128	; 0x80
 800f33e:	b29b      	uxth	r3, r3
 800f340:	b2db      	uxtb	r3, r3
 800f342:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f344:	89fb      	ldrh	r3, [r7, #14]
}
 800f346:	4618      	mov	r0, r3
 800f348:	3714      	adds	r7, #20
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	08012ef8 	.word	0x08012ef8

0800f358 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f358:	b480      	push	{r7}
 800f35a:	b087      	sub	sp, #28
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	4603      	mov	r3, r0
 800f360:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f362:	88fb      	ldrh	r3, [r7, #6]
 800f364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f368:	d201      	bcs.n	800f36e <ff_wtoupper+0x16>
 800f36a:	4b3e      	ldr	r3, [pc, #248]	; (800f464 <ff_wtoupper+0x10c>)
 800f36c:	e000      	b.n	800f370 <ff_wtoupper+0x18>
 800f36e:	4b3e      	ldr	r3, [pc, #248]	; (800f468 <ff_wtoupper+0x110>)
 800f370:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	1c9a      	adds	r2, r3, #2
 800f376:	617a      	str	r2, [r7, #20]
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f37c:	8a7b      	ldrh	r3, [r7, #18]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d068      	beq.n	800f454 <ff_wtoupper+0xfc>
 800f382:	88fa      	ldrh	r2, [r7, #6]
 800f384:	8a7b      	ldrh	r3, [r7, #18]
 800f386:	429a      	cmp	r2, r3
 800f388:	d364      	bcc.n	800f454 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	1c9a      	adds	r2, r3, #2
 800f38e:	617a      	str	r2, [r7, #20]
 800f390:	881b      	ldrh	r3, [r3, #0]
 800f392:	823b      	strh	r3, [r7, #16]
 800f394:	8a3b      	ldrh	r3, [r7, #16]
 800f396:	0a1b      	lsrs	r3, r3, #8
 800f398:	81fb      	strh	r3, [r7, #14]
 800f39a:	8a3b      	ldrh	r3, [r7, #16]
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f3a0:	88fa      	ldrh	r2, [r7, #6]
 800f3a2:	8a79      	ldrh	r1, [r7, #18]
 800f3a4:	8a3b      	ldrh	r3, [r7, #16]
 800f3a6:	440b      	add	r3, r1
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	da49      	bge.n	800f440 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f3ac:	89fb      	ldrh	r3, [r7, #14]
 800f3ae:	2b08      	cmp	r3, #8
 800f3b0:	d84f      	bhi.n	800f452 <ff_wtoupper+0xfa>
 800f3b2:	a201      	add	r2, pc, #4	; (adr r2, 800f3b8 <ff_wtoupper+0x60>)
 800f3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3b8:	0800f3dd 	.word	0x0800f3dd
 800f3bc:	0800f3ef 	.word	0x0800f3ef
 800f3c0:	0800f405 	.word	0x0800f405
 800f3c4:	0800f40d 	.word	0x0800f40d
 800f3c8:	0800f415 	.word	0x0800f415
 800f3cc:	0800f41d 	.word	0x0800f41d
 800f3d0:	0800f425 	.word	0x0800f425
 800f3d4:	0800f42d 	.word	0x0800f42d
 800f3d8:	0800f435 	.word	0x0800f435
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f3dc:	88fa      	ldrh	r2, [r7, #6]
 800f3de:	8a7b      	ldrh	r3, [r7, #18]
 800f3e0:	1ad3      	subs	r3, r2, r3
 800f3e2:	005b      	lsls	r3, r3, #1
 800f3e4:	697a      	ldr	r2, [r7, #20]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	881b      	ldrh	r3, [r3, #0]
 800f3ea:	80fb      	strh	r3, [r7, #6]
 800f3ec:	e027      	b.n	800f43e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f3ee:	88fa      	ldrh	r2, [r7, #6]
 800f3f0:	8a7b      	ldrh	r3, [r7, #18]
 800f3f2:	1ad3      	subs	r3, r2, r3
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	f003 0301 	and.w	r3, r3, #1
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	88fa      	ldrh	r2, [r7, #6]
 800f3fe:	1ad3      	subs	r3, r2, r3
 800f400:	80fb      	strh	r3, [r7, #6]
 800f402:	e01c      	b.n	800f43e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f404:	88fb      	ldrh	r3, [r7, #6]
 800f406:	3b10      	subs	r3, #16
 800f408:	80fb      	strh	r3, [r7, #6]
 800f40a:	e018      	b.n	800f43e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f40c:	88fb      	ldrh	r3, [r7, #6]
 800f40e:	3b20      	subs	r3, #32
 800f410:	80fb      	strh	r3, [r7, #6]
 800f412:	e014      	b.n	800f43e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f414:	88fb      	ldrh	r3, [r7, #6]
 800f416:	3b30      	subs	r3, #48	; 0x30
 800f418:	80fb      	strh	r3, [r7, #6]
 800f41a:	e010      	b.n	800f43e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f41c:	88fb      	ldrh	r3, [r7, #6]
 800f41e:	3b1a      	subs	r3, #26
 800f420:	80fb      	strh	r3, [r7, #6]
 800f422:	e00c      	b.n	800f43e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f424:	88fb      	ldrh	r3, [r7, #6]
 800f426:	3308      	adds	r3, #8
 800f428:	80fb      	strh	r3, [r7, #6]
 800f42a:	e008      	b.n	800f43e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f42c:	88fb      	ldrh	r3, [r7, #6]
 800f42e:	3b50      	subs	r3, #80	; 0x50
 800f430:	80fb      	strh	r3, [r7, #6]
 800f432:	e004      	b.n	800f43e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f434:	88fb      	ldrh	r3, [r7, #6]
 800f436:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f43a:	80fb      	strh	r3, [r7, #6]
 800f43c:	bf00      	nop
			}
			break;
 800f43e:	e008      	b.n	800f452 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f440:	89fb      	ldrh	r3, [r7, #14]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d195      	bne.n	800f372 <ff_wtoupper+0x1a>
 800f446:	8a3b      	ldrh	r3, [r7, #16]
 800f448:	005b      	lsls	r3, r3, #1
 800f44a:	697a      	ldr	r2, [r7, #20]
 800f44c:	4413      	add	r3, r2
 800f44e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f450:	e78f      	b.n	800f372 <ff_wtoupper+0x1a>
			break;
 800f452:	bf00      	nop
	}

	return chr;
 800f454:	88fb      	ldrh	r3, [r7, #6]
}
 800f456:	4618      	mov	r0, r3
 800f458:	371c      	adds	r7, #28
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop
 800f464:	08012ff8 	.word	0x08012ff8
 800f468:	080131ec 	.word	0x080131ec

0800f46c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f470:	2200      	movs	r2, #0
 800f472:	4912      	ldr	r1, [pc, #72]	; (800f4bc <MX_USB_DEVICE_Init+0x50>)
 800f474:	4812      	ldr	r0, [pc, #72]	; (800f4c0 <MX_USB_DEVICE_Init+0x54>)
 800f476:	f7fb fb3e 	bl	800aaf6 <USBD_Init>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d001      	beq.n	800f484 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f480:	f7f3 fadc 	bl	8002a3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800f484:	490f      	ldr	r1, [pc, #60]	; (800f4c4 <MX_USB_DEVICE_Init+0x58>)
 800f486:	480e      	ldr	r0, [pc, #56]	; (800f4c0 <MX_USB_DEVICE_Init+0x54>)
 800f488:	f7fb fb65 	bl	800ab56 <USBD_RegisterClass>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f492:	f7f3 fad3 	bl	8002a3c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800f496:	490c      	ldr	r1, [pc, #48]	; (800f4c8 <MX_USB_DEVICE_Init+0x5c>)
 800f498:	4809      	ldr	r0, [pc, #36]	; (800f4c0 <MX_USB_DEVICE_Init+0x54>)
 800f49a:	f7f9 fe0f 	bl	80090bc <USBD_MSC_RegisterStorage>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d001      	beq.n	800f4a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f4a4:	f7f3 faca 	bl	8002a3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f4a8:	4805      	ldr	r0, [pc, #20]	; (800f4c0 <MX_USB_DEVICE_Init+0x54>)
 800f4aa:	f7fb fb8a 	bl	800abc2 <USBD_Start>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d001      	beq.n	800f4b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f4b4:	f7f3 fac2 	bl	8002a3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f4b8:	bf00      	nop
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	200000cc 	.word	0x200000cc
 800f4c0:	20002724 	.word	0x20002724
 800f4c4:	20000024 	.word	0x20000024
 800f4c8:	2000011c 	.word	0x2000011c

0800f4cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	6039      	str	r1, [r7, #0]
 800f4d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	2212      	movs	r2, #18
 800f4dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f4de:	4b03      	ldr	r3, [pc, #12]	; (800f4ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	370c      	adds	r7, #12
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	200000e8 	.word	0x200000e8

0800f4f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b083      	sub	sp, #12
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	6039      	str	r1, [r7, #0]
 800f4fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	2204      	movs	r2, #4
 800f500:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f502:	4b03      	ldr	r3, [pc, #12]	; (800f510 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f504:	4618      	mov	r0, r3
 800f506:	370c      	adds	r7, #12
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr
 800f510:	200000fc 	.word	0x200000fc

0800f514 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	4603      	mov	r3, r0
 800f51c:	6039      	str	r1, [r7, #0]
 800f51e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f520:	79fb      	ldrb	r3, [r7, #7]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d105      	bne.n	800f532 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f526:	683a      	ldr	r2, [r7, #0]
 800f528:	4907      	ldr	r1, [pc, #28]	; (800f548 <USBD_FS_ProductStrDescriptor+0x34>)
 800f52a:	4808      	ldr	r0, [pc, #32]	; (800f54c <USBD_FS_ProductStrDescriptor+0x38>)
 800f52c:	f7fc fcf6 	bl	800bf1c <USBD_GetString>
 800f530:	e004      	b.n	800f53c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f532:	683a      	ldr	r2, [r7, #0]
 800f534:	4904      	ldr	r1, [pc, #16]	; (800f548 <USBD_FS_ProductStrDescriptor+0x34>)
 800f536:	4805      	ldr	r0, [pc, #20]	; (800f54c <USBD_FS_ProductStrDescriptor+0x38>)
 800f538:	f7fc fcf0 	bl	800bf1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f53c:	4b02      	ldr	r3, [pc, #8]	; (800f548 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3708      	adds	r7, #8
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	20002a00 	.word	0x20002a00
 800f54c:	08012e0c 	.word	0x08012e0c

0800f550 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	4603      	mov	r3, r0
 800f558:	6039      	str	r1, [r7, #0]
 800f55a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f55c:	683a      	ldr	r2, [r7, #0]
 800f55e:	4904      	ldr	r1, [pc, #16]	; (800f570 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f560:	4804      	ldr	r0, [pc, #16]	; (800f574 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f562:	f7fc fcdb 	bl	800bf1c <USBD_GetString>
  return USBD_StrDesc;
 800f566:	4b02      	ldr	r3, [pc, #8]	; (800f570 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3708      	adds	r7, #8
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	20002a00 	.word	0x20002a00
 800f574:	08012e20 	.word	0x08012e20

0800f578 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	4603      	mov	r3, r0
 800f580:	6039      	str	r1, [r7, #0]
 800f582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	221a      	movs	r2, #26
 800f588:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f58a:	f000 f843 	bl	800f614 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f58e:	4b02      	ldr	r3, [pc, #8]	; (800f598 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f590:	4618      	mov	r0, r3
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	20000100 	.word	0x20000100

0800f59c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	6039      	str	r1, [r7, #0]
 800f5a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f5a8:	79fb      	ldrb	r3, [r7, #7]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d105      	bne.n	800f5ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f5ae:	683a      	ldr	r2, [r7, #0]
 800f5b0:	4907      	ldr	r1, [pc, #28]	; (800f5d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f5b2:	4808      	ldr	r0, [pc, #32]	; (800f5d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f5b4:	f7fc fcb2 	bl	800bf1c <USBD_GetString>
 800f5b8:	e004      	b.n	800f5c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f5ba:	683a      	ldr	r2, [r7, #0]
 800f5bc:	4904      	ldr	r1, [pc, #16]	; (800f5d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f5be:	4805      	ldr	r0, [pc, #20]	; (800f5d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f5c0:	f7fc fcac 	bl	800bf1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5c4:	4b02      	ldr	r3, [pc, #8]	; (800f5d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	20002a00 	.word	0x20002a00
 800f5d4:	08012e34 	.word	0x08012e34

0800f5d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	4603      	mov	r3, r0
 800f5e0:	6039      	str	r1, [r7, #0]
 800f5e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f5e4:	79fb      	ldrb	r3, [r7, #7]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d105      	bne.n	800f5f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f5ea:	683a      	ldr	r2, [r7, #0]
 800f5ec:	4907      	ldr	r1, [pc, #28]	; (800f60c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f5ee:	4808      	ldr	r0, [pc, #32]	; (800f610 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f5f0:	f7fc fc94 	bl	800bf1c <USBD_GetString>
 800f5f4:	e004      	b.n	800f600 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f5f6:	683a      	ldr	r2, [r7, #0]
 800f5f8:	4904      	ldr	r1, [pc, #16]	; (800f60c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f5fa:	4805      	ldr	r0, [pc, #20]	; (800f610 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f5fc:	f7fc fc8e 	bl	800bf1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f600:	4b02      	ldr	r3, [pc, #8]	; (800f60c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f602:	4618      	mov	r0, r3
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	20002a00 	.word	0x20002a00
 800f610:	08012e40 	.word	0x08012e40

0800f614 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f61a:	4b0f      	ldr	r3, [pc, #60]	; (800f658 <Get_SerialNum+0x44>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f620:	4b0e      	ldr	r3, [pc, #56]	; (800f65c <Get_SerialNum+0x48>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f626:	4b0e      	ldr	r3, [pc, #56]	; (800f660 <Get_SerialNum+0x4c>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4413      	add	r3, r2
 800f632:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d009      	beq.n	800f64e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f63a:	2208      	movs	r2, #8
 800f63c:	4909      	ldr	r1, [pc, #36]	; (800f664 <Get_SerialNum+0x50>)
 800f63e:	68f8      	ldr	r0, [r7, #12]
 800f640:	f000 f814 	bl	800f66c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f644:	2204      	movs	r2, #4
 800f646:	4908      	ldr	r1, [pc, #32]	; (800f668 <Get_SerialNum+0x54>)
 800f648:	68b8      	ldr	r0, [r7, #8]
 800f64a:	f000 f80f 	bl	800f66c <IntToUnicode>
  }
}
 800f64e:	bf00      	nop
 800f650:	3710      	adds	r7, #16
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	1fff7a10 	.word	0x1fff7a10
 800f65c:	1fff7a14 	.word	0x1fff7a14
 800f660:	1fff7a18 	.word	0x1fff7a18
 800f664:	20000102 	.word	0x20000102
 800f668:	20000112 	.word	0x20000112

0800f66c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b087      	sub	sp, #28
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	60b9      	str	r1, [r7, #8]
 800f676:	4613      	mov	r3, r2
 800f678:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f67a:	2300      	movs	r3, #0
 800f67c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f67e:	2300      	movs	r3, #0
 800f680:	75fb      	strb	r3, [r7, #23]
 800f682:	e027      	b.n	800f6d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	0f1b      	lsrs	r3, r3, #28
 800f688:	2b09      	cmp	r3, #9
 800f68a:	d80b      	bhi.n	800f6a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	0f1b      	lsrs	r3, r3, #28
 800f690:	b2da      	uxtb	r2, r3
 800f692:	7dfb      	ldrb	r3, [r7, #23]
 800f694:	005b      	lsls	r3, r3, #1
 800f696:	4619      	mov	r1, r3
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	440b      	add	r3, r1
 800f69c:	3230      	adds	r2, #48	; 0x30
 800f69e:	b2d2      	uxtb	r2, r2
 800f6a0:	701a      	strb	r2, [r3, #0]
 800f6a2:	e00a      	b.n	800f6ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	0f1b      	lsrs	r3, r3, #28
 800f6a8:	b2da      	uxtb	r2, r3
 800f6aa:	7dfb      	ldrb	r3, [r7, #23]
 800f6ac:	005b      	lsls	r3, r3, #1
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	440b      	add	r3, r1
 800f6b4:	3237      	adds	r2, #55	; 0x37
 800f6b6:	b2d2      	uxtb	r2, r2
 800f6b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	011b      	lsls	r3, r3, #4
 800f6be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f6c0:	7dfb      	ldrb	r3, [r7, #23]
 800f6c2:	005b      	lsls	r3, r3, #1
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f6ce:	7dfb      	ldrb	r3, [r7, #23]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	75fb      	strb	r3, [r7, #23]
 800f6d4:	7dfa      	ldrb	r2, [r7, #23]
 800f6d6:	79fb      	ldrb	r3, [r7, #7]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d3d3      	bcc.n	800f684 <IntToUnicode+0x18>
  }
}
 800f6dc:	bf00      	nop
 800f6de:	bf00      	nop
 800f6e0:	371c      	adds	r7, #28
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr
	...

0800f6ec <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	if(card_pres==1){
 800f6f6:	4b06      	ldr	r3, [pc, #24]	; (800f710 <STORAGE_Init_FS+0x24>)
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d103      	bne.n	800f706 <STORAGE_Init_FS+0x1a>
		SD_disk_initialize(lun);
 800f6fe:	79fb      	ldrb	r3, [r7, #7]
 800f700:	4618      	mov	r0, r3
 800f702:	f7f2 f9e3 	bl	8001acc <SD_disk_initialize>
	}


  return (USBD_OK);
 800f706:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3708      	adds	r7, #8
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	200024d8 	.word	0x200024d8

0800f714 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800f714:	b480      	push	{r7}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
 800f71a:	4603      	mov	r3, r0
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
 800f720:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f728:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f730:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800f732:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f734:	4618      	mov	r0, r3
 800f736:	3714      	adds	r7, #20
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800f740:	b480      	push	{r7}
 800f742:	b083      	sub	sp, #12
 800f744:	af00      	add	r7, sp, #0
 800f746:	4603      	mov	r3, r0
 800f748:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800f74a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	4603      	mov	r3, r0
 800f760:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800f762:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f764:	4618      	mov	r0, r3
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	60b9      	str	r1, [r7, #8]
 800f778:	607a      	str	r2, [r7, #4]
 800f77a:	461a      	mov	r2, r3
 800f77c:	4603      	mov	r3, r0
 800f77e:	73fb      	strb	r3, [r7, #15]
 800f780:	4613      	mov	r3, r2
 800f782:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	if(card_pres==1){
 800f784:	4b07      	ldr	r3, [pc, #28]	; (800f7a4 <STORAGE_Read_FS+0x34>)
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d105      	bne.n	800f798 <STORAGE_Read_FS+0x28>
		SD_disk_read(lun, buf, blk_addr, blk_len);
 800f78c:	89bb      	ldrh	r3, [r7, #12]
 800f78e:	7bf8      	ldrb	r0, [r7, #15]
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	68b9      	ldr	r1, [r7, #8]
 800f794:	f7f2 fa9a 	bl	8001ccc <SD_disk_read>
	}


  return (USBD_OK);
 800f798:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3710      	adds	r7, #16
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	bf00      	nop
 800f7a4:	200024d8 	.word	0x200024d8

0800f7a8 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60b9      	str	r1, [r7, #8]
 800f7b0:	607a      	str	r2, [r7, #4]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	73fb      	strb	r3, [r7, #15]
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  if(card_pres==1){
 800f7bc:	4b07      	ldr	r3, [pc, #28]	; (800f7dc <STORAGE_Write_FS+0x34>)
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	d105      	bne.n	800f7d0 <STORAGE_Write_FS+0x28>
	  SD_disk_write(lun, buf, blk_addr, blk_len);
 800f7c4:	89bb      	ldrh	r3, [r7, #12]
 800f7c6:	7bf8      	ldrb	r0, [r7, #15]
 800f7c8:	687a      	ldr	r2, [r7, #4]
 800f7ca:	68b9      	ldr	r1, [r7, #8]
 800f7cc:	f7f2 fae8 	bl	8001da0 <SD_disk_write>
  }

  return (USBD_OK);
 800f7d0:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	200024d8 	.word	0x200024d8

0800f7e0 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800f7e4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b08a      	sub	sp, #40	; 0x28
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f7f8:	f107 0314 	add.w	r3, r7, #20
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	601a      	str	r2, [r3, #0]
 800f800:	605a      	str	r2, [r3, #4]
 800f802:	609a      	str	r2, [r3, #8]
 800f804:	60da      	str	r2, [r3, #12]
 800f806:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f810:	d13a      	bne.n	800f888 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f812:	2300      	movs	r3, #0
 800f814:	613b      	str	r3, [r7, #16]
 800f816:	4b1e      	ldr	r3, [pc, #120]	; (800f890 <HAL_PCD_MspInit+0xa0>)
 800f818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f81a:	4a1d      	ldr	r2, [pc, #116]	; (800f890 <HAL_PCD_MspInit+0xa0>)
 800f81c:	f043 0301 	orr.w	r3, r3, #1
 800f820:	6313      	str	r3, [r2, #48]	; 0x30
 800f822:	4b1b      	ldr	r3, [pc, #108]	; (800f890 <HAL_PCD_MspInit+0xa0>)
 800f824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f826:	f003 0301 	and.w	r3, r3, #1
 800f82a:	613b      	str	r3, [r7, #16]
 800f82c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f82e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f834:	2302      	movs	r3, #2
 800f836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f838:	2300      	movs	r3, #0
 800f83a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f83c:	2303      	movs	r3, #3
 800f83e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f840:	230a      	movs	r3, #10
 800f842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f844:	f107 0314 	add.w	r3, r7, #20
 800f848:	4619      	mov	r1, r3
 800f84a:	4812      	ldr	r0, [pc, #72]	; (800f894 <HAL_PCD_MspInit+0xa4>)
 800f84c:	f7f3 fd00 	bl	8003250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f850:	4b0f      	ldr	r3, [pc, #60]	; (800f890 <HAL_PCD_MspInit+0xa0>)
 800f852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f854:	4a0e      	ldr	r2, [pc, #56]	; (800f890 <HAL_PCD_MspInit+0xa0>)
 800f856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f85a:	6353      	str	r3, [r2, #52]	; 0x34
 800f85c:	2300      	movs	r3, #0
 800f85e:	60fb      	str	r3, [r7, #12]
 800f860:	4b0b      	ldr	r3, [pc, #44]	; (800f890 <HAL_PCD_MspInit+0xa0>)
 800f862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f864:	4a0a      	ldr	r2, [pc, #40]	; (800f890 <HAL_PCD_MspInit+0xa0>)
 800f866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f86a:	6453      	str	r3, [r2, #68]	; 0x44
 800f86c:	4b08      	ldr	r3, [pc, #32]	; (800f890 <HAL_PCD_MspInit+0xa0>)
 800f86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f874:	60fb      	str	r3, [r7, #12]
 800f876:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f878:	2200      	movs	r2, #0
 800f87a:	2100      	movs	r1, #0
 800f87c:	2043      	movs	r0, #67	; 0x43
 800f87e:	f7f3 fcb0 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f882:	2043      	movs	r0, #67	; 0x43
 800f884:	f7f3 fcc9 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f888:	bf00      	nop
 800f88a:	3728      	adds	r7, #40	; 0x28
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	40023800 	.word	0x40023800
 800f894:	40020000 	.word	0x40020000

0800f898 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	4610      	mov	r0, r2
 800f8b0:	f7fb f9d4 	bl	800ac5c <USBD_LL_SetupStage>
}
 800f8b4:	bf00      	nop
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f8ce:	78fa      	ldrb	r2, [r7, #3]
 800f8d0:	6879      	ldr	r1, [r7, #4]
 800f8d2:	4613      	mov	r3, r2
 800f8d4:	00db      	lsls	r3, r3, #3
 800f8d6:	4413      	add	r3, r2
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	440b      	add	r3, r1
 800f8dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f8e0:	681a      	ldr	r2, [r3, #0]
 800f8e2:	78fb      	ldrb	r3, [r7, #3]
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	f7fb fa0e 	bl	800ad06 <USBD_LL_DataOutStage>
}
 800f8ea:	bf00      	nop
 800f8ec:	3708      	adds	r7, #8
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd80      	pop	{r7, pc}

0800f8f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8f2:	b580      	push	{r7, lr}
 800f8f4:	b082      	sub	sp, #8
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
 800f8fa:	460b      	mov	r3, r1
 800f8fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f904:	78fa      	ldrb	r2, [r7, #3]
 800f906:	6879      	ldr	r1, [r7, #4]
 800f908:	4613      	mov	r3, r2
 800f90a:	00db      	lsls	r3, r3, #3
 800f90c:	4413      	add	r3, r2
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	440b      	add	r3, r1
 800f912:	334c      	adds	r3, #76	; 0x4c
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	78fb      	ldrb	r3, [r7, #3]
 800f918:	4619      	mov	r1, r3
 800f91a:	f7fb faa7 	bl	800ae6c <USBD_LL_DataInStage>
}
 800f91e:	bf00      	nop
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}

0800f926 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f926:	b580      	push	{r7, lr}
 800f928:	b082      	sub	sp, #8
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f934:	4618      	mov	r0, r3
 800f936:	f7fb fbdb 	bl	800b0f0 <USBD_LL_SOF>
}
 800f93a:	bf00      	nop
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}

0800f942 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f942:	b580      	push	{r7, lr}
 800f944:	b084      	sub	sp, #16
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f94a:	2301      	movs	r3, #1
 800f94c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	2b02      	cmp	r3, #2
 800f954:	d001      	beq.n	800f95a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f956:	f7f3 f871 	bl	8002a3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f960:	7bfa      	ldrb	r2, [r7, #15]
 800f962:	4611      	mov	r1, r2
 800f964:	4618      	mov	r0, r3
 800f966:	f7fb fb85 	bl	800b074 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f970:	4618      	mov	r0, r3
 800f972:	f7fb fb2d 	bl	800afd0 <USBD_LL_Reset>
}
 800f976:	bf00      	nop
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
	...

0800f980 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f98e:	4618      	mov	r0, r3
 800f990:	f7fb fb80 	bl	800b094 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	6812      	ldr	r2, [r2, #0]
 800f9a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f9a6:	f043 0301 	orr.w	r3, r3, #1
 800f9aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6a1b      	ldr	r3, [r3, #32]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d005      	beq.n	800f9c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f9b4:	4b04      	ldr	r3, [pc, #16]	; (800f9c8 <HAL_PCD_SuspendCallback+0x48>)
 800f9b6:	691b      	ldr	r3, [r3, #16]
 800f9b8:	4a03      	ldr	r2, [pc, #12]	; (800f9c8 <HAL_PCD_SuspendCallback+0x48>)
 800f9ba:	f043 0306 	orr.w	r3, r3, #6
 800f9be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f9c0:	bf00      	nop
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	e000ed00 	.word	0xe000ed00

0800f9cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fb fb70 	bl	800b0c0 <USBD_LL_Resume>
}
 800f9e0:	bf00      	nop
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f9fa:	78fa      	ldrb	r2, [r7, #3]
 800f9fc:	4611      	mov	r1, r2
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fb fbc8 	bl	800b194 <USBD_LL_IsoOUTIncomplete>
}
 800fa04:	bf00      	nop
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	460b      	mov	r3, r1
 800fa16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa1e:	78fa      	ldrb	r2, [r7, #3]
 800fa20:	4611      	mov	r1, r2
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fb fb84 	bl	800b130 <USBD_LL_IsoINIncomplete>
}
 800fa28:	bf00      	nop
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7fb fbda 	bl	800b1f8 <USBD_LL_DevConnected>
}
 800fa44:	bf00      	nop
 800fa46:	3708      	adds	r7, #8
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fb fbd7 	bl	800b20e <USBD_LL_DevDisconnected>
}
 800fa60:	bf00      	nop
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d13c      	bne.n	800faf2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800fa78:	4a20      	ldr	r2, [pc, #128]	; (800fafc <USBD_LL_Init+0x94>)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	4a1e      	ldr	r2, [pc, #120]	; (800fafc <USBD_LL_Init+0x94>)
 800fa84:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fa88:	4b1c      	ldr	r3, [pc, #112]	; (800fafc <USBD_LL_Init+0x94>)
 800fa8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800fa8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800fa90:	4b1a      	ldr	r3, [pc, #104]	; (800fafc <USBD_LL_Init+0x94>)
 800fa92:	2204      	movs	r2, #4
 800fa94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fa96:	4b19      	ldr	r3, [pc, #100]	; (800fafc <USBD_LL_Init+0x94>)
 800fa98:	2202      	movs	r2, #2
 800fa9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fa9c:	4b17      	ldr	r3, [pc, #92]	; (800fafc <USBD_LL_Init+0x94>)
 800fa9e:	2200      	movs	r2, #0
 800faa0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800faa2:	4b16      	ldr	r3, [pc, #88]	; (800fafc <USBD_LL_Init+0x94>)
 800faa4:	2202      	movs	r2, #2
 800faa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800faa8:	4b14      	ldr	r3, [pc, #80]	; (800fafc <USBD_LL_Init+0x94>)
 800faaa:	2200      	movs	r2, #0
 800faac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800faae:	4b13      	ldr	r3, [pc, #76]	; (800fafc <USBD_LL_Init+0x94>)
 800fab0:	2200      	movs	r2, #0
 800fab2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fab4:	4b11      	ldr	r3, [pc, #68]	; (800fafc <USBD_LL_Init+0x94>)
 800fab6:	2200      	movs	r2, #0
 800fab8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800faba:	4b10      	ldr	r3, [pc, #64]	; (800fafc <USBD_LL_Init+0x94>)
 800fabc:	2200      	movs	r2, #0
 800fabe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800fac0:	4b0e      	ldr	r3, [pc, #56]	; (800fafc <USBD_LL_Init+0x94>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800fac6:	480d      	ldr	r0, [pc, #52]	; (800fafc <USBD_LL_Init+0x94>)
 800fac8:	f7f4 fd37 	bl	800453a <HAL_PCD_Init>
 800facc:	4603      	mov	r3, r0
 800face:	2b00      	cmp	r3, #0
 800fad0:	d001      	beq.n	800fad6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800fad2:	f7f2 ffb3 	bl	8002a3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800fad6:	2180      	movs	r1, #128	; 0x80
 800fad8:	4808      	ldr	r0, [pc, #32]	; (800fafc <USBD_LL_Init+0x94>)
 800fada:	f7f5 ffbc 	bl	8005a56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800fade:	2240      	movs	r2, #64	; 0x40
 800fae0:	2100      	movs	r1, #0
 800fae2:	4806      	ldr	r0, [pc, #24]	; (800fafc <USBD_LL_Init+0x94>)
 800fae4:	f7f5 ff70 	bl	80059c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800fae8:	2280      	movs	r2, #128	; 0x80
 800faea:	2101      	movs	r1, #1
 800faec:	4803      	ldr	r0, [pc, #12]	; (800fafc <USBD_LL_Init+0x94>)
 800faee:	f7f5 ff6b 	bl	80059c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800faf2:	2300      	movs	r3, #0
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	20002c00 	.word	0x20002c00

0800fb00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7f4 fe2c 	bl	8004774 <HAL_PCD_Start>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb20:	7bfb      	ldrb	r3, [r7, #15]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f000 f962 	bl	800fdec <USBD_Get_USB_Status>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3710      	adds	r7, #16
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}

0800fb36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fb36:	b580      	push	{r7, lr}
 800fb38:	b084      	sub	sp, #16
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	6078      	str	r0, [r7, #4]
 800fb3e:	4608      	mov	r0, r1
 800fb40:	4611      	mov	r1, r2
 800fb42:	461a      	mov	r2, r3
 800fb44:	4603      	mov	r3, r0
 800fb46:	70fb      	strb	r3, [r7, #3]
 800fb48:	460b      	mov	r3, r1
 800fb4a:	70bb      	strb	r3, [r7, #2]
 800fb4c:	4613      	mov	r3, r2
 800fb4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb50:	2300      	movs	r3, #0
 800fb52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb54:	2300      	movs	r3, #0
 800fb56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb5e:	78bb      	ldrb	r3, [r7, #2]
 800fb60:	883a      	ldrh	r2, [r7, #0]
 800fb62:	78f9      	ldrb	r1, [r7, #3]
 800fb64:	f7f5 fafd 	bl	8005162 <HAL_PCD_EP_Open>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb6c:	7bfb      	ldrb	r3, [r7, #15]
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f000 f93c 	bl	800fdec <USBD_Get_USB_Status>
 800fb74:	4603      	mov	r3, r0
 800fb76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb78:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}

0800fb82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb82:	b580      	push	{r7, lr}
 800fb84:	b084      	sub	sp, #16
 800fb86:	af00      	add	r7, sp, #0
 800fb88:	6078      	str	r0, [r7, #4]
 800fb8a:	460b      	mov	r3, r1
 800fb8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb92:	2300      	movs	r3, #0
 800fb94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb9c:	78fa      	ldrb	r2, [r7, #3]
 800fb9e:	4611      	mov	r1, r2
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7f5 fb46 	bl	8005232 <HAL_PCD_EP_Close>
 800fba6:	4603      	mov	r3, r0
 800fba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbaa:	7bfb      	ldrb	r3, [r7, #15]
 800fbac:	4618      	mov	r0, r3
 800fbae:	f000 f91d 	bl	800fdec <USBD_Get_USB_Status>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3710      	adds	r7, #16
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	460b      	mov	r3, r1
 800fbca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbda:	78fa      	ldrb	r2, [r7, #3]
 800fbdc:	4611      	mov	r1, r2
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7f5 fd09 	bl	80055f6 <HAL_PCD_EP_Flush>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbe8:	7bfb      	ldrb	r3, [r7, #15]
 800fbea:	4618      	mov	r0, r3
 800fbec:	f000 f8fe 	bl	800fdec <USBD_Get_USB_Status>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3710      	adds	r7, #16
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b084      	sub	sp, #16
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
 800fc06:	460b      	mov	r3, r1
 800fc08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc18:	78fa      	ldrb	r2, [r7, #3]
 800fc1a:	4611      	mov	r1, r2
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7f5 fbff 	bl	8005420 <HAL_PCD_EP_SetStall>
 800fc22:	4603      	mov	r3, r0
 800fc24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc26:	7bfb      	ldrb	r3, [r7, #15]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f000 f8df 	bl	800fdec <USBD_Get_USB_Status>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc32:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3710      	adds	r7, #16
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	460b      	mov	r3, r1
 800fc46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc56:	78fa      	ldrb	r2, [r7, #3]
 800fc58:	4611      	mov	r1, r2
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7f5 fc44 	bl	80054e8 <HAL_PCD_EP_ClrStall>
 800fc60:	4603      	mov	r3, r0
 800fc62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc64:	7bfb      	ldrb	r3, [r7, #15]
 800fc66:	4618      	mov	r0, r3
 800fc68:	f000 f8c0 	bl	800fdec <USBD_Get_USB_Status>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc70:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	3710      	adds	r7, #16
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}

0800fc7a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc7a:	b480      	push	{r7}
 800fc7c:	b085      	sub	sp, #20
 800fc7e:	af00      	add	r7, sp, #0
 800fc80:	6078      	str	r0, [r7, #4]
 800fc82:	460b      	mov	r3, r1
 800fc84:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc8c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fc8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	da0b      	bge.n	800fcae <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fc96:	78fb      	ldrb	r3, [r7, #3]
 800fc98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc9c:	68f9      	ldr	r1, [r7, #12]
 800fc9e:	4613      	mov	r3, r2
 800fca0:	00db      	lsls	r3, r3, #3
 800fca2:	4413      	add	r3, r2
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	440b      	add	r3, r1
 800fca8:	333e      	adds	r3, #62	; 0x3e
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	e00b      	b.n	800fcc6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fcae:	78fb      	ldrb	r3, [r7, #3]
 800fcb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fcb4:	68f9      	ldr	r1, [r7, #12]
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	00db      	lsls	r3, r3, #3
 800fcba:	4413      	add	r3, r2
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	440b      	add	r3, r1
 800fcc0:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fcc4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3714      	adds	r7, #20
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr

0800fcd2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fcd2:	b580      	push	{r7, lr}
 800fcd4:	b084      	sub	sp, #16
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
 800fcda:	460b      	mov	r3, r1
 800fcdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcde:	2300      	movs	r3, #0
 800fce0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fce2:	2300      	movs	r3, #0
 800fce4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fcec:	78fa      	ldrb	r2, [r7, #3]
 800fcee:	4611      	mov	r1, r2
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7f5 fa11 	bl	8005118 <HAL_PCD_SetAddress>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcfa:	7bfb      	ldrb	r3, [r7, #15]
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f000 f875 	bl	800fdec <USBD_Get_USB_Status>
 800fd02:	4603      	mov	r3, r0
 800fd04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fd06:	7bbb      	ldrb	r3, [r7, #14]
}
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3710      	adds	r7, #16
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b086      	sub	sp, #24
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	60f8      	str	r0, [r7, #12]
 800fd18:	607a      	str	r2, [r7, #4]
 800fd1a:	603b      	str	r3, [r7, #0]
 800fd1c:	460b      	mov	r3, r1
 800fd1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd24:	2300      	movs	r3, #0
 800fd26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd2e:	7af9      	ldrb	r1, [r7, #11]
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	f7f5 fb2a 	bl	800538c <HAL_PCD_EP_Transmit>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd3c:	7dfb      	ldrb	r3, [r7, #23]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f000 f854 	bl	800fdec <USBD_Get_USB_Status>
 800fd44:	4603      	mov	r3, r0
 800fd46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd48:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3718      	adds	r7, #24
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}

0800fd52 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fd52:	b580      	push	{r7, lr}
 800fd54:	b086      	sub	sp, #24
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	60f8      	str	r0, [r7, #12]
 800fd5a:	607a      	str	r2, [r7, #4]
 800fd5c:	603b      	str	r3, [r7, #0]
 800fd5e:	460b      	mov	r3, r1
 800fd60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd62:	2300      	movs	r3, #0
 800fd64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd66:	2300      	movs	r3, #0
 800fd68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fd70:	7af9      	ldrb	r1, [r7, #11]
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	f7f5 faa6 	bl	80052c6 <HAL_PCD_EP_Receive>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd7e:	7dfb      	ldrb	r3, [r7, #23]
 800fd80:	4618      	mov	r0, r3
 800fd82:	f000 f833 	bl	800fdec <USBD_Get_USB_Status>
 800fd86:	4603      	mov	r3, r0
 800fd88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fd8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3718      	adds	r7, #24
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fda6:	78fa      	ldrb	r2, [r7, #3]
 800fda8:	4611      	mov	r1, r2
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7f5 fad6 	bl	800535c <HAL_PCD_EP_GetRxCount>
 800fdb0:	4603      	mov	r3, r0
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
	...

0800fdbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b083      	sub	sp, #12
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fdc4:	4b03      	ldr	r3, [pc, #12]	; (800fdd4 <USBD_static_malloc+0x18>)
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	370c      	adds	r7, #12
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd0:	4770      	bx	lr
 800fdd2:	bf00      	nop
 800fdd4:	2000310c 	.word	0x2000310c

0800fdd8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b083      	sub	sp, #12
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]

}
 800fde0:	bf00      	nop
 800fde2:	370c      	adds	r7, #12
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr

0800fdec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b085      	sub	sp, #20
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fdfa:	79fb      	ldrb	r3, [r7, #7]
 800fdfc:	2b03      	cmp	r3, #3
 800fdfe:	d817      	bhi.n	800fe30 <USBD_Get_USB_Status+0x44>
 800fe00:	a201      	add	r2, pc, #4	; (adr r2, 800fe08 <USBD_Get_USB_Status+0x1c>)
 800fe02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe06:	bf00      	nop
 800fe08:	0800fe19 	.word	0x0800fe19
 800fe0c:	0800fe1f 	.word	0x0800fe1f
 800fe10:	0800fe25 	.word	0x0800fe25
 800fe14:	0800fe2b 	.word	0x0800fe2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe1c:	e00b      	b.n	800fe36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fe1e:	2303      	movs	r3, #3
 800fe20:	73fb      	strb	r3, [r7, #15]
    break;
 800fe22:	e008      	b.n	800fe36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fe24:	2301      	movs	r3, #1
 800fe26:	73fb      	strb	r3, [r7, #15]
    break;
 800fe28:	e005      	b.n	800fe36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fe2a:	2303      	movs	r3, #3
 800fe2c:	73fb      	strb	r3, [r7, #15]
    break;
 800fe2e:	e002      	b.n	800fe36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fe30:	2303      	movs	r3, #3
 800fe32:	73fb      	strb	r3, [r7, #15]
    break;
 800fe34:	bf00      	nop
  }
  return usb_status;
 800fe36:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3714      	adds	r7, #20
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr

0800fe44 <__errno>:
 800fe44:	4b01      	ldr	r3, [pc, #4]	; (800fe4c <__errno+0x8>)
 800fe46:	6818      	ldr	r0, [r3, #0]
 800fe48:	4770      	bx	lr
 800fe4a:	bf00      	nop
 800fe4c:	2000013c 	.word	0x2000013c

0800fe50 <__libc_init_array>:
 800fe50:	b570      	push	{r4, r5, r6, lr}
 800fe52:	4d0d      	ldr	r5, [pc, #52]	; (800fe88 <__libc_init_array+0x38>)
 800fe54:	4c0d      	ldr	r4, [pc, #52]	; (800fe8c <__libc_init_array+0x3c>)
 800fe56:	1b64      	subs	r4, r4, r5
 800fe58:	10a4      	asrs	r4, r4, #2
 800fe5a:	2600      	movs	r6, #0
 800fe5c:	42a6      	cmp	r6, r4
 800fe5e:	d109      	bne.n	800fe74 <__libc_init_array+0x24>
 800fe60:	4d0b      	ldr	r5, [pc, #44]	; (800fe90 <__libc_init_array+0x40>)
 800fe62:	4c0c      	ldr	r4, [pc, #48]	; (800fe94 <__libc_init_array+0x44>)
 800fe64:	f002 ff04 	bl	8012c70 <_init>
 800fe68:	1b64      	subs	r4, r4, r5
 800fe6a:	10a4      	asrs	r4, r4, #2
 800fe6c:	2600      	movs	r6, #0
 800fe6e:	42a6      	cmp	r6, r4
 800fe70:	d105      	bne.n	800fe7e <__libc_init_array+0x2e>
 800fe72:	bd70      	pop	{r4, r5, r6, pc}
 800fe74:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe78:	4798      	blx	r3
 800fe7a:	3601      	adds	r6, #1
 800fe7c:	e7ee      	b.n	800fe5c <__libc_init_array+0xc>
 800fe7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe82:	4798      	blx	r3
 800fe84:	3601      	adds	r6, #1
 800fe86:	e7f2      	b.n	800fe6e <__libc_init_array+0x1e>
 800fe88:	080136ac 	.word	0x080136ac
 800fe8c:	080136ac 	.word	0x080136ac
 800fe90:	080136ac 	.word	0x080136ac
 800fe94:	080136b0 	.word	0x080136b0

0800fe98 <memset>:
 800fe98:	4402      	add	r2, r0
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d100      	bne.n	800fea2 <memset+0xa>
 800fea0:	4770      	bx	lr
 800fea2:	f803 1b01 	strb.w	r1, [r3], #1
 800fea6:	e7f9      	b.n	800fe9c <memset+0x4>

0800fea8 <__cvt>:
 800fea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800feac:	ec55 4b10 	vmov	r4, r5, d0
 800feb0:	2d00      	cmp	r5, #0
 800feb2:	460e      	mov	r6, r1
 800feb4:	4619      	mov	r1, r3
 800feb6:	462b      	mov	r3, r5
 800feb8:	bfbb      	ittet	lt
 800feba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800febe:	461d      	movlt	r5, r3
 800fec0:	2300      	movge	r3, #0
 800fec2:	232d      	movlt	r3, #45	; 0x2d
 800fec4:	700b      	strb	r3, [r1, #0]
 800fec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fec8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fecc:	4691      	mov	r9, r2
 800fece:	f023 0820 	bic.w	r8, r3, #32
 800fed2:	bfbc      	itt	lt
 800fed4:	4622      	movlt	r2, r4
 800fed6:	4614      	movlt	r4, r2
 800fed8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fedc:	d005      	beq.n	800feea <__cvt+0x42>
 800fede:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fee2:	d100      	bne.n	800fee6 <__cvt+0x3e>
 800fee4:	3601      	adds	r6, #1
 800fee6:	2102      	movs	r1, #2
 800fee8:	e000      	b.n	800feec <__cvt+0x44>
 800feea:	2103      	movs	r1, #3
 800feec:	ab03      	add	r3, sp, #12
 800feee:	9301      	str	r3, [sp, #4]
 800fef0:	ab02      	add	r3, sp, #8
 800fef2:	9300      	str	r3, [sp, #0]
 800fef4:	ec45 4b10 	vmov	d0, r4, r5
 800fef8:	4653      	mov	r3, sl
 800fefa:	4632      	mov	r2, r6
 800fefc:	f000 fcec 	bl	80108d8 <_dtoa_r>
 800ff00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ff04:	4607      	mov	r7, r0
 800ff06:	d102      	bne.n	800ff0e <__cvt+0x66>
 800ff08:	f019 0f01 	tst.w	r9, #1
 800ff0c:	d022      	beq.n	800ff54 <__cvt+0xac>
 800ff0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff12:	eb07 0906 	add.w	r9, r7, r6
 800ff16:	d110      	bne.n	800ff3a <__cvt+0x92>
 800ff18:	783b      	ldrb	r3, [r7, #0]
 800ff1a:	2b30      	cmp	r3, #48	; 0x30
 800ff1c:	d10a      	bne.n	800ff34 <__cvt+0x8c>
 800ff1e:	2200      	movs	r2, #0
 800ff20:	2300      	movs	r3, #0
 800ff22:	4620      	mov	r0, r4
 800ff24:	4629      	mov	r1, r5
 800ff26:	f7f0 fdd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff2a:	b918      	cbnz	r0, 800ff34 <__cvt+0x8c>
 800ff2c:	f1c6 0601 	rsb	r6, r6, #1
 800ff30:	f8ca 6000 	str.w	r6, [sl]
 800ff34:	f8da 3000 	ldr.w	r3, [sl]
 800ff38:	4499      	add	r9, r3
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	4620      	mov	r0, r4
 800ff40:	4629      	mov	r1, r5
 800ff42:	f7f0 fdc9 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff46:	b108      	cbz	r0, 800ff4c <__cvt+0xa4>
 800ff48:	f8cd 900c 	str.w	r9, [sp, #12]
 800ff4c:	2230      	movs	r2, #48	; 0x30
 800ff4e:	9b03      	ldr	r3, [sp, #12]
 800ff50:	454b      	cmp	r3, r9
 800ff52:	d307      	bcc.n	800ff64 <__cvt+0xbc>
 800ff54:	9b03      	ldr	r3, [sp, #12]
 800ff56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ff58:	1bdb      	subs	r3, r3, r7
 800ff5a:	4638      	mov	r0, r7
 800ff5c:	6013      	str	r3, [r2, #0]
 800ff5e:	b004      	add	sp, #16
 800ff60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff64:	1c59      	adds	r1, r3, #1
 800ff66:	9103      	str	r1, [sp, #12]
 800ff68:	701a      	strb	r2, [r3, #0]
 800ff6a:	e7f0      	b.n	800ff4e <__cvt+0xa6>

0800ff6c <__exponent>:
 800ff6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2900      	cmp	r1, #0
 800ff72:	bfb8      	it	lt
 800ff74:	4249      	neglt	r1, r1
 800ff76:	f803 2b02 	strb.w	r2, [r3], #2
 800ff7a:	bfb4      	ite	lt
 800ff7c:	222d      	movlt	r2, #45	; 0x2d
 800ff7e:	222b      	movge	r2, #43	; 0x2b
 800ff80:	2909      	cmp	r1, #9
 800ff82:	7042      	strb	r2, [r0, #1]
 800ff84:	dd2a      	ble.n	800ffdc <__exponent+0x70>
 800ff86:	f10d 0407 	add.w	r4, sp, #7
 800ff8a:	46a4      	mov	ip, r4
 800ff8c:	270a      	movs	r7, #10
 800ff8e:	46a6      	mov	lr, r4
 800ff90:	460a      	mov	r2, r1
 800ff92:	fb91 f6f7 	sdiv	r6, r1, r7
 800ff96:	fb07 1516 	mls	r5, r7, r6, r1
 800ff9a:	3530      	adds	r5, #48	; 0x30
 800ff9c:	2a63      	cmp	r2, #99	; 0x63
 800ff9e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ffa2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ffa6:	4631      	mov	r1, r6
 800ffa8:	dcf1      	bgt.n	800ff8e <__exponent+0x22>
 800ffaa:	3130      	adds	r1, #48	; 0x30
 800ffac:	f1ae 0502 	sub.w	r5, lr, #2
 800ffb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ffb4:	1c44      	adds	r4, r0, #1
 800ffb6:	4629      	mov	r1, r5
 800ffb8:	4561      	cmp	r1, ip
 800ffba:	d30a      	bcc.n	800ffd2 <__exponent+0x66>
 800ffbc:	f10d 0209 	add.w	r2, sp, #9
 800ffc0:	eba2 020e 	sub.w	r2, r2, lr
 800ffc4:	4565      	cmp	r5, ip
 800ffc6:	bf88      	it	hi
 800ffc8:	2200      	movhi	r2, #0
 800ffca:	4413      	add	r3, r2
 800ffcc:	1a18      	subs	r0, r3, r0
 800ffce:	b003      	add	sp, #12
 800ffd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ffda:	e7ed      	b.n	800ffb8 <__exponent+0x4c>
 800ffdc:	2330      	movs	r3, #48	; 0x30
 800ffde:	3130      	adds	r1, #48	; 0x30
 800ffe0:	7083      	strb	r3, [r0, #2]
 800ffe2:	70c1      	strb	r1, [r0, #3]
 800ffe4:	1d03      	adds	r3, r0, #4
 800ffe6:	e7f1      	b.n	800ffcc <__exponent+0x60>

0800ffe8 <_printf_float>:
 800ffe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffec:	ed2d 8b02 	vpush	{d8}
 800fff0:	b08d      	sub	sp, #52	; 0x34
 800fff2:	460c      	mov	r4, r1
 800fff4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fff8:	4616      	mov	r6, r2
 800fffa:	461f      	mov	r7, r3
 800fffc:	4605      	mov	r5, r0
 800fffe:	f001 fa59 	bl	80114b4 <_localeconv_r>
 8010002:	f8d0 a000 	ldr.w	sl, [r0]
 8010006:	4650      	mov	r0, sl
 8010008:	f7f0 f8ea 	bl	80001e0 <strlen>
 801000c:	2300      	movs	r3, #0
 801000e:	930a      	str	r3, [sp, #40]	; 0x28
 8010010:	6823      	ldr	r3, [r4, #0]
 8010012:	9305      	str	r3, [sp, #20]
 8010014:	f8d8 3000 	ldr.w	r3, [r8]
 8010018:	f894 b018 	ldrb.w	fp, [r4, #24]
 801001c:	3307      	adds	r3, #7
 801001e:	f023 0307 	bic.w	r3, r3, #7
 8010022:	f103 0208 	add.w	r2, r3, #8
 8010026:	f8c8 2000 	str.w	r2, [r8]
 801002a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010032:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010036:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801003a:	9307      	str	r3, [sp, #28]
 801003c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010040:	ee08 0a10 	vmov	s16, r0
 8010044:	4b9f      	ldr	r3, [pc, #636]	; (80102c4 <_printf_float+0x2dc>)
 8010046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801004a:	f04f 32ff 	mov.w	r2, #4294967295
 801004e:	f7f0 fd75 	bl	8000b3c <__aeabi_dcmpun>
 8010052:	bb88      	cbnz	r0, 80100b8 <_printf_float+0xd0>
 8010054:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010058:	4b9a      	ldr	r3, [pc, #616]	; (80102c4 <_printf_float+0x2dc>)
 801005a:	f04f 32ff 	mov.w	r2, #4294967295
 801005e:	f7f0 fd4f 	bl	8000b00 <__aeabi_dcmple>
 8010062:	bb48      	cbnz	r0, 80100b8 <_printf_float+0xd0>
 8010064:	2200      	movs	r2, #0
 8010066:	2300      	movs	r3, #0
 8010068:	4640      	mov	r0, r8
 801006a:	4649      	mov	r1, r9
 801006c:	f7f0 fd3e 	bl	8000aec <__aeabi_dcmplt>
 8010070:	b110      	cbz	r0, 8010078 <_printf_float+0x90>
 8010072:	232d      	movs	r3, #45	; 0x2d
 8010074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010078:	4b93      	ldr	r3, [pc, #588]	; (80102c8 <_printf_float+0x2e0>)
 801007a:	4894      	ldr	r0, [pc, #592]	; (80102cc <_printf_float+0x2e4>)
 801007c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010080:	bf94      	ite	ls
 8010082:	4698      	movls	r8, r3
 8010084:	4680      	movhi	r8, r0
 8010086:	2303      	movs	r3, #3
 8010088:	6123      	str	r3, [r4, #16]
 801008a:	9b05      	ldr	r3, [sp, #20]
 801008c:	f023 0204 	bic.w	r2, r3, #4
 8010090:	6022      	str	r2, [r4, #0]
 8010092:	f04f 0900 	mov.w	r9, #0
 8010096:	9700      	str	r7, [sp, #0]
 8010098:	4633      	mov	r3, r6
 801009a:	aa0b      	add	r2, sp, #44	; 0x2c
 801009c:	4621      	mov	r1, r4
 801009e:	4628      	mov	r0, r5
 80100a0:	f000 f9d8 	bl	8010454 <_printf_common>
 80100a4:	3001      	adds	r0, #1
 80100a6:	f040 8090 	bne.w	80101ca <_printf_float+0x1e2>
 80100aa:	f04f 30ff 	mov.w	r0, #4294967295
 80100ae:	b00d      	add	sp, #52	; 0x34
 80100b0:	ecbd 8b02 	vpop	{d8}
 80100b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b8:	4642      	mov	r2, r8
 80100ba:	464b      	mov	r3, r9
 80100bc:	4640      	mov	r0, r8
 80100be:	4649      	mov	r1, r9
 80100c0:	f7f0 fd3c 	bl	8000b3c <__aeabi_dcmpun>
 80100c4:	b140      	cbz	r0, 80100d8 <_printf_float+0xf0>
 80100c6:	464b      	mov	r3, r9
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	bfbc      	itt	lt
 80100cc:	232d      	movlt	r3, #45	; 0x2d
 80100ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80100d2:	487f      	ldr	r0, [pc, #508]	; (80102d0 <_printf_float+0x2e8>)
 80100d4:	4b7f      	ldr	r3, [pc, #508]	; (80102d4 <_printf_float+0x2ec>)
 80100d6:	e7d1      	b.n	801007c <_printf_float+0x94>
 80100d8:	6863      	ldr	r3, [r4, #4]
 80100da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80100de:	9206      	str	r2, [sp, #24]
 80100e0:	1c5a      	adds	r2, r3, #1
 80100e2:	d13f      	bne.n	8010164 <_printf_float+0x17c>
 80100e4:	2306      	movs	r3, #6
 80100e6:	6063      	str	r3, [r4, #4]
 80100e8:	9b05      	ldr	r3, [sp, #20]
 80100ea:	6861      	ldr	r1, [r4, #4]
 80100ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80100f0:	2300      	movs	r3, #0
 80100f2:	9303      	str	r3, [sp, #12]
 80100f4:	ab0a      	add	r3, sp, #40	; 0x28
 80100f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80100fa:	ab09      	add	r3, sp, #36	; 0x24
 80100fc:	ec49 8b10 	vmov	d0, r8, r9
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	6022      	str	r2, [r4, #0]
 8010104:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010108:	4628      	mov	r0, r5
 801010a:	f7ff fecd 	bl	800fea8 <__cvt>
 801010e:	9b06      	ldr	r3, [sp, #24]
 8010110:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010112:	2b47      	cmp	r3, #71	; 0x47
 8010114:	4680      	mov	r8, r0
 8010116:	d108      	bne.n	801012a <_printf_float+0x142>
 8010118:	1cc8      	adds	r0, r1, #3
 801011a:	db02      	blt.n	8010122 <_printf_float+0x13a>
 801011c:	6863      	ldr	r3, [r4, #4]
 801011e:	4299      	cmp	r1, r3
 8010120:	dd41      	ble.n	80101a6 <_printf_float+0x1be>
 8010122:	f1ab 0b02 	sub.w	fp, fp, #2
 8010126:	fa5f fb8b 	uxtb.w	fp, fp
 801012a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801012e:	d820      	bhi.n	8010172 <_printf_float+0x18a>
 8010130:	3901      	subs	r1, #1
 8010132:	465a      	mov	r2, fp
 8010134:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010138:	9109      	str	r1, [sp, #36]	; 0x24
 801013a:	f7ff ff17 	bl	800ff6c <__exponent>
 801013e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010140:	1813      	adds	r3, r2, r0
 8010142:	2a01      	cmp	r2, #1
 8010144:	4681      	mov	r9, r0
 8010146:	6123      	str	r3, [r4, #16]
 8010148:	dc02      	bgt.n	8010150 <_printf_float+0x168>
 801014a:	6822      	ldr	r2, [r4, #0]
 801014c:	07d2      	lsls	r2, r2, #31
 801014e:	d501      	bpl.n	8010154 <_printf_float+0x16c>
 8010150:	3301      	adds	r3, #1
 8010152:	6123      	str	r3, [r4, #16]
 8010154:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010158:	2b00      	cmp	r3, #0
 801015a:	d09c      	beq.n	8010096 <_printf_float+0xae>
 801015c:	232d      	movs	r3, #45	; 0x2d
 801015e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010162:	e798      	b.n	8010096 <_printf_float+0xae>
 8010164:	9a06      	ldr	r2, [sp, #24]
 8010166:	2a47      	cmp	r2, #71	; 0x47
 8010168:	d1be      	bne.n	80100e8 <_printf_float+0x100>
 801016a:	2b00      	cmp	r3, #0
 801016c:	d1bc      	bne.n	80100e8 <_printf_float+0x100>
 801016e:	2301      	movs	r3, #1
 8010170:	e7b9      	b.n	80100e6 <_printf_float+0xfe>
 8010172:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010176:	d118      	bne.n	80101aa <_printf_float+0x1c2>
 8010178:	2900      	cmp	r1, #0
 801017a:	6863      	ldr	r3, [r4, #4]
 801017c:	dd0b      	ble.n	8010196 <_printf_float+0x1ae>
 801017e:	6121      	str	r1, [r4, #16]
 8010180:	b913      	cbnz	r3, 8010188 <_printf_float+0x1a0>
 8010182:	6822      	ldr	r2, [r4, #0]
 8010184:	07d0      	lsls	r0, r2, #31
 8010186:	d502      	bpl.n	801018e <_printf_float+0x1a6>
 8010188:	3301      	adds	r3, #1
 801018a:	440b      	add	r3, r1
 801018c:	6123      	str	r3, [r4, #16]
 801018e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010190:	f04f 0900 	mov.w	r9, #0
 8010194:	e7de      	b.n	8010154 <_printf_float+0x16c>
 8010196:	b913      	cbnz	r3, 801019e <_printf_float+0x1b6>
 8010198:	6822      	ldr	r2, [r4, #0]
 801019a:	07d2      	lsls	r2, r2, #31
 801019c:	d501      	bpl.n	80101a2 <_printf_float+0x1ba>
 801019e:	3302      	adds	r3, #2
 80101a0:	e7f4      	b.n	801018c <_printf_float+0x1a4>
 80101a2:	2301      	movs	r3, #1
 80101a4:	e7f2      	b.n	801018c <_printf_float+0x1a4>
 80101a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80101aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101ac:	4299      	cmp	r1, r3
 80101ae:	db05      	blt.n	80101bc <_printf_float+0x1d4>
 80101b0:	6823      	ldr	r3, [r4, #0]
 80101b2:	6121      	str	r1, [r4, #16]
 80101b4:	07d8      	lsls	r0, r3, #31
 80101b6:	d5ea      	bpl.n	801018e <_printf_float+0x1a6>
 80101b8:	1c4b      	adds	r3, r1, #1
 80101ba:	e7e7      	b.n	801018c <_printf_float+0x1a4>
 80101bc:	2900      	cmp	r1, #0
 80101be:	bfd4      	ite	le
 80101c0:	f1c1 0202 	rsble	r2, r1, #2
 80101c4:	2201      	movgt	r2, #1
 80101c6:	4413      	add	r3, r2
 80101c8:	e7e0      	b.n	801018c <_printf_float+0x1a4>
 80101ca:	6823      	ldr	r3, [r4, #0]
 80101cc:	055a      	lsls	r2, r3, #21
 80101ce:	d407      	bmi.n	80101e0 <_printf_float+0x1f8>
 80101d0:	6923      	ldr	r3, [r4, #16]
 80101d2:	4642      	mov	r2, r8
 80101d4:	4631      	mov	r1, r6
 80101d6:	4628      	mov	r0, r5
 80101d8:	47b8      	blx	r7
 80101da:	3001      	adds	r0, #1
 80101dc:	d12c      	bne.n	8010238 <_printf_float+0x250>
 80101de:	e764      	b.n	80100aa <_printf_float+0xc2>
 80101e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80101e4:	f240 80e0 	bls.w	80103a8 <_printf_float+0x3c0>
 80101e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80101ec:	2200      	movs	r2, #0
 80101ee:	2300      	movs	r3, #0
 80101f0:	f7f0 fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 80101f4:	2800      	cmp	r0, #0
 80101f6:	d034      	beq.n	8010262 <_printf_float+0x27a>
 80101f8:	4a37      	ldr	r2, [pc, #220]	; (80102d8 <_printf_float+0x2f0>)
 80101fa:	2301      	movs	r3, #1
 80101fc:	4631      	mov	r1, r6
 80101fe:	4628      	mov	r0, r5
 8010200:	47b8      	blx	r7
 8010202:	3001      	adds	r0, #1
 8010204:	f43f af51 	beq.w	80100aa <_printf_float+0xc2>
 8010208:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801020c:	429a      	cmp	r2, r3
 801020e:	db02      	blt.n	8010216 <_printf_float+0x22e>
 8010210:	6823      	ldr	r3, [r4, #0]
 8010212:	07d8      	lsls	r0, r3, #31
 8010214:	d510      	bpl.n	8010238 <_printf_float+0x250>
 8010216:	ee18 3a10 	vmov	r3, s16
 801021a:	4652      	mov	r2, sl
 801021c:	4631      	mov	r1, r6
 801021e:	4628      	mov	r0, r5
 8010220:	47b8      	blx	r7
 8010222:	3001      	adds	r0, #1
 8010224:	f43f af41 	beq.w	80100aa <_printf_float+0xc2>
 8010228:	f04f 0800 	mov.w	r8, #0
 801022c:	f104 091a 	add.w	r9, r4, #26
 8010230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010232:	3b01      	subs	r3, #1
 8010234:	4543      	cmp	r3, r8
 8010236:	dc09      	bgt.n	801024c <_printf_float+0x264>
 8010238:	6823      	ldr	r3, [r4, #0]
 801023a:	079b      	lsls	r3, r3, #30
 801023c:	f100 8105 	bmi.w	801044a <_printf_float+0x462>
 8010240:	68e0      	ldr	r0, [r4, #12]
 8010242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010244:	4298      	cmp	r0, r3
 8010246:	bfb8      	it	lt
 8010248:	4618      	movlt	r0, r3
 801024a:	e730      	b.n	80100ae <_printf_float+0xc6>
 801024c:	2301      	movs	r3, #1
 801024e:	464a      	mov	r2, r9
 8010250:	4631      	mov	r1, r6
 8010252:	4628      	mov	r0, r5
 8010254:	47b8      	blx	r7
 8010256:	3001      	adds	r0, #1
 8010258:	f43f af27 	beq.w	80100aa <_printf_float+0xc2>
 801025c:	f108 0801 	add.w	r8, r8, #1
 8010260:	e7e6      	b.n	8010230 <_printf_float+0x248>
 8010262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010264:	2b00      	cmp	r3, #0
 8010266:	dc39      	bgt.n	80102dc <_printf_float+0x2f4>
 8010268:	4a1b      	ldr	r2, [pc, #108]	; (80102d8 <_printf_float+0x2f0>)
 801026a:	2301      	movs	r3, #1
 801026c:	4631      	mov	r1, r6
 801026e:	4628      	mov	r0, r5
 8010270:	47b8      	blx	r7
 8010272:	3001      	adds	r0, #1
 8010274:	f43f af19 	beq.w	80100aa <_printf_float+0xc2>
 8010278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801027c:	4313      	orrs	r3, r2
 801027e:	d102      	bne.n	8010286 <_printf_float+0x29e>
 8010280:	6823      	ldr	r3, [r4, #0]
 8010282:	07d9      	lsls	r1, r3, #31
 8010284:	d5d8      	bpl.n	8010238 <_printf_float+0x250>
 8010286:	ee18 3a10 	vmov	r3, s16
 801028a:	4652      	mov	r2, sl
 801028c:	4631      	mov	r1, r6
 801028e:	4628      	mov	r0, r5
 8010290:	47b8      	blx	r7
 8010292:	3001      	adds	r0, #1
 8010294:	f43f af09 	beq.w	80100aa <_printf_float+0xc2>
 8010298:	f04f 0900 	mov.w	r9, #0
 801029c:	f104 0a1a 	add.w	sl, r4, #26
 80102a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102a2:	425b      	negs	r3, r3
 80102a4:	454b      	cmp	r3, r9
 80102a6:	dc01      	bgt.n	80102ac <_printf_float+0x2c4>
 80102a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102aa:	e792      	b.n	80101d2 <_printf_float+0x1ea>
 80102ac:	2301      	movs	r3, #1
 80102ae:	4652      	mov	r2, sl
 80102b0:	4631      	mov	r1, r6
 80102b2:	4628      	mov	r0, r5
 80102b4:	47b8      	blx	r7
 80102b6:	3001      	adds	r0, #1
 80102b8:	f43f aef7 	beq.w	80100aa <_printf_float+0xc2>
 80102bc:	f109 0901 	add.w	r9, r9, #1
 80102c0:	e7ee      	b.n	80102a0 <_printf_float+0x2b8>
 80102c2:	bf00      	nop
 80102c4:	7fefffff 	.word	0x7fefffff
 80102c8:	080132d0 	.word	0x080132d0
 80102cc:	080132d4 	.word	0x080132d4
 80102d0:	080132dc 	.word	0x080132dc
 80102d4:	080132d8 	.word	0x080132d8
 80102d8:	080132e0 	.word	0x080132e0
 80102dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80102de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80102e0:	429a      	cmp	r2, r3
 80102e2:	bfa8      	it	ge
 80102e4:	461a      	movge	r2, r3
 80102e6:	2a00      	cmp	r2, #0
 80102e8:	4691      	mov	r9, r2
 80102ea:	dc37      	bgt.n	801035c <_printf_float+0x374>
 80102ec:	f04f 0b00 	mov.w	fp, #0
 80102f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102f4:	f104 021a 	add.w	r2, r4, #26
 80102f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80102fa:	9305      	str	r3, [sp, #20]
 80102fc:	eba3 0309 	sub.w	r3, r3, r9
 8010300:	455b      	cmp	r3, fp
 8010302:	dc33      	bgt.n	801036c <_printf_float+0x384>
 8010304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010308:	429a      	cmp	r2, r3
 801030a:	db3b      	blt.n	8010384 <_printf_float+0x39c>
 801030c:	6823      	ldr	r3, [r4, #0]
 801030e:	07da      	lsls	r2, r3, #31
 8010310:	d438      	bmi.n	8010384 <_printf_float+0x39c>
 8010312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010314:	9a05      	ldr	r2, [sp, #20]
 8010316:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010318:	1a9a      	subs	r2, r3, r2
 801031a:	eba3 0901 	sub.w	r9, r3, r1
 801031e:	4591      	cmp	r9, r2
 8010320:	bfa8      	it	ge
 8010322:	4691      	movge	r9, r2
 8010324:	f1b9 0f00 	cmp.w	r9, #0
 8010328:	dc35      	bgt.n	8010396 <_printf_float+0x3ae>
 801032a:	f04f 0800 	mov.w	r8, #0
 801032e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010332:	f104 0a1a 	add.w	sl, r4, #26
 8010336:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801033a:	1a9b      	subs	r3, r3, r2
 801033c:	eba3 0309 	sub.w	r3, r3, r9
 8010340:	4543      	cmp	r3, r8
 8010342:	f77f af79 	ble.w	8010238 <_printf_float+0x250>
 8010346:	2301      	movs	r3, #1
 8010348:	4652      	mov	r2, sl
 801034a:	4631      	mov	r1, r6
 801034c:	4628      	mov	r0, r5
 801034e:	47b8      	blx	r7
 8010350:	3001      	adds	r0, #1
 8010352:	f43f aeaa 	beq.w	80100aa <_printf_float+0xc2>
 8010356:	f108 0801 	add.w	r8, r8, #1
 801035a:	e7ec      	b.n	8010336 <_printf_float+0x34e>
 801035c:	4613      	mov	r3, r2
 801035e:	4631      	mov	r1, r6
 8010360:	4642      	mov	r2, r8
 8010362:	4628      	mov	r0, r5
 8010364:	47b8      	blx	r7
 8010366:	3001      	adds	r0, #1
 8010368:	d1c0      	bne.n	80102ec <_printf_float+0x304>
 801036a:	e69e      	b.n	80100aa <_printf_float+0xc2>
 801036c:	2301      	movs	r3, #1
 801036e:	4631      	mov	r1, r6
 8010370:	4628      	mov	r0, r5
 8010372:	9205      	str	r2, [sp, #20]
 8010374:	47b8      	blx	r7
 8010376:	3001      	adds	r0, #1
 8010378:	f43f ae97 	beq.w	80100aa <_printf_float+0xc2>
 801037c:	9a05      	ldr	r2, [sp, #20]
 801037e:	f10b 0b01 	add.w	fp, fp, #1
 8010382:	e7b9      	b.n	80102f8 <_printf_float+0x310>
 8010384:	ee18 3a10 	vmov	r3, s16
 8010388:	4652      	mov	r2, sl
 801038a:	4631      	mov	r1, r6
 801038c:	4628      	mov	r0, r5
 801038e:	47b8      	blx	r7
 8010390:	3001      	adds	r0, #1
 8010392:	d1be      	bne.n	8010312 <_printf_float+0x32a>
 8010394:	e689      	b.n	80100aa <_printf_float+0xc2>
 8010396:	9a05      	ldr	r2, [sp, #20]
 8010398:	464b      	mov	r3, r9
 801039a:	4442      	add	r2, r8
 801039c:	4631      	mov	r1, r6
 801039e:	4628      	mov	r0, r5
 80103a0:	47b8      	blx	r7
 80103a2:	3001      	adds	r0, #1
 80103a4:	d1c1      	bne.n	801032a <_printf_float+0x342>
 80103a6:	e680      	b.n	80100aa <_printf_float+0xc2>
 80103a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103aa:	2a01      	cmp	r2, #1
 80103ac:	dc01      	bgt.n	80103b2 <_printf_float+0x3ca>
 80103ae:	07db      	lsls	r3, r3, #31
 80103b0:	d538      	bpl.n	8010424 <_printf_float+0x43c>
 80103b2:	2301      	movs	r3, #1
 80103b4:	4642      	mov	r2, r8
 80103b6:	4631      	mov	r1, r6
 80103b8:	4628      	mov	r0, r5
 80103ba:	47b8      	blx	r7
 80103bc:	3001      	adds	r0, #1
 80103be:	f43f ae74 	beq.w	80100aa <_printf_float+0xc2>
 80103c2:	ee18 3a10 	vmov	r3, s16
 80103c6:	4652      	mov	r2, sl
 80103c8:	4631      	mov	r1, r6
 80103ca:	4628      	mov	r0, r5
 80103cc:	47b8      	blx	r7
 80103ce:	3001      	adds	r0, #1
 80103d0:	f43f ae6b 	beq.w	80100aa <_printf_float+0xc2>
 80103d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80103d8:	2200      	movs	r2, #0
 80103da:	2300      	movs	r3, #0
 80103dc:	f7f0 fb7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80103e0:	b9d8      	cbnz	r0, 801041a <_printf_float+0x432>
 80103e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103e4:	f108 0201 	add.w	r2, r8, #1
 80103e8:	3b01      	subs	r3, #1
 80103ea:	4631      	mov	r1, r6
 80103ec:	4628      	mov	r0, r5
 80103ee:	47b8      	blx	r7
 80103f0:	3001      	adds	r0, #1
 80103f2:	d10e      	bne.n	8010412 <_printf_float+0x42a>
 80103f4:	e659      	b.n	80100aa <_printf_float+0xc2>
 80103f6:	2301      	movs	r3, #1
 80103f8:	4652      	mov	r2, sl
 80103fa:	4631      	mov	r1, r6
 80103fc:	4628      	mov	r0, r5
 80103fe:	47b8      	blx	r7
 8010400:	3001      	adds	r0, #1
 8010402:	f43f ae52 	beq.w	80100aa <_printf_float+0xc2>
 8010406:	f108 0801 	add.w	r8, r8, #1
 801040a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801040c:	3b01      	subs	r3, #1
 801040e:	4543      	cmp	r3, r8
 8010410:	dcf1      	bgt.n	80103f6 <_printf_float+0x40e>
 8010412:	464b      	mov	r3, r9
 8010414:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010418:	e6dc      	b.n	80101d4 <_printf_float+0x1ec>
 801041a:	f04f 0800 	mov.w	r8, #0
 801041e:	f104 0a1a 	add.w	sl, r4, #26
 8010422:	e7f2      	b.n	801040a <_printf_float+0x422>
 8010424:	2301      	movs	r3, #1
 8010426:	4642      	mov	r2, r8
 8010428:	e7df      	b.n	80103ea <_printf_float+0x402>
 801042a:	2301      	movs	r3, #1
 801042c:	464a      	mov	r2, r9
 801042e:	4631      	mov	r1, r6
 8010430:	4628      	mov	r0, r5
 8010432:	47b8      	blx	r7
 8010434:	3001      	adds	r0, #1
 8010436:	f43f ae38 	beq.w	80100aa <_printf_float+0xc2>
 801043a:	f108 0801 	add.w	r8, r8, #1
 801043e:	68e3      	ldr	r3, [r4, #12]
 8010440:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010442:	1a5b      	subs	r3, r3, r1
 8010444:	4543      	cmp	r3, r8
 8010446:	dcf0      	bgt.n	801042a <_printf_float+0x442>
 8010448:	e6fa      	b.n	8010240 <_printf_float+0x258>
 801044a:	f04f 0800 	mov.w	r8, #0
 801044e:	f104 0919 	add.w	r9, r4, #25
 8010452:	e7f4      	b.n	801043e <_printf_float+0x456>

08010454 <_printf_common>:
 8010454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010458:	4616      	mov	r6, r2
 801045a:	4699      	mov	r9, r3
 801045c:	688a      	ldr	r2, [r1, #8]
 801045e:	690b      	ldr	r3, [r1, #16]
 8010460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010464:	4293      	cmp	r3, r2
 8010466:	bfb8      	it	lt
 8010468:	4613      	movlt	r3, r2
 801046a:	6033      	str	r3, [r6, #0]
 801046c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010470:	4607      	mov	r7, r0
 8010472:	460c      	mov	r4, r1
 8010474:	b10a      	cbz	r2, 801047a <_printf_common+0x26>
 8010476:	3301      	adds	r3, #1
 8010478:	6033      	str	r3, [r6, #0]
 801047a:	6823      	ldr	r3, [r4, #0]
 801047c:	0699      	lsls	r1, r3, #26
 801047e:	bf42      	ittt	mi
 8010480:	6833      	ldrmi	r3, [r6, #0]
 8010482:	3302      	addmi	r3, #2
 8010484:	6033      	strmi	r3, [r6, #0]
 8010486:	6825      	ldr	r5, [r4, #0]
 8010488:	f015 0506 	ands.w	r5, r5, #6
 801048c:	d106      	bne.n	801049c <_printf_common+0x48>
 801048e:	f104 0a19 	add.w	sl, r4, #25
 8010492:	68e3      	ldr	r3, [r4, #12]
 8010494:	6832      	ldr	r2, [r6, #0]
 8010496:	1a9b      	subs	r3, r3, r2
 8010498:	42ab      	cmp	r3, r5
 801049a:	dc26      	bgt.n	80104ea <_printf_common+0x96>
 801049c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104a0:	1e13      	subs	r3, r2, #0
 80104a2:	6822      	ldr	r2, [r4, #0]
 80104a4:	bf18      	it	ne
 80104a6:	2301      	movne	r3, #1
 80104a8:	0692      	lsls	r2, r2, #26
 80104aa:	d42b      	bmi.n	8010504 <_printf_common+0xb0>
 80104ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104b0:	4649      	mov	r1, r9
 80104b2:	4638      	mov	r0, r7
 80104b4:	47c0      	blx	r8
 80104b6:	3001      	adds	r0, #1
 80104b8:	d01e      	beq.n	80104f8 <_printf_common+0xa4>
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	68e5      	ldr	r5, [r4, #12]
 80104be:	6832      	ldr	r2, [r6, #0]
 80104c0:	f003 0306 	and.w	r3, r3, #6
 80104c4:	2b04      	cmp	r3, #4
 80104c6:	bf08      	it	eq
 80104c8:	1aad      	subeq	r5, r5, r2
 80104ca:	68a3      	ldr	r3, [r4, #8]
 80104cc:	6922      	ldr	r2, [r4, #16]
 80104ce:	bf0c      	ite	eq
 80104d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104d4:	2500      	movne	r5, #0
 80104d6:	4293      	cmp	r3, r2
 80104d8:	bfc4      	itt	gt
 80104da:	1a9b      	subgt	r3, r3, r2
 80104dc:	18ed      	addgt	r5, r5, r3
 80104de:	2600      	movs	r6, #0
 80104e0:	341a      	adds	r4, #26
 80104e2:	42b5      	cmp	r5, r6
 80104e4:	d11a      	bne.n	801051c <_printf_common+0xc8>
 80104e6:	2000      	movs	r0, #0
 80104e8:	e008      	b.n	80104fc <_printf_common+0xa8>
 80104ea:	2301      	movs	r3, #1
 80104ec:	4652      	mov	r2, sl
 80104ee:	4649      	mov	r1, r9
 80104f0:	4638      	mov	r0, r7
 80104f2:	47c0      	blx	r8
 80104f4:	3001      	adds	r0, #1
 80104f6:	d103      	bne.n	8010500 <_printf_common+0xac>
 80104f8:	f04f 30ff 	mov.w	r0, #4294967295
 80104fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010500:	3501      	adds	r5, #1
 8010502:	e7c6      	b.n	8010492 <_printf_common+0x3e>
 8010504:	18e1      	adds	r1, r4, r3
 8010506:	1c5a      	adds	r2, r3, #1
 8010508:	2030      	movs	r0, #48	; 0x30
 801050a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801050e:	4422      	add	r2, r4
 8010510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010518:	3302      	adds	r3, #2
 801051a:	e7c7      	b.n	80104ac <_printf_common+0x58>
 801051c:	2301      	movs	r3, #1
 801051e:	4622      	mov	r2, r4
 8010520:	4649      	mov	r1, r9
 8010522:	4638      	mov	r0, r7
 8010524:	47c0      	blx	r8
 8010526:	3001      	adds	r0, #1
 8010528:	d0e6      	beq.n	80104f8 <_printf_common+0xa4>
 801052a:	3601      	adds	r6, #1
 801052c:	e7d9      	b.n	80104e2 <_printf_common+0x8e>
	...

08010530 <_printf_i>:
 8010530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010534:	7e0f      	ldrb	r7, [r1, #24]
 8010536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010538:	2f78      	cmp	r7, #120	; 0x78
 801053a:	4691      	mov	r9, r2
 801053c:	4680      	mov	r8, r0
 801053e:	460c      	mov	r4, r1
 8010540:	469a      	mov	sl, r3
 8010542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010546:	d807      	bhi.n	8010558 <_printf_i+0x28>
 8010548:	2f62      	cmp	r7, #98	; 0x62
 801054a:	d80a      	bhi.n	8010562 <_printf_i+0x32>
 801054c:	2f00      	cmp	r7, #0
 801054e:	f000 80d8 	beq.w	8010702 <_printf_i+0x1d2>
 8010552:	2f58      	cmp	r7, #88	; 0x58
 8010554:	f000 80a3 	beq.w	801069e <_printf_i+0x16e>
 8010558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801055c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010560:	e03a      	b.n	80105d8 <_printf_i+0xa8>
 8010562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010566:	2b15      	cmp	r3, #21
 8010568:	d8f6      	bhi.n	8010558 <_printf_i+0x28>
 801056a:	a101      	add	r1, pc, #4	; (adr r1, 8010570 <_printf_i+0x40>)
 801056c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010570:	080105c9 	.word	0x080105c9
 8010574:	080105dd 	.word	0x080105dd
 8010578:	08010559 	.word	0x08010559
 801057c:	08010559 	.word	0x08010559
 8010580:	08010559 	.word	0x08010559
 8010584:	08010559 	.word	0x08010559
 8010588:	080105dd 	.word	0x080105dd
 801058c:	08010559 	.word	0x08010559
 8010590:	08010559 	.word	0x08010559
 8010594:	08010559 	.word	0x08010559
 8010598:	08010559 	.word	0x08010559
 801059c:	080106e9 	.word	0x080106e9
 80105a0:	0801060d 	.word	0x0801060d
 80105a4:	080106cb 	.word	0x080106cb
 80105a8:	08010559 	.word	0x08010559
 80105ac:	08010559 	.word	0x08010559
 80105b0:	0801070b 	.word	0x0801070b
 80105b4:	08010559 	.word	0x08010559
 80105b8:	0801060d 	.word	0x0801060d
 80105bc:	08010559 	.word	0x08010559
 80105c0:	08010559 	.word	0x08010559
 80105c4:	080106d3 	.word	0x080106d3
 80105c8:	682b      	ldr	r3, [r5, #0]
 80105ca:	1d1a      	adds	r2, r3, #4
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	602a      	str	r2, [r5, #0]
 80105d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80105d8:	2301      	movs	r3, #1
 80105da:	e0a3      	b.n	8010724 <_printf_i+0x1f4>
 80105dc:	6820      	ldr	r0, [r4, #0]
 80105de:	6829      	ldr	r1, [r5, #0]
 80105e0:	0606      	lsls	r6, r0, #24
 80105e2:	f101 0304 	add.w	r3, r1, #4
 80105e6:	d50a      	bpl.n	80105fe <_printf_i+0xce>
 80105e8:	680e      	ldr	r6, [r1, #0]
 80105ea:	602b      	str	r3, [r5, #0]
 80105ec:	2e00      	cmp	r6, #0
 80105ee:	da03      	bge.n	80105f8 <_printf_i+0xc8>
 80105f0:	232d      	movs	r3, #45	; 0x2d
 80105f2:	4276      	negs	r6, r6
 80105f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105f8:	485e      	ldr	r0, [pc, #376]	; (8010774 <_printf_i+0x244>)
 80105fa:	230a      	movs	r3, #10
 80105fc:	e019      	b.n	8010632 <_printf_i+0x102>
 80105fe:	680e      	ldr	r6, [r1, #0]
 8010600:	602b      	str	r3, [r5, #0]
 8010602:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010606:	bf18      	it	ne
 8010608:	b236      	sxthne	r6, r6
 801060a:	e7ef      	b.n	80105ec <_printf_i+0xbc>
 801060c:	682b      	ldr	r3, [r5, #0]
 801060e:	6820      	ldr	r0, [r4, #0]
 8010610:	1d19      	adds	r1, r3, #4
 8010612:	6029      	str	r1, [r5, #0]
 8010614:	0601      	lsls	r1, r0, #24
 8010616:	d501      	bpl.n	801061c <_printf_i+0xec>
 8010618:	681e      	ldr	r6, [r3, #0]
 801061a:	e002      	b.n	8010622 <_printf_i+0xf2>
 801061c:	0646      	lsls	r6, r0, #25
 801061e:	d5fb      	bpl.n	8010618 <_printf_i+0xe8>
 8010620:	881e      	ldrh	r6, [r3, #0]
 8010622:	4854      	ldr	r0, [pc, #336]	; (8010774 <_printf_i+0x244>)
 8010624:	2f6f      	cmp	r7, #111	; 0x6f
 8010626:	bf0c      	ite	eq
 8010628:	2308      	moveq	r3, #8
 801062a:	230a      	movne	r3, #10
 801062c:	2100      	movs	r1, #0
 801062e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010632:	6865      	ldr	r5, [r4, #4]
 8010634:	60a5      	str	r5, [r4, #8]
 8010636:	2d00      	cmp	r5, #0
 8010638:	bfa2      	ittt	ge
 801063a:	6821      	ldrge	r1, [r4, #0]
 801063c:	f021 0104 	bicge.w	r1, r1, #4
 8010640:	6021      	strge	r1, [r4, #0]
 8010642:	b90e      	cbnz	r6, 8010648 <_printf_i+0x118>
 8010644:	2d00      	cmp	r5, #0
 8010646:	d04d      	beq.n	80106e4 <_printf_i+0x1b4>
 8010648:	4615      	mov	r5, r2
 801064a:	fbb6 f1f3 	udiv	r1, r6, r3
 801064e:	fb03 6711 	mls	r7, r3, r1, r6
 8010652:	5dc7      	ldrb	r7, [r0, r7]
 8010654:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010658:	4637      	mov	r7, r6
 801065a:	42bb      	cmp	r3, r7
 801065c:	460e      	mov	r6, r1
 801065e:	d9f4      	bls.n	801064a <_printf_i+0x11a>
 8010660:	2b08      	cmp	r3, #8
 8010662:	d10b      	bne.n	801067c <_printf_i+0x14c>
 8010664:	6823      	ldr	r3, [r4, #0]
 8010666:	07de      	lsls	r6, r3, #31
 8010668:	d508      	bpl.n	801067c <_printf_i+0x14c>
 801066a:	6923      	ldr	r3, [r4, #16]
 801066c:	6861      	ldr	r1, [r4, #4]
 801066e:	4299      	cmp	r1, r3
 8010670:	bfde      	ittt	le
 8010672:	2330      	movle	r3, #48	; 0x30
 8010674:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010678:	f105 35ff 	addle.w	r5, r5, #4294967295
 801067c:	1b52      	subs	r2, r2, r5
 801067e:	6122      	str	r2, [r4, #16]
 8010680:	f8cd a000 	str.w	sl, [sp]
 8010684:	464b      	mov	r3, r9
 8010686:	aa03      	add	r2, sp, #12
 8010688:	4621      	mov	r1, r4
 801068a:	4640      	mov	r0, r8
 801068c:	f7ff fee2 	bl	8010454 <_printf_common>
 8010690:	3001      	adds	r0, #1
 8010692:	d14c      	bne.n	801072e <_printf_i+0x1fe>
 8010694:	f04f 30ff 	mov.w	r0, #4294967295
 8010698:	b004      	add	sp, #16
 801069a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801069e:	4835      	ldr	r0, [pc, #212]	; (8010774 <_printf_i+0x244>)
 80106a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80106a4:	6829      	ldr	r1, [r5, #0]
 80106a6:	6823      	ldr	r3, [r4, #0]
 80106a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80106ac:	6029      	str	r1, [r5, #0]
 80106ae:	061d      	lsls	r5, r3, #24
 80106b0:	d514      	bpl.n	80106dc <_printf_i+0x1ac>
 80106b2:	07df      	lsls	r7, r3, #31
 80106b4:	bf44      	itt	mi
 80106b6:	f043 0320 	orrmi.w	r3, r3, #32
 80106ba:	6023      	strmi	r3, [r4, #0]
 80106bc:	b91e      	cbnz	r6, 80106c6 <_printf_i+0x196>
 80106be:	6823      	ldr	r3, [r4, #0]
 80106c0:	f023 0320 	bic.w	r3, r3, #32
 80106c4:	6023      	str	r3, [r4, #0]
 80106c6:	2310      	movs	r3, #16
 80106c8:	e7b0      	b.n	801062c <_printf_i+0xfc>
 80106ca:	6823      	ldr	r3, [r4, #0]
 80106cc:	f043 0320 	orr.w	r3, r3, #32
 80106d0:	6023      	str	r3, [r4, #0]
 80106d2:	2378      	movs	r3, #120	; 0x78
 80106d4:	4828      	ldr	r0, [pc, #160]	; (8010778 <_printf_i+0x248>)
 80106d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80106da:	e7e3      	b.n	80106a4 <_printf_i+0x174>
 80106dc:	0659      	lsls	r1, r3, #25
 80106de:	bf48      	it	mi
 80106e0:	b2b6      	uxthmi	r6, r6
 80106e2:	e7e6      	b.n	80106b2 <_printf_i+0x182>
 80106e4:	4615      	mov	r5, r2
 80106e6:	e7bb      	b.n	8010660 <_printf_i+0x130>
 80106e8:	682b      	ldr	r3, [r5, #0]
 80106ea:	6826      	ldr	r6, [r4, #0]
 80106ec:	6961      	ldr	r1, [r4, #20]
 80106ee:	1d18      	adds	r0, r3, #4
 80106f0:	6028      	str	r0, [r5, #0]
 80106f2:	0635      	lsls	r5, r6, #24
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	d501      	bpl.n	80106fc <_printf_i+0x1cc>
 80106f8:	6019      	str	r1, [r3, #0]
 80106fa:	e002      	b.n	8010702 <_printf_i+0x1d2>
 80106fc:	0670      	lsls	r0, r6, #25
 80106fe:	d5fb      	bpl.n	80106f8 <_printf_i+0x1c8>
 8010700:	8019      	strh	r1, [r3, #0]
 8010702:	2300      	movs	r3, #0
 8010704:	6123      	str	r3, [r4, #16]
 8010706:	4615      	mov	r5, r2
 8010708:	e7ba      	b.n	8010680 <_printf_i+0x150>
 801070a:	682b      	ldr	r3, [r5, #0]
 801070c:	1d1a      	adds	r2, r3, #4
 801070e:	602a      	str	r2, [r5, #0]
 8010710:	681d      	ldr	r5, [r3, #0]
 8010712:	6862      	ldr	r2, [r4, #4]
 8010714:	2100      	movs	r1, #0
 8010716:	4628      	mov	r0, r5
 8010718:	f7ef fd6a 	bl	80001f0 <memchr>
 801071c:	b108      	cbz	r0, 8010722 <_printf_i+0x1f2>
 801071e:	1b40      	subs	r0, r0, r5
 8010720:	6060      	str	r0, [r4, #4]
 8010722:	6863      	ldr	r3, [r4, #4]
 8010724:	6123      	str	r3, [r4, #16]
 8010726:	2300      	movs	r3, #0
 8010728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801072c:	e7a8      	b.n	8010680 <_printf_i+0x150>
 801072e:	6923      	ldr	r3, [r4, #16]
 8010730:	462a      	mov	r2, r5
 8010732:	4649      	mov	r1, r9
 8010734:	4640      	mov	r0, r8
 8010736:	47d0      	blx	sl
 8010738:	3001      	adds	r0, #1
 801073a:	d0ab      	beq.n	8010694 <_printf_i+0x164>
 801073c:	6823      	ldr	r3, [r4, #0]
 801073e:	079b      	lsls	r3, r3, #30
 8010740:	d413      	bmi.n	801076a <_printf_i+0x23a>
 8010742:	68e0      	ldr	r0, [r4, #12]
 8010744:	9b03      	ldr	r3, [sp, #12]
 8010746:	4298      	cmp	r0, r3
 8010748:	bfb8      	it	lt
 801074a:	4618      	movlt	r0, r3
 801074c:	e7a4      	b.n	8010698 <_printf_i+0x168>
 801074e:	2301      	movs	r3, #1
 8010750:	4632      	mov	r2, r6
 8010752:	4649      	mov	r1, r9
 8010754:	4640      	mov	r0, r8
 8010756:	47d0      	blx	sl
 8010758:	3001      	adds	r0, #1
 801075a:	d09b      	beq.n	8010694 <_printf_i+0x164>
 801075c:	3501      	adds	r5, #1
 801075e:	68e3      	ldr	r3, [r4, #12]
 8010760:	9903      	ldr	r1, [sp, #12]
 8010762:	1a5b      	subs	r3, r3, r1
 8010764:	42ab      	cmp	r3, r5
 8010766:	dcf2      	bgt.n	801074e <_printf_i+0x21e>
 8010768:	e7eb      	b.n	8010742 <_printf_i+0x212>
 801076a:	2500      	movs	r5, #0
 801076c:	f104 0619 	add.w	r6, r4, #25
 8010770:	e7f5      	b.n	801075e <_printf_i+0x22e>
 8010772:	bf00      	nop
 8010774:	080132e2 	.word	0x080132e2
 8010778:	080132f3 	.word	0x080132f3

0801077c <siprintf>:
 801077c:	b40e      	push	{r1, r2, r3}
 801077e:	b500      	push	{lr}
 8010780:	b09c      	sub	sp, #112	; 0x70
 8010782:	ab1d      	add	r3, sp, #116	; 0x74
 8010784:	9002      	str	r0, [sp, #8]
 8010786:	9006      	str	r0, [sp, #24]
 8010788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801078c:	4809      	ldr	r0, [pc, #36]	; (80107b4 <siprintf+0x38>)
 801078e:	9107      	str	r1, [sp, #28]
 8010790:	9104      	str	r1, [sp, #16]
 8010792:	4909      	ldr	r1, [pc, #36]	; (80107b8 <siprintf+0x3c>)
 8010794:	f853 2b04 	ldr.w	r2, [r3], #4
 8010798:	9105      	str	r1, [sp, #20]
 801079a:	6800      	ldr	r0, [r0, #0]
 801079c:	9301      	str	r3, [sp, #4]
 801079e:	a902      	add	r1, sp, #8
 80107a0:	f001 fb78 	bl	8011e94 <_svfiprintf_r>
 80107a4:	9b02      	ldr	r3, [sp, #8]
 80107a6:	2200      	movs	r2, #0
 80107a8:	701a      	strb	r2, [r3, #0]
 80107aa:	b01c      	add	sp, #112	; 0x70
 80107ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80107b0:	b003      	add	sp, #12
 80107b2:	4770      	bx	lr
 80107b4:	2000013c 	.word	0x2000013c
 80107b8:	ffff0208 	.word	0xffff0208

080107bc <quorem>:
 80107bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c0:	6903      	ldr	r3, [r0, #16]
 80107c2:	690c      	ldr	r4, [r1, #16]
 80107c4:	42a3      	cmp	r3, r4
 80107c6:	4607      	mov	r7, r0
 80107c8:	f2c0 8081 	blt.w	80108ce <quorem+0x112>
 80107cc:	3c01      	subs	r4, #1
 80107ce:	f101 0814 	add.w	r8, r1, #20
 80107d2:	f100 0514 	add.w	r5, r0, #20
 80107d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107da:	9301      	str	r3, [sp, #4]
 80107dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80107e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107e4:	3301      	adds	r3, #1
 80107e6:	429a      	cmp	r2, r3
 80107e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80107ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80107f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80107f4:	d331      	bcc.n	801085a <quorem+0x9e>
 80107f6:	f04f 0e00 	mov.w	lr, #0
 80107fa:	4640      	mov	r0, r8
 80107fc:	46ac      	mov	ip, r5
 80107fe:	46f2      	mov	sl, lr
 8010800:	f850 2b04 	ldr.w	r2, [r0], #4
 8010804:	b293      	uxth	r3, r2
 8010806:	fb06 e303 	mla	r3, r6, r3, lr
 801080a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801080e:	b29b      	uxth	r3, r3
 8010810:	ebaa 0303 	sub.w	r3, sl, r3
 8010814:	f8dc a000 	ldr.w	sl, [ip]
 8010818:	0c12      	lsrs	r2, r2, #16
 801081a:	fa13 f38a 	uxtah	r3, r3, sl
 801081e:	fb06 e202 	mla	r2, r6, r2, lr
 8010822:	9300      	str	r3, [sp, #0]
 8010824:	9b00      	ldr	r3, [sp, #0]
 8010826:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801082a:	b292      	uxth	r2, r2
 801082c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010834:	f8bd 3000 	ldrh.w	r3, [sp]
 8010838:	4581      	cmp	r9, r0
 801083a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801083e:	f84c 3b04 	str.w	r3, [ip], #4
 8010842:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010846:	d2db      	bcs.n	8010800 <quorem+0x44>
 8010848:	f855 300b 	ldr.w	r3, [r5, fp]
 801084c:	b92b      	cbnz	r3, 801085a <quorem+0x9e>
 801084e:	9b01      	ldr	r3, [sp, #4]
 8010850:	3b04      	subs	r3, #4
 8010852:	429d      	cmp	r5, r3
 8010854:	461a      	mov	r2, r3
 8010856:	d32e      	bcc.n	80108b6 <quorem+0xfa>
 8010858:	613c      	str	r4, [r7, #16]
 801085a:	4638      	mov	r0, r7
 801085c:	f001 f8c6 	bl	80119ec <__mcmp>
 8010860:	2800      	cmp	r0, #0
 8010862:	db24      	blt.n	80108ae <quorem+0xf2>
 8010864:	3601      	adds	r6, #1
 8010866:	4628      	mov	r0, r5
 8010868:	f04f 0c00 	mov.w	ip, #0
 801086c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010870:	f8d0 e000 	ldr.w	lr, [r0]
 8010874:	b293      	uxth	r3, r2
 8010876:	ebac 0303 	sub.w	r3, ip, r3
 801087a:	0c12      	lsrs	r2, r2, #16
 801087c:	fa13 f38e 	uxtah	r3, r3, lr
 8010880:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010888:	b29b      	uxth	r3, r3
 801088a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801088e:	45c1      	cmp	r9, r8
 8010890:	f840 3b04 	str.w	r3, [r0], #4
 8010894:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010898:	d2e8      	bcs.n	801086c <quorem+0xb0>
 801089a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801089e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80108a2:	b922      	cbnz	r2, 80108ae <quorem+0xf2>
 80108a4:	3b04      	subs	r3, #4
 80108a6:	429d      	cmp	r5, r3
 80108a8:	461a      	mov	r2, r3
 80108aa:	d30a      	bcc.n	80108c2 <quorem+0x106>
 80108ac:	613c      	str	r4, [r7, #16]
 80108ae:	4630      	mov	r0, r6
 80108b0:	b003      	add	sp, #12
 80108b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b6:	6812      	ldr	r2, [r2, #0]
 80108b8:	3b04      	subs	r3, #4
 80108ba:	2a00      	cmp	r2, #0
 80108bc:	d1cc      	bne.n	8010858 <quorem+0x9c>
 80108be:	3c01      	subs	r4, #1
 80108c0:	e7c7      	b.n	8010852 <quorem+0x96>
 80108c2:	6812      	ldr	r2, [r2, #0]
 80108c4:	3b04      	subs	r3, #4
 80108c6:	2a00      	cmp	r2, #0
 80108c8:	d1f0      	bne.n	80108ac <quorem+0xf0>
 80108ca:	3c01      	subs	r4, #1
 80108cc:	e7eb      	b.n	80108a6 <quorem+0xea>
 80108ce:	2000      	movs	r0, #0
 80108d0:	e7ee      	b.n	80108b0 <quorem+0xf4>
 80108d2:	0000      	movs	r0, r0
 80108d4:	0000      	movs	r0, r0
	...

080108d8 <_dtoa_r>:
 80108d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108dc:	ed2d 8b04 	vpush	{d8-d9}
 80108e0:	ec57 6b10 	vmov	r6, r7, d0
 80108e4:	b093      	sub	sp, #76	; 0x4c
 80108e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80108e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80108ec:	9106      	str	r1, [sp, #24]
 80108ee:	ee10 aa10 	vmov	sl, s0
 80108f2:	4604      	mov	r4, r0
 80108f4:	9209      	str	r2, [sp, #36]	; 0x24
 80108f6:	930c      	str	r3, [sp, #48]	; 0x30
 80108f8:	46bb      	mov	fp, r7
 80108fa:	b975      	cbnz	r5, 801091a <_dtoa_r+0x42>
 80108fc:	2010      	movs	r0, #16
 80108fe:	f000 fddd 	bl	80114bc <malloc>
 8010902:	4602      	mov	r2, r0
 8010904:	6260      	str	r0, [r4, #36]	; 0x24
 8010906:	b920      	cbnz	r0, 8010912 <_dtoa_r+0x3a>
 8010908:	4ba7      	ldr	r3, [pc, #668]	; (8010ba8 <_dtoa_r+0x2d0>)
 801090a:	21ea      	movs	r1, #234	; 0xea
 801090c:	48a7      	ldr	r0, [pc, #668]	; (8010bac <_dtoa_r+0x2d4>)
 801090e:	f001 fbd1 	bl	80120b4 <__assert_func>
 8010912:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010916:	6005      	str	r5, [r0, #0]
 8010918:	60c5      	str	r5, [r0, #12]
 801091a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801091c:	6819      	ldr	r1, [r3, #0]
 801091e:	b151      	cbz	r1, 8010936 <_dtoa_r+0x5e>
 8010920:	685a      	ldr	r2, [r3, #4]
 8010922:	604a      	str	r2, [r1, #4]
 8010924:	2301      	movs	r3, #1
 8010926:	4093      	lsls	r3, r2
 8010928:	608b      	str	r3, [r1, #8]
 801092a:	4620      	mov	r0, r4
 801092c:	f000 fe1c 	bl	8011568 <_Bfree>
 8010930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010932:	2200      	movs	r2, #0
 8010934:	601a      	str	r2, [r3, #0]
 8010936:	1e3b      	subs	r3, r7, #0
 8010938:	bfaa      	itet	ge
 801093a:	2300      	movge	r3, #0
 801093c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010940:	f8c8 3000 	strge.w	r3, [r8]
 8010944:	4b9a      	ldr	r3, [pc, #616]	; (8010bb0 <_dtoa_r+0x2d8>)
 8010946:	bfbc      	itt	lt
 8010948:	2201      	movlt	r2, #1
 801094a:	f8c8 2000 	strlt.w	r2, [r8]
 801094e:	ea33 030b 	bics.w	r3, r3, fp
 8010952:	d11b      	bne.n	801098c <_dtoa_r+0xb4>
 8010954:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010956:	f242 730f 	movw	r3, #9999	; 0x270f
 801095a:	6013      	str	r3, [r2, #0]
 801095c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010960:	4333      	orrs	r3, r6
 8010962:	f000 8592 	beq.w	801148a <_dtoa_r+0xbb2>
 8010966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010968:	b963      	cbnz	r3, 8010984 <_dtoa_r+0xac>
 801096a:	4b92      	ldr	r3, [pc, #584]	; (8010bb4 <_dtoa_r+0x2dc>)
 801096c:	e022      	b.n	80109b4 <_dtoa_r+0xdc>
 801096e:	4b92      	ldr	r3, [pc, #584]	; (8010bb8 <_dtoa_r+0x2e0>)
 8010970:	9301      	str	r3, [sp, #4]
 8010972:	3308      	adds	r3, #8
 8010974:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010976:	6013      	str	r3, [r2, #0]
 8010978:	9801      	ldr	r0, [sp, #4]
 801097a:	b013      	add	sp, #76	; 0x4c
 801097c:	ecbd 8b04 	vpop	{d8-d9}
 8010980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010984:	4b8b      	ldr	r3, [pc, #556]	; (8010bb4 <_dtoa_r+0x2dc>)
 8010986:	9301      	str	r3, [sp, #4]
 8010988:	3303      	adds	r3, #3
 801098a:	e7f3      	b.n	8010974 <_dtoa_r+0x9c>
 801098c:	2200      	movs	r2, #0
 801098e:	2300      	movs	r3, #0
 8010990:	4650      	mov	r0, sl
 8010992:	4659      	mov	r1, fp
 8010994:	f7f0 f8a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8010998:	ec4b ab19 	vmov	d9, sl, fp
 801099c:	4680      	mov	r8, r0
 801099e:	b158      	cbz	r0, 80109b8 <_dtoa_r+0xe0>
 80109a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109a2:	2301      	movs	r3, #1
 80109a4:	6013      	str	r3, [r2, #0]
 80109a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	f000 856b 	beq.w	8011484 <_dtoa_r+0xbac>
 80109ae:	4883      	ldr	r0, [pc, #524]	; (8010bbc <_dtoa_r+0x2e4>)
 80109b0:	6018      	str	r0, [r3, #0]
 80109b2:	1e43      	subs	r3, r0, #1
 80109b4:	9301      	str	r3, [sp, #4]
 80109b6:	e7df      	b.n	8010978 <_dtoa_r+0xa0>
 80109b8:	ec4b ab10 	vmov	d0, sl, fp
 80109bc:	aa10      	add	r2, sp, #64	; 0x40
 80109be:	a911      	add	r1, sp, #68	; 0x44
 80109c0:	4620      	mov	r0, r4
 80109c2:	f001 f8b9 	bl	8011b38 <__d2b>
 80109c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80109ca:	ee08 0a10 	vmov	s16, r0
 80109ce:	2d00      	cmp	r5, #0
 80109d0:	f000 8084 	beq.w	8010adc <_dtoa_r+0x204>
 80109d4:	ee19 3a90 	vmov	r3, s19
 80109d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80109dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80109e0:	4656      	mov	r6, sl
 80109e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80109e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80109ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80109ee:	4b74      	ldr	r3, [pc, #464]	; (8010bc0 <_dtoa_r+0x2e8>)
 80109f0:	2200      	movs	r2, #0
 80109f2:	4630      	mov	r0, r6
 80109f4:	4639      	mov	r1, r7
 80109f6:	f7ef fc4f 	bl	8000298 <__aeabi_dsub>
 80109fa:	a365      	add	r3, pc, #404	; (adr r3, 8010b90 <_dtoa_r+0x2b8>)
 80109fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a00:	f7ef fe02 	bl	8000608 <__aeabi_dmul>
 8010a04:	a364      	add	r3, pc, #400	; (adr r3, 8010b98 <_dtoa_r+0x2c0>)
 8010a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a0a:	f7ef fc47 	bl	800029c <__adddf3>
 8010a0e:	4606      	mov	r6, r0
 8010a10:	4628      	mov	r0, r5
 8010a12:	460f      	mov	r7, r1
 8010a14:	f7ef fd8e 	bl	8000534 <__aeabi_i2d>
 8010a18:	a361      	add	r3, pc, #388	; (adr r3, 8010ba0 <_dtoa_r+0x2c8>)
 8010a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1e:	f7ef fdf3 	bl	8000608 <__aeabi_dmul>
 8010a22:	4602      	mov	r2, r0
 8010a24:	460b      	mov	r3, r1
 8010a26:	4630      	mov	r0, r6
 8010a28:	4639      	mov	r1, r7
 8010a2a:	f7ef fc37 	bl	800029c <__adddf3>
 8010a2e:	4606      	mov	r6, r0
 8010a30:	460f      	mov	r7, r1
 8010a32:	f7f0 f899 	bl	8000b68 <__aeabi_d2iz>
 8010a36:	2200      	movs	r2, #0
 8010a38:	9000      	str	r0, [sp, #0]
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	4639      	mov	r1, r7
 8010a40:	f7f0 f854 	bl	8000aec <__aeabi_dcmplt>
 8010a44:	b150      	cbz	r0, 8010a5c <_dtoa_r+0x184>
 8010a46:	9800      	ldr	r0, [sp, #0]
 8010a48:	f7ef fd74 	bl	8000534 <__aeabi_i2d>
 8010a4c:	4632      	mov	r2, r6
 8010a4e:	463b      	mov	r3, r7
 8010a50:	f7f0 f842 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a54:	b910      	cbnz	r0, 8010a5c <_dtoa_r+0x184>
 8010a56:	9b00      	ldr	r3, [sp, #0]
 8010a58:	3b01      	subs	r3, #1
 8010a5a:	9300      	str	r3, [sp, #0]
 8010a5c:	9b00      	ldr	r3, [sp, #0]
 8010a5e:	2b16      	cmp	r3, #22
 8010a60:	d85a      	bhi.n	8010b18 <_dtoa_r+0x240>
 8010a62:	9a00      	ldr	r2, [sp, #0]
 8010a64:	4b57      	ldr	r3, [pc, #348]	; (8010bc4 <_dtoa_r+0x2ec>)
 8010a66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a6e:	ec51 0b19 	vmov	r0, r1, d9
 8010a72:	f7f0 f83b 	bl	8000aec <__aeabi_dcmplt>
 8010a76:	2800      	cmp	r0, #0
 8010a78:	d050      	beq.n	8010b1c <_dtoa_r+0x244>
 8010a7a:	9b00      	ldr	r3, [sp, #0]
 8010a7c:	3b01      	subs	r3, #1
 8010a7e:	9300      	str	r3, [sp, #0]
 8010a80:	2300      	movs	r3, #0
 8010a82:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a86:	1b5d      	subs	r5, r3, r5
 8010a88:	1e6b      	subs	r3, r5, #1
 8010a8a:	9305      	str	r3, [sp, #20]
 8010a8c:	bf45      	ittet	mi
 8010a8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010a92:	9304      	strmi	r3, [sp, #16]
 8010a94:	2300      	movpl	r3, #0
 8010a96:	2300      	movmi	r3, #0
 8010a98:	bf4c      	ite	mi
 8010a9a:	9305      	strmi	r3, [sp, #20]
 8010a9c:	9304      	strpl	r3, [sp, #16]
 8010a9e:	9b00      	ldr	r3, [sp, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	db3d      	blt.n	8010b20 <_dtoa_r+0x248>
 8010aa4:	9b05      	ldr	r3, [sp, #20]
 8010aa6:	9a00      	ldr	r2, [sp, #0]
 8010aa8:	920a      	str	r2, [sp, #40]	; 0x28
 8010aaa:	4413      	add	r3, r2
 8010aac:	9305      	str	r3, [sp, #20]
 8010aae:	2300      	movs	r3, #0
 8010ab0:	9307      	str	r3, [sp, #28]
 8010ab2:	9b06      	ldr	r3, [sp, #24]
 8010ab4:	2b09      	cmp	r3, #9
 8010ab6:	f200 8089 	bhi.w	8010bcc <_dtoa_r+0x2f4>
 8010aba:	2b05      	cmp	r3, #5
 8010abc:	bfc4      	itt	gt
 8010abe:	3b04      	subgt	r3, #4
 8010ac0:	9306      	strgt	r3, [sp, #24]
 8010ac2:	9b06      	ldr	r3, [sp, #24]
 8010ac4:	f1a3 0302 	sub.w	r3, r3, #2
 8010ac8:	bfcc      	ite	gt
 8010aca:	2500      	movgt	r5, #0
 8010acc:	2501      	movle	r5, #1
 8010ace:	2b03      	cmp	r3, #3
 8010ad0:	f200 8087 	bhi.w	8010be2 <_dtoa_r+0x30a>
 8010ad4:	e8df f003 	tbb	[pc, r3]
 8010ad8:	59383a2d 	.word	0x59383a2d
 8010adc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010ae0:	441d      	add	r5, r3
 8010ae2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010ae6:	2b20      	cmp	r3, #32
 8010ae8:	bfc1      	itttt	gt
 8010aea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010aee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010af2:	fa0b f303 	lslgt.w	r3, fp, r3
 8010af6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010afa:	bfda      	itte	le
 8010afc:	f1c3 0320 	rsble	r3, r3, #32
 8010b00:	fa06 f003 	lslle.w	r0, r6, r3
 8010b04:	4318      	orrgt	r0, r3
 8010b06:	f7ef fd05 	bl	8000514 <__aeabi_ui2d>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	4606      	mov	r6, r0
 8010b0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010b12:	3d01      	subs	r5, #1
 8010b14:	930e      	str	r3, [sp, #56]	; 0x38
 8010b16:	e76a      	b.n	80109ee <_dtoa_r+0x116>
 8010b18:	2301      	movs	r3, #1
 8010b1a:	e7b2      	b.n	8010a82 <_dtoa_r+0x1aa>
 8010b1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010b1e:	e7b1      	b.n	8010a84 <_dtoa_r+0x1ac>
 8010b20:	9b04      	ldr	r3, [sp, #16]
 8010b22:	9a00      	ldr	r2, [sp, #0]
 8010b24:	1a9b      	subs	r3, r3, r2
 8010b26:	9304      	str	r3, [sp, #16]
 8010b28:	4253      	negs	r3, r2
 8010b2a:	9307      	str	r3, [sp, #28]
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8010b30:	e7bf      	b.n	8010ab2 <_dtoa_r+0x1da>
 8010b32:	2300      	movs	r3, #0
 8010b34:	9308      	str	r3, [sp, #32]
 8010b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	dc55      	bgt.n	8010be8 <_dtoa_r+0x310>
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010b42:	461a      	mov	r2, r3
 8010b44:	9209      	str	r2, [sp, #36]	; 0x24
 8010b46:	e00c      	b.n	8010b62 <_dtoa_r+0x28a>
 8010b48:	2301      	movs	r3, #1
 8010b4a:	e7f3      	b.n	8010b34 <_dtoa_r+0x25c>
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b50:	9308      	str	r3, [sp, #32]
 8010b52:	9b00      	ldr	r3, [sp, #0]
 8010b54:	4413      	add	r3, r2
 8010b56:	9302      	str	r3, [sp, #8]
 8010b58:	3301      	adds	r3, #1
 8010b5a:	2b01      	cmp	r3, #1
 8010b5c:	9303      	str	r3, [sp, #12]
 8010b5e:	bfb8      	it	lt
 8010b60:	2301      	movlt	r3, #1
 8010b62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010b64:	2200      	movs	r2, #0
 8010b66:	6042      	str	r2, [r0, #4]
 8010b68:	2204      	movs	r2, #4
 8010b6a:	f102 0614 	add.w	r6, r2, #20
 8010b6e:	429e      	cmp	r6, r3
 8010b70:	6841      	ldr	r1, [r0, #4]
 8010b72:	d93d      	bls.n	8010bf0 <_dtoa_r+0x318>
 8010b74:	4620      	mov	r0, r4
 8010b76:	f000 fcb7 	bl	80114e8 <_Balloc>
 8010b7a:	9001      	str	r0, [sp, #4]
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	d13b      	bne.n	8010bf8 <_dtoa_r+0x320>
 8010b80:	4b11      	ldr	r3, [pc, #68]	; (8010bc8 <_dtoa_r+0x2f0>)
 8010b82:	4602      	mov	r2, r0
 8010b84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010b88:	e6c0      	b.n	801090c <_dtoa_r+0x34>
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e7df      	b.n	8010b4e <_dtoa_r+0x276>
 8010b8e:	bf00      	nop
 8010b90:	636f4361 	.word	0x636f4361
 8010b94:	3fd287a7 	.word	0x3fd287a7
 8010b98:	8b60c8b3 	.word	0x8b60c8b3
 8010b9c:	3fc68a28 	.word	0x3fc68a28
 8010ba0:	509f79fb 	.word	0x509f79fb
 8010ba4:	3fd34413 	.word	0x3fd34413
 8010ba8:	08013311 	.word	0x08013311
 8010bac:	08013328 	.word	0x08013328
 8010bb0:	7ff00000 	.word	0x7ff00000
 8010bb4:	0801330d 	.word	0x0801330d
 8010bb8:	08013304 	.word	0x08013304
 8010bbc:	080132e1 	.word	0x080132e1
 8010bc0:	3ff80000 	.word	0x3ff80000
 8010bc4:	08013418 	.word	0x08013418
 8010bc8:	08013383 	.word	0x08013383
 8010bcc:	2501      	movs	r5, #1
 8010bce:	2300      	movs	r3, #0
 8010bd0:	9306      	str	r3, [sp, #24]
 8010bd2:	9508      	str	r5, [sp, #32]
 8010bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010bd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	2312      	movs	r3, #18
 8010be0:	e7b0      	b.n	8010b44 <_dtoa_r+0x26c>
 8010be2:	2301      	movs	r3, #1
 8010be4:	9308      	str	r3, [sp, #32]
 8010be6:	e7f5      	b.n	8010bd4 <_dtoa_r+0x2fc>
 8010be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010bee:	e7b8      	b.n	8010b62 <_dtoa_r+0x28a>
 8010bf0:	3101      	adds	r1, #1
 8010bf2:	6041      	str	r1, [r0, #4]
 8010bf4:	0052      	lsls	r2, r2, #1
 8010bf6:	e7b8      	b.n	8010b6a <_dtoa_r+0x292>
 8010bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bfa:	9a01      	ldr	r2, [sp, #4]
 8010bfc:	601a      	str	r2, [r3, #0]
 8010bfe:	9b03      	ldr	r3, [sp, #12]
 8010c00:	2b0e      	cmp	r3, #14
 8010c02:	f200 809d 	bhi.w	8010d40 <_dtoa_r+0x468>
 8010c06:	2d00      	cmp	r5, #0
 8010c08:	f000 809a 	beq.w	8010d40 <_dtoa_r+0x468>
 8010c0c:	9b00      	ldr	r3, [sp, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	dd32      	ble.n	8010c78 <_dtoa_r+0x3a0>
 8010c12:	4ab7      	ldr	r2, [pc, #732]	; (8010ef0 <_dtoa_r+0x618>)
 8010c14:	f003 030f 	and.w	r3, r3, #15
 8010c18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010c1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c20:	9b00      	ldr	r3, [sp, #0]
 8010c22:	05d8      	lsls	r0, r3, #23
 8010c24:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010c28:	d516      	bpl.n	8010c58 <_dtoa_r+0x380>
 8010c2a:	4bb2      	ldr	r3, [pc, #712]	; (8010ef4 <_dtoa_r+0x61c>)
 8010c2c:	ec51 0b19 	vmov	r0, r1, d9
 8010c30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010c34:	f7ef fe12 	bl	800085c <__aeabi_ddiv>
 8010c38:	f007 070f 	and.w	r7, r7, #15
 8010c3c:	4682      	mov	sl, r0
 8010c3e:	468b      	mov	fp, r1
 8010c40:	2503      	movs	r5, #3
 8010c42:	4eac      	ldr	r6, [pc, #688]	; (8010ef4 <_dtoa_r+0x61c>)
 8010c44:	b957      	cbnz	r7, 8010c5c <_dtoa_r+0x384>
 8010c46:	4642      	mov	r2, r8
 8010c48:	464b      	mov	r3, r9
 8010c4a:	4650      	mov	r0, sl
 8010c4c:	4659      	mov	r1, fp
 8010c4e:	f7ef fe05 	bl	800085c <__aeabi_ddiv>
 8010c52:	4682      	mov	sl, r0
 8010c54:	468b      	mov	fp, r1
 8010c56:	e028      	b.n	8010caa <_dtoa_r+0x3d2>
 8010c58:	2502      	movs	r5, #2
 8010c5a:	e7f2      	b.n	8010c42 <_dtoa_r+0x36a>
 8010c5c:	07f9      	lsls	r1, r7, #31
 8010c5e:	d508      	bpl.n	8010c72 <_dtoa_r+0x39a>
 8010c60:	4640      	mov	r0, r8
 8010c62:	4649      	mov	r1, r9
 8010c64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010c68:	f7ef fcce 	bl	8000608 <__aeabi_dmul>
 8010c6c:	3501      	adds	r5, #1
 8010c6e:	4680      	mov	r8, r0
 8010c70:	4689      	mov	r9, r1
 8010c72:	107f      	asrs	r7, r7, #1
 8010c74:	3608      	adds	r6, #8
 8010c76:	e7e5      	b.n	8010c44 <_dtoa_r+0x36c>
 8010c78:	f000 809b 	beq.w	8010db2 <_dtoa_r+0x4da>
 8010c7c:	9b00      	ldr	r3, [sp, #0]
 8010c7e:	4f9d      	ldr	r7, [pc, #628]	; (8010ef4 <_dtoa_r+0x61c>)
 8010c80:	425e      	negs	r6, r3
 8010c82:	4b9b      	ldr	r3, [pc, #620]	; (8010ef0 <_dtoa_r+0x618>)
 8010c84:	f006 020f 	and.w	r2, r6, #15
 8010c88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c90:	ec51 0b19 	vmov	r0, r1, d9
 8010c94:	f7ef fcb8 	bl	8000608 <__aeabi_dmul>
 8010c98:	1136      	asrs	r6, r6, #4
 8010c9a:	4682      	mov	sl, r0
 8010c9c:	468b      	mov	fp, r1
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	2502      	movs	r5, #2
 8010ca2:	2e00      	cmp	r6, #0
 8010ca4:	d17a      	bne.n	8010d9c <_dtoa_r+0x4c4>
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d1d3      	bne.n	8010c52 <_dtoa_r+0x37a>
 8010caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	f000 8082 	beq.w	8010db6 <_dtoa_r+0x4de>
 8010cb2:	4b91      	ldr	r3, [pc, #580]	; (8010ef8 <_dtoa_r+0x620>)
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	4650      	mov	r0, sl
 8010cb8:	4659      	mov	r1, fp
 8010cba:	f7ef ff17 	bl	8000aec <__aeabi_dcmplt>
 8010cbe:	2800      	cmp	r0, #0
 8010cc0:	d079      	beq.n	8010db6 <_dtoa_r+0x4de>
 8010cc2:	9b03      	ldr	r3, [sp, #12]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d076      	beq.n	8010db6 <_dtoa_r+0x4de>
 8010cc8:	9b02      	ldr	r3, [sp, #8]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	dd36      	ble.n	8010d3c <_dtoa_r+0x464>
 8010cce:	9b00      	ldr	r3, [sp, #0]
 8010cd0:	4650      	mov	r0, sl
 8010cd2:	4659      	mov	r1, fp
 8010cd4:	1e5f      	subs	r7, r3, #1
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	4b88      	ldr	r3, [pc, #544]	; (8010efc <_dtoa_r+0x624>)
 8010cda:	f7ef fc95 	bl	8000608 <__aeabi_dmul>
 8010cde:	9e02      	ldr	r6, [sp, #8]
 8010ce0:	4682      	mov	sl, r0
 8010ce2:	468b      	mov	fp, r1
 8010ce4:	3501      	adds	r5, #1
 8010ce6:	4628      	mov	r0, r5
 8010ce8:	f7ef fc24 	bl	8000534 <__aeabi_i2d>
 8010cec:	4652      	mov	r2, sl
 8010cee:	465b      	mov	r3, fp
 8010cf0:	f7ef fc8a 	bl	8000608 <__aeabi_dmul>
 8010cf4:	4b82      	ldr	r3, [pc, #520]	; (8010f00 <_dtoa_r+0x628>)
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	f7ef fad0 	bl	800029c <__adddf3>
 8010cfc:	46d0      	mov	r8, sl
 8010cfe:	46d9      	mov	r9, fp
 8010d00:	4682      	mov	sl, r0
 8010d02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010d06:	2e00      	cmp	r6, #0
 8010d08:	d158      	bne.n	8010dbc <_dtoa_r+0x4e4>
 8010d0a:	4b7e      	ldr	r3, [pc, #504]	; (8010f04 <_dtoa_r+0x62c>)
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	4640      	mov	r0, r8
 8010d10:	4649      	mov	r1, r9
 8010d12:	f7ef fac1 	bl	8000298 <__aeabi_dsub>
 8010d16:	4652      	mov	r2, sl
 8010d18:	465b      	mov	r3, fp
 8010d1a:	4680      	mov	r8, r0
 8010d1c:	4689      	mov	r9, r1
 8010d1e:	f7ef ff03 	bl	8000b28 <__aeabi_dcmpgt>
 8010d22:	2800      	cmp	r0, #0
 8010d24:	f040 8295 	bne.w	8011252 <_dtoa_r+0x97a>
 8010d28:	4652      	mov	r2, sl
 8010d2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010d2e:	4640      	mov	r0, r8
 8010d30:	4649      	mov	r1, r9
 8010d32:	f7ef fedb 	bl	8000aec <__aeabi_dcmplt>
 8010d36:	2800      	cmp	r0, #0
 8010d38:	f040 8289 	bne.w	801124e <_dtoa_r+0x976>
 8010d3c:	ec5b ab19 	vmov	sl, fp, d9
 8010d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	f2c0 8148 	blt.w	8010fd8 <_dtoa_r+0x700>
 8010d48:	9a00      	ldr	r2, [sp, #0]
 8010d4a:	2a0e      	cmp	r2, #14
 8010d4c:	f300 8144 	bgt.w	8010fd8 <_dtoa_r+0x700>
 8010d50:	4b67      	ldr	r3, [pc, #412]	; (8010ef0 <_dtoa_r+0x618>)
 8010d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f280 80d5 	bge.w	8010f0c <_dtoa_r+0x634>
 8010d62:	9b03      	ldr	r3, [sp, #12]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	f300 80d1 	bgt.w	8010f0c <_dtoa_r+0x634>
 8010d6a:	f040 826f 	bne.w	801124c <_dtoa_r+0x974>
 8010d6e:	4b65      	ldr	r3, [pc, #404]	; (8010f04 <_dtoa_r+0x62c>)
 8010d70:	2200      	movs	r2, #0
 8010d72:	4640      	mov	r0, r8
 8010d74:	4649      	mov	r1, r9
 8010d76:	f7ef fc47 	bl	8000608 <__aeabi_dmul>
 8010d7a:	4652      	mov	r2, sl
 8010d7c:	465b      	mov	r3, fp
 8010d7e:	f7ef fec9 	bl	8000b14 <__aeabi_dcmpge>
 8010d82:	9e03      	ldr	r6, [sp, #12]
 8010d84:	4637      	mov	r7, r6
 8010d86:	2800      	cmp	r0, #0
 8010d88:	f040 8245 	bne.w	8011216 <_dtoa_r+0x93e>
 8010d8c:	9d01      	ldr	r5, [sp, #4]
 8010d8e:	2331      	movs	r3, #49	; 0x31
 8010d90:	f805 3b01 	strb.w	r3, [r5], #1
 8010d94:	9b00      	ldr	r3, [sp, #0]
 8010d96:	3301      	adds	r3, #1
 8010d98:	9300      	str	r3, [sp, #0]
 8010d9a:	e240      	b.n	801121e <_dtoa_r+0x946>
 8010d9c:	07f2      	lsls	r2, r6, #31
 8010d9e:	d505      	bpl.n	8010dac <_dtoa_r+0x4d4>
 8010da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010da4:	f7ef fc30 	bl	8000608 <__aeabi_dmul>
 8010da8:	3501      	adds	r5, #1
 8010daa:	2301      	movs	r3, #1
 8010dac:	1076      	asrs	r6, r6, #1
 8010dae:	3708      	adds	r7, #8
 8010db0:	e777      	b.n	8010ca2 <_dtoa_r+0x3ca>
 8010db2:	2502      	movs	r5, #2
 8010db4:	e779      	b.n	8010caa <_dtoa_r+0x3d2>
 8010db6:	9f00      	ldr	r7, [sp, #0]
 8010db8:	9e03      	ldr	r6, [sp, #12]
 8010dba:	e794      	b.n	8010ce6 <_dtoa_r+0x40e>
 8010dbc:	9901      	ldr	r1, [sp, #4]
 8010dbe:	4b4c      	ldr	r3, [pc, #304]	; (8010ef0 <_dtoa_r+0x618>)
 8010dc0:	4431      	add	r1, r6
 8010dc2:	910d      	str	r1, [sp, #52]	; 0x34
 8010dc4:	9908      	ldr	r1, [sp, #32]
 8010dc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010dca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010dce:	2900      	cmp	r1, #0
 8010dd0:	d043      	beq.n	8010e5a <_dtoa_r+0x582>
 8010dd2:	494d      	ldr	r1, [pc, #308]	; (8010f08 <_dtoa_r+0x630>)
 8010dd4:	2000      	movs	r0, #0
 8010dd6:	f7ef fd41 	bl	800085c <__aeabi_ddiv>
 8010dda:	4652      	mov	r2, sl
 8010ddc:	465b      	mov	r3, fp
 8010dde:	f7ef fa5b 	bl	8000298 <__aeabi_dsub>
 8010de2:	9d01      	ldr	r5, [sp, #4]
 8010de4:	4682      	mov	sl, r0
 8010de6:	468b      	mov	fp, r1
 8010de8:	4649      	mov	r1, r9
 8010dea:	4640      	mov	r0, r8
 8010dec:	f7ef febc 	bl	8000b68 <__aeabi_d2iz>
 8010df0:	4606      	mov	r6, r0
 8010df2:	f7ef fb9f 	bl	8000534 <__aeabi_i2d>
 8010df6:	4602      	mov	r2, r0
 8010df8:	460b      	mov	r3, r1
 8010dfa:	4640      	mov	r0, r8
 8010dfc:	4649      	mov	r1, r9
 8010dfe:	f7ef fa4b 	bl	8000298 <__aeabi_dsub>
 8010e02:	3630      	adds	r6, #48	; 0x30
 8010e04:	f805 6b01 	strb.w	r6, [r5], #1
 8010e08:	4652      	mov	r2, sl
 8010e0a:	465b      	mov	r3, fp
 8010e0c:	4680      	mov	r8, r0
 8010e0e:	4689      	mov	r9, r1
 8010e10:	f7ef fe6c 	bl	8000aec <__aeabi_dcmplt>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	d163      	bne.n	8010ee0 <_dtoa_r+0x608>
 8010e18:	4642      	mov	r2, r8
 8010e1a:	464b      	mov	r3, r9
 8010e1c:	4936      	ldr	r1, [pc, #216]	; (8010ef8 <_dtoa_r+0x620>)
 8010e1e:	2000      	movs	r0, #0
 8010e20:	f7ef fa3a 	bl	8000298 <__aeabi_dsub>
 8010e24:	4652      	mov	r2, sl
 8010e26:	465b      	mov	r3, fp
 8010e28:	f7ef fe60 	bl	8000aec <__aeabi_dcmplt>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	f040 80b5 	bne.w	8010f9c <_dtoa_r+0x6c4>
 8010e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e34:	429d      	cmp	r5, r3
 8010e36:	d081      	beq.n	8010d3c <_dtoa_r+0x464>
 8010e38:	4b30      	ldr	r3, [pc, #192]	; (8010efc <_dtoa_r+0x624>)
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	4650      	mov	r0, sl
 8010e3e:	4659      	mov	r1, fp
 8010e40:	f7ef fbe2 	bl	8000608 <__aeabi_dmul>
 8010e44:	4b2d      	ldr	r3, [pc, #180]	; (8010efc <_dtoa_r+0x624>)
 8010e46:	4682      	mov	sl, r0
 8010e48:	468b      	mov	fp, r1
 8010e4a:	4640      	mov	r0, r8
 8010e4c:	4649      	mov	r1, r9
 8010e4e:	2200      	movs	r2, #0
 8010e50:	f7ef fbda 	bl	8000608 <__aeabi_dmul>
 8010e54:	4680      	mov	r8, r0
 8010e56:	4689      	mov	r9, r1
 8010e58:	e7c6      	b.n	8010de8 <_dtoa_r+0x510>
 8010e5a:	4650      	mov	r0, sl
 8010e5c:	4659      	mov	r1, fp
 8010e5e:	f7ef fbd3 	bl	8000608 <__aeabi_dmul>
 8010e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e64:	9d01      	ldr	r5, [sp, #4]
 8010e66:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e68:	4682      	mov	sl, r0
 8010e6a:	468b      	mov	fp, r1
 8010e6c:	4649      	mov	r1, r9
 8010e6e:	4640      	mov	r0, r8
 8010e70:	f7ef fe7a 	bl	8000b68 <__aeabi_d2iz>
 8010e74:	4606      	mov	r6, r0
 8010e76:	f7ef fb5d 	bl	8000534 <__aeabi_i2d>
 8010e7a:	3630      	adds	r6, #48	; 0x30
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	460b      	mov	r3, r1
 8010e80:	4640      	mov	r0, r8
 8010e82:	4649      	mov	r1, r9
 8010e84:	f7ef fa08 	bl	8000298 <__aeabi_dsub>
 8010e88:	f805 6b01 	strb.w	r6, [r5], #1
 8010e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e8e:	429d      	cmp	r5, r3
 8010e90:	4680      	mov	r8, r0
 8010e92:	4689      	mov	r9, r1
 8010e94:	f04f 0200 	mov.w	r2, #0
 8010e98:	d124      	bne.n	8010ee4 <_dtoa_r+0x60c>
 8010e9a:	4b1b      	ldr	r3, [pc, #108]	; (8010f08 <_dtoa_r+0x630>)
 8010e9c:	4650      	mov	r0, sl
 8010e9e:	4659      	mov	r1, fp
 8010ea0:	f7ef f9fc 	bl	800029c <__adddf3>
 8010ea4:	4602      	mov	r2, r0
 8010ea6:	460b      	mov	r3, r1
 8010ea8:	4640      	mov	r0, r8
 8010eaa:	4649      	mov	r1, r9
 8010eac:	f7ef fe3c 	bl	8000b28 <__aeabi_dcmpgt>
 8010eb0:	2800      	cmp	r0, #0
 8010eb2:	d173      	bne.n	8010f9c <_dtoa_r+0x6c4>
 8010eb4:	4652      	mov	r2, sl
 8010eb6:	465b      	mov	r3, fp
 8010eb8:	4913      	ldr	r1, [pc, #76]	; (8010f08 <_dtoa_r+0x630>)
 8010eba:	2000      	movs	r0, #0
 8010ebc:	f7ef f9ec 	bl	8000298 <__aeabi_dsub>
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	460b      	mov	r3, r1
 8010ec4:	4640      	mov	r0, r8
 8010ec6:	4649      	mov	r1, r9
 8010ec8:	f7ef fe10 	bl	8000aec <__aeabi_dcmplt>
 8010ecc:	2800      	cmp	r0, #0
 8010ece:	f43f af35 	beq.w	8010d3c <_dtoa_r+0x464>
 8010ed2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010ed4:	1e6b      	subs	r3, r5, #1
 8010ed6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ed8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010edc:	2b30      	cmp	r3, #48	; 0x30
 8010ede:	d0f8      	beq.n	8010ed2 <_dtoa_r+0x5fa>
 8010ee0:	9700      	str	r7, [sp, #0]
 8010ee2:	e049      	b.n	8010f78 <_dtoa_r+0x6a0>
 8010ee4:	4b05      	ldr	r3, [pc, #20]	; (8010efc <_dtoa_r+0x624>)
 8010ee6:	f7ef fb8f 	bl	8000608 <__aeabi_dmul>
 8010eea:	4680      	mov	r8, r0
 8010eec:	4689      	mov	r9, r1
 8010eee:	e7bd      	b.n	8010e6c <_dtoa_r+0x594>
 8010ef0:	08013418 	.word	0x08013418
 8010ef4:	080133f0 	.word	0x080133f0
 8010ef8:	3ff00000 	.word	0x3ff00000
 8010efc:	40240000 	.word	0x40240000
 8010f00:	401c0000 	.word	0x401c0000
 8010f04:	40140000 	.word	0x40140000
 8010f08:	3fe00000 	.word	0x3fe00000
 8010f0c:	9d01      	ldr	r5, [sp, #4]
 8010f0e:	4656      	mov	r6, sl
 8010f10:	465f      	mov	r7, fp
 8010f12:	4642      	mov	r2, r8
 8010f14:	464b      	mov	r3, r9
 8010f16:	4630      	mov	r0, r6
 8010f18:	4639      	mov	r1, r7
 8010f1a:	f7ef fc9f 	bl	800085c <__aeabi_ddiv>
 8010f1e:	f7ef fe23 	bl	8000b68 <__aeabi_d2iz>
 8010f22:	4682      	mov	sl, r0
 8010f24:	f7ef fb06 	bl	8000534 <__aeabi_i2d>
 8010f28:	4642      	mov	r2, r8
 8010f2a:	464b      	mov	r3, r9
 8010f2c:	f7ef fb6c 	bl	8000608 <__aeabi_dmul>
 8010f30:	4602      	mov	r2, r0
 8010f32:	460b      	mov	r3, r1
 8010f34:	4630      	mov	r0, r6
 8010f36:	4639      	mov	r1, r7
 8010f38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010f3c:	f7ef f9ac 	bl	8000298 <__aeabi_dsub>
 8010f40:	f805 6b01 	strb.w	r6, [r5], #1
 8010f44:	9e01      	ldr	r6, [sp, #4]
 8010f46:	9f03      	ldr	r7, [sp, #12]
 8010f48:	1bae      	subs	r6, r5, r6
 8010f4a:	42b7      	cmp	r7, r6
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	460b      	mov	r3, r1
 8010f50:	d135      	bne.n	8010fbe <_dtoa_r+0x6e6>
 8010f52:	f7ef f9a3 	bl	800029c <__adddf3>
 8010f56:	4642      	mov	r2, r8
 8010f58:	464b      	mov	r3, r9
 8010f5a:	4606      	mov	r6, r0
 8010f5c:	460f      	mov	r7, r1
 8010f5e:	f7ef fde3 	bl	8000b28 <__aeabi_dcmpgt>
 8010f62:	b9d0      	cbnz	r0, 8010f9a <_dtoa_r+0x6c2>
 8010f64:	4642      	mov	r2, r8
 8010f66:	464b      	mov	r3, r9
 8010f68:	4630      	mov	r0, r6
 8010f6a:	4639      	mov	r1, r7
 8010f6c:	f7ef fdb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8010f70:	b110      	cbz	r0, 8010f78 <_dtoa_r+0x6a0>
 8010f72:	f01a 0f01 	tst.w	sl, #1
 8010f76:	d110      	bne.n	8010f9a <_dtoa_r+0x6c2>
 8010f78:	4620      	mov	r0, r4
 8010f7a:	ee18 1a10 	vmov	r1, s16
 8010f7e:	f000 faf3 	bl	8011568 <_Bfree>
 8010f82:	2300      	movs	r3, #0
 8010f84:	9800      	ldr	r0, [sp, #0]
 8010f86:	702b      	strb	r3, [r5, #0]
 8010f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f8a:	3001      	adds	r0, #1
 8010f8c:	6018      	str	r0, [r3, #0]
 8010f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f43f acf1 	beq.w	8010978 <_dtoa_r+0xa0>
 8010f96:	601d      	str	r5, [r3, #0]
 8010f98:	e4ee      	b.n	8010978 <_dtoa_r+0xa0>
 8010f9a:	9f00      	ldr	r7, [sp, #0]
 8010f9c:	462b      	mov	r3, r5
 8010f9e:	461d      	mov	r5, r3
 8010fa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010fa4:	2a39      	cmp	r2, #57	; 0x39
 8010fa6:	d106      	bne.n	8010fb6 <_dtoa_r+0x6de>
 8010fa8:	9a01      	ldr	r2, [sp, #4]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d1f7      	bne.n	8010f9e <_dtoa_r+0x6c6>
 8010fae:	9901      	ldr	r1, [sp, #4]
 8010fb0:	2230      	movs	r2, #48	; 0x30
 8010fb2:	3701      	adds	r7, #1
 8010fb4:	700a      	strb	r2, [r1, #0]
 8010fb6:	781a      	ldrb	r2, [r3, #0]
 8010fb8:	3201      	adds	r2, #1
 8010fba:	701a      	strb	r2, [r3, #0]
 8010fbc:	e790      	b.n	8010ee0 <_dtoa_r+0x608>
 8010fbe:	4ba6      	ldr	r3, [pc, #664]	; (8011258 <_dtoa_r+0x980>)
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f7ef fb21 	bl	8000608 <__aeabi_dmul>
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	2300      	movs	r3, #0
 8010fca:	4606      	mov	r6, r0
 8010fcc:	460f      	mov	r7, r1
 8010fce:	f7ef fd83 	bl	8000ad8 <__aeabi_dcmpeq>
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	d09d      	beq.n	8010f12 <_dtoa_r+0x63a>
 8010fd6:	e7cf      	b.n	8010f78 <_dtoa_r+0x6a0>
 8010fd8:	9a08      	ldr	r2, [sp, #32]
 8010fda:	2a00      	cmp	r2, #0
 8010fdc:	f000 80d7 	beq.w	801118e <_dtoa_r+0x8b6>
 8010fe0:	9a06      	ldr	r2, [sp, #24]
 8010fe2:	2a01      	cmp	r2, #1
 8010fe4:	f300 80ba 	bgt.w	801115c <_dtoa_r+0x884>
 8010fe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010fea:	2a00      	cmp	r2, #0
 8010fec:	f000 80b2 	beq.w	8011154 <_dtoa_r+0x87c>
 8010ff0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010ff4:	9e07      	ldr	r6, [sp, #28]
 8010ff6:	9d04      	ldr	r5, [sp, #16]
 8010ff8:	9a04      	ldr	r2, [sp, #16]
 8010ffa:	441a      	add	r2, r3
 8010ffc:	9204      	str	r2, [sp, #16]
 8010ffe:	9a05      	ldr	r2, [sp, #20]
 8011000:	2101      	movs	r1, #1
 8011002:	441a      	add	r2, r3
 8011004:	4620      	mov	r0, r4
 8011006:	9205      	str	r2, [sp, #20]
 8011008:	f000 fb66 	bl	80116d8 <__i2b>
 801100c:	4607      	mov	r7, r0
 801100e:	2d00      	cmp	r5, #0
 8011010:	dd0c      	ble.n	801102c <_dtoa_r+0x754>
 8011012:	9b05      	ldr	r3, [sp, #20]
 8011014:	2b00      	cmp	r3, #0
 8011016:	dd09      	ble.n	801102c <_dtoa_r+0x754>
 8011018:	42ab      	cmp	r3, r5
 801101a:	9a04      	ldr	r2, [sp, #16]
 801101c:	bfa8      	it	ge
 801101e:	462b      	movge	r3, r5
 8011020:	1ad2      	subs	r2, r2, r3
 8011022:	9204      	str	r2, [sp, #16]
 8011024:	9a05      	ldr	r2, [sp, #20]
 8011026:	1aed      	subs	r5, r5, r3
 8011028:	1ad3      	subs	r3, r2, r3
 801102a:	9305      	str	r3, [sp, #20]
 801102c:	9b07      	ldr	r3, [sp, #28]
 801102e:	b31b      	cbz	r3, 8011078 <_dtoa_r+0x7a0>
 8011030:	9b08      	ldr	r3, [sp, #32]
 8011032:	2b00      	cmp	r3, #0
 8011034:	f000 80af 	beq.w	8011196 <_dtoa_r+0x8be>
 8011038:	2e00      	cmp	r6, #0
 801103a:	dd13      	ble.n	8011064 <_dtoa_r+0x78c>
 801103c:	4639      	mov	r1, r7
 801103e:	4632      	mov	r2, r6
 8011040:	4620      	mov	r0, r4
 8011042:	f000 fc09 	bl	8011858 <__pow5mult>
 8011046:	ee18 2a10 	vmov	r2, s16
 801104a:	4601      	mov	r1, r0
 801104c:	4607      	mov	r7, r0
 801104e:	4620      	mov	r0, r4
 8011050:	f000 fb58 	bl	8011704 <__multiply>
 8011054:	ee18 1a10 	vmov	r1, s16
 8011058:	4680      	mov	r8, r0
 801105a:	4620      	mov	r0, r4
 801105c:	f000 fa84 	bl	8011568 <_Bfree>
 8011060:	ee08 8a10 	vmov	s16, r8
 8011064:	9b07      	ldr	r3, [sp, #28]
 8011066:	1b9a      	subs	r2, r3, r6
 8011068:	d006      	beq.n	8011078 <_dtoa_r+0x7a0>
 801106a:	ee18 1a10 	vmov	r1, s16
 801106e:	4620      	mov	r0, r4
 8011070:	f000 fbf2 	bl	8011858 <__pow5mult>
 8011074:	ee08 0a10 	vmov	s16, r0
 8011078:	2101      	movs	r1, #1
 801107a:	4620      	mov	r0, r4
 801107c:	f000 fb2c 	bl	80116d8 <__i2b>
 8011080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011082:	2b00      	cmp	r3, #0
 8011084:	4606      	mov	r6, r0
 8011086:	f340 8088 	ble.w	801119a <_dtoa_r+0x8c2>
 801108a:	461a      	mov	r2, r3
 801108c:	4601      	mov	r1, r0
 801108e:	4620      	mov	r0, r4
 8011090:	f000 fbe2 	bl	8011858 <__pow5mult>
 8011094:	9b06      	ldr	r3, [sp, #24]
 8011096:	2b01      	cmp	r3, #1
 8011098:	4606      	mov	r6, r0
 801109a:	f340 8081 	ble.w	80111a0 <_dtoa_r+0x8c8>
 801109e:	f04f 0800 	mov.w	r8, #0
 80110a2:	6933      	ldr	r3, [r6, #16]
 80110a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80110a8:	6918      	ldr	r0, [r3, #16]
 80110aa:	f000 fac5 	bl	8011638 <__hi0bits>
 80110ae:	f1c0 0020 	rsb	r0, r0, #32
 80110b2:	9b05      	ldr	r3, [sp, #20]
 80110b4:	4418      	add	r0, r3
 80110b6:	f010 001f 	ands.w	r0, r0, #31
 80110ba:	f000 8092 	beq.w	80111e2 <_dtoa_r+0x90a>
 80110be:	f1c0 0320 	rsb	r3, r0, #32
 80110c2:	2b04      	cmp	r3, #4
 80110c4:	f340 808a 	ble.w	80111dc <_dtoa_r+0x904>
 80110c8:	f1c0 001c 	rsb	r0, r0, #28
 80110cc:	9b04      	ldr	r3, [sp, #16]
 80110ce:	4403      	add	r3, r0
 80110d0:	9304      	str	r3, [sp, #16]
 80110d2:	9b05      	ldr	r3, [sp, #20]
 80110d4:	4403      	add	r3, r0
 80110d6:	4405      	add	r5, r0
 80110d8:	9305      	str	r3, [sp, #20]
 80110da:	9b04      	ldr	r3, [sp, #16]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	dd07      	ble.n	80110f0 <_dtoa_r+0x818>
 80110e0:	ee18 1a10 	vmov	r1, s16
 80110e4:	461a      	mov	r2, r3
 80110e6:	4620      	mov	r0, r4
 80110e8:	f000 fc10 	bl	801190c <__lshift>
 80110ec:	ee08 0a10 	vmov	s16, r0
 80110f0:	9b05      	ldr	r3, [sp, #20]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	dd05      	ble.n	8011102 <_dtoa_r+0x82a>
 80110f6:	4631      	mov	r1, r6
 80110f8:	461a      	mov	r2, r3
 80110fa:	4620      	mov	r0, r4
 80110fc:	f000 fc06 	bl	801190c <__lshift>
 8011100:	4606      	mov	r6, r0
 8011102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011104:	2b00      	cmp	r3, #0
 8011106:	d06e      	beq.n	80111e6 <_dtoa_r+0x90e>
 8011108:	ee18 0a10 	vmov	r0, s16
 801110c:	4631      	mov	r1, r6
 801110e:	f000 fc6d 	bl	80119ec <__mcmp>
 8011112:	2800      	cmp	r0, #0
 8011114:	da67      	bge.n	80111e6 <_dtoa_r+0x90e>
 8011116:	9b00      	ldr	r3, [sp, #0]
 8011118:	3b01      	subs	r3, #1
 801111a:	ee18 1a10 	vmov	r1, s16
 801111e:	9300      	str	r3, [sp, #0]
 8011120:	220a      	movs	r2, #10
 8011122:	2300      	movs	r3, #0
 8011124:	4620      	mov	r0, r4
 8011126:	f000 fa41 	bl	80115ac <__multadd>
 801112a:	9b08      	ldr	r3, [sp, #32]
 801112c:	ee08 0a10 	vmov	s16, r0
 8011130:	2b00      	cmp	r3, #0
 8011132:	f000 81b1 	beq.w	8011498 <_dtoa_r+0xbc0>
 8011136:	2300      	movs	r3, #0
 8011138:	4639      	mov	r1, r7
 801113a:	220a      	movs	r2, #10
 801113c:	4620      	mov	r0, r4
 801113e:	f000 fa35 	bl	80115ac <__multadd>
 8011142:	9b02      	ldr	r3, [sp, #8]
 8011144:	2b00      	cmp	r3, #0
 8011146:	4607      	mov	r7, r0
 8011148:	f300 808e 	bgt.w	8011268 <_dtoa_r+0x990>
 801114c:	9b06      	ldr	r3, [sp, #24]
 801114e:	2b02      	cmp	r3, #2
 8011150:	dc51      	bgt.n	80111f6 <_dtoa_r+0x91e>
 8011152:	e089      	b.n	8011268 <_dtoa_r+0x990>
 8011154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011156:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801115a:	e74b      	b.n	8010ff4 <_dtoa_r+0x71c>
 801115c:	9b03      	ldr	r3, [sp, #12]
 801115e:	1e5e      	subs	r6, r3, #1
 8011160:	9b07      	ldr	r3, [sp, #28]
 8011162:	42b3      	cmp	r3, r6
 8011164:	bfbf      	itttt	lt
 8011166:	9b07      	ldrlt	r3, [sp, #28]
 8011168:	9607      	strlt	r6, [sp, #28]
 801116a:	1af2      	sublt	r2, r6, r3
 801116c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801116e:	bfb6      	itet	lt
 8011170:	189b      	addlt	r3, r3, r2
 8011172:	1b9e      	subge	r6, r3, r6
 8011174:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011176:	9b03      	ldr	r3, [sp, #12]
 8011178:	bfb8      	it	lt
 801117a:	2600      	movlt	r6, #0
 801117c:	2b00      	cmp	r3, #0
 801117e:	bfb7      	itett	lt
 8011180:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011184:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011188:	1a9d      	sublt	r5, r3, r2
 801118a:	2300      	movlt	r3, #0
 801118c:	e734      	b.n	8010ff8 <_dtoa_r+0x720>
 801118e:	9e07      	ldr	r6, [sp, #28]
 8011190:	9d04      	ldr	r5, [sp, #16]
 8011192:	9f08      	ldr	r7, [sp, #32]
 8011194:	e73b      	b.n	801100e <_dtoa_r+0x736>
 8011196:	9a07      	ldr	r2, [sp, #28]
 8011198:	e767      	b.n	801106a <_dtoa_r+0x792>
 801119a:	9b06      	ldr	r3, [sp, #24]
 801119c:	2b01      	cmp	r3, #1
 801119e:	dc18      	bgt.n	80111d2 <_dtoa_r+0x8fa>
 80111a0:	f1ba 0f00 	cmp.w	sl, #0
 80111a4:	d115      	bne.n	80111d2 <_dtoa_r+0x8fa>
 80111a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80111aa:	b993      	cbnz	r3, 80111d2 <_dtoa_r+0x8fa>
 80111ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80111b0:	0d1b      	lsrs	r3, r3, #20
 80111b2:	051b      	lsls	r3, r3, #20
 80111b4:	b183      	cbz	r3, 80111d8 <_dtoa_r+0x900>
 80111b6:	9b04      	ldr	r3, [sp, #16]
 80111b8:	3301      	adds	r3, #1
 80111ba:	9304      	str	r3, [sp, #16]
 80111bc:	9b05      	ldr	r3, [sp, #20]
 80111be:	3301      	adds	r3, #1
 80111c0:	9305      	str	r3, [sp, #20]
 80111c2:	f04f 0801 	mov.w	r8, #1
 80111c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f47f af6a 	bne.w	80110a2 <_dtoa_r+0x7ca>
 80111ce:	2001      	movs	r0, #1
 80111d0:	e76f      	b.n	80110b2 <_dtoa_r+0x7da>
 80111d2:	f04f 0800 	mov.w	r8, #0
 80111d6:	e7f6      	b.n	80111c6 <_dtoa_r+0x8ee>
 80111d8:	4698      	mov	r8, r3
 80111da:	e7f4      	b.n	80111c6 <_dtoa_r+0x8ee>
 80111dc:	f43f af7d 	beq.w	80110da <_dtoa_r+0x802>
 80111e0:	4618      	mov	r0, r3
 80111e2:	301c      	adds	r0, #28
 80111e4:	e772      	b.n	80110cc <_dtoa_r+0x7f4>
 80111e6:	9b03      	ldr	r3, [sp, #12]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	dc37      	bgt.n	801125c <_dtoa_r+0x984>
 80111ec:	9b06      	ldr	r3, [sp, #24]
 80111ee:	2b02      	cmp	r3, #2
 80111f0:	dd34      	ble.n	801125c <_dtoa_r+0x984>
 80111f2:	9b03      	ldr	r3, [sp, #12]
 80111f4:	9302      	str	r3, [sp, #8]
 80111f6:	9b02      	ldr	r3, [sp, #8]
 80111f8:	b96b      	cbnz	r3, 8011216 <_dtoa_r+0x93e>
 80111fa:	4631      	mov	r1, r6
 80111fc:	2205      	movs	r2, #5
 80111fe:	4620      	mov	r0, r4
 8011200:	f000 f9d4 	bl	80115ac <__multadd>
 8011204:	4601      	mov	r1, r0
 8011206:	4606      	mov	r6, r0
 8011208:	ee18 0a10 	vmov	r0, s16
 801120c:	f000 fbee 	bl	80119ec <__mcmp>
 8011210:	2800      	cmp	r0, #0
 8011212:	f73f adbb 	bgt.w	8010d8c <_dtoa_r+0x4b4>
 8011216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011218:	9d01      	ldr	r5, [sp, #4]
 801121a:	43db      	mvns	r3, r3
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	f04f 0800 	mov.w	r8, #0
 8011222:	4631      	mov	r1, r6
 8011224:	4620      	mov	r0, r4
 8011226:	f000 f99f 	bl	8011568 <_Bfree>
 801122a:	2f00      	cmp	r7, #0
 801122c:	f43f aea4 	beq.w	8010f78 <_dtoa_r+0x6a0>
 8011230:	f1b8 0f00 	cmp.w	r8, #0
 8011234:	d005      	beq.n	8011242 <_dtoa_r+0x96a>
 8011236:	45b8      	cmp	r8, r7
 8011238:	d003      	beq.n	8011242 <_dtoa_r+0x96a>
 801123a:	4641      	mov	r1, r8
 801123c:	4620      	mov	r0, r4
 801123e:	f000 f993 	bl	8011568 <_Bfree>
 8011242:	4639      	mov	r1, r7
 8011244:	4620      	mov	r0, r4
 8011246:	f000 f98f 	bl	8011568 <_Bfree>
 801124a:	e695      	b.n	8010f78 <_dtoa_r+0x6a0>
 801124c:	2600      	movs	r6, #0
 801124e:	4637      	mov	r7, r6
 8011250:	e7e1      	b.n	8011216 <_dtoa_r+0x93e>
 8011252:	9700      	str	r7, [sp, #0]
 8011254:	4637      	mov	r7, r6
 8011256:	e599      	b.n	8010d8c <_dtoa_r+0x4b4>
 8011258:	40240000 	.word	0x40240000
 801125c:	9b08      	ldr	r3, [sp, #32]
 801125e:	2b00      	cmp	r3, #0
 8011260:	f000 80ca 	beq.w	80113f8 <_dtoa_r+0xb20>
 8011264:	9b03      	ldr	r3, [sp, #12]
 8011266:	9302      	str	r3, [sp, #8]
 8011268:	2d00      	cmp	r5, #0
 801126a:	dd05      	ble.n	8011278 <_dtoa_r+0x9a0>
 801126c:	4639      	mov	r1, r7
 801126e:	462a      	mov	r2, r5
 8011270:	4620      	mov	r0, r4
 8011272:	f000 fb4b 	bl	801190c <__lshift>
 8011276:	4607      	mov	r7, r0
 8011278:	f1b8 0f00 	cmp.w	r8, #0
 801127c:	d05b      	beq.n	8011336 <_dtoa_r+0xa5e>
 801127e:	6879      	ldr	r1, [r7, #4]
 8011280:	4620      	mov	r0, r4
 8011282:	f000 f931 	bl	80114e8 <_Balloc>
 8011286:	4605      	mov	r5, r0
 8011288:	b928      	cbnz	r0, 8011296 <_dtoa_r+0x9be>
 801128a:	4b87      	ldr	r3, [pc, #540]	; (80114a8 <_dtoa_r+0xbd0>)
 801128c:	4602      	mov	r2, r0
 801128e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011292:	f7ff bb3b 	b.w	801090c <_dtoa_r+0x34>
 8011296:	693a      	ldr	r2, [r7, #16]
 8011298:	3202      	adds	r2, #2
 801129a:	0092      	lsls	r2, r2, #2
 801129c:	f107 010c 	add.w	r1, r7, #12
 80112a0:	300c      	adds	r0, #12
 80112a2:	f000 f913 	bl	80114cc <memcpy>
 80112a6:	2201      	movs	r2, #1
 80112a8:	4629      	mov	r1, r5
 80112aa:	4620      	mov	r0, r4
 80112ac:	f000 fb2e 	bl	801190c <__lshift>
 80112b0:	9b01      	ldr	r3, [sp, #4]
 80112b2:	f103 0901 	add.w	r9, r3, #1
 80112b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80112ba:	4413      	add	r3, r2
 80112bc:	9305      	str	r3, [sp, #20]
 80112be:	f00a 0301 	and.w	r3, sl, #1
 80112c2:	46b8      	mov	r8, r7
 80112c4:	9304      	str	r3, [sp, #16]
 80112c6:	4607      	mov	r7, r0
 80112c8:	4631      	mov	r1, r6
 80112ca:	ee18 0a10 	vmov	r0, s16
 80112ce:	f7ff fa75 	bl	80107bc <quorem>
 80112d2:	4641      	mov	r1, r8
 80112d4:	9002      	str	r0, [sp, #8]
 80112d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80112da:	ee18 0a10 	vmov	r0, s16
 80112de:	f000 fb85 	bl	80119ec <__mcmp>
 80112e2:	463a      	mov	r2, r7
 80112e4:	9003      	str	r0, [sp, #12]
 80112e6:	4631      	mov	r1, r6
 80112e8:	4620      	mov	r0, r4
 80112ea:	f000 fb9b 	bl	8011a24 <__mdiff>
 80112ee:	68c2      	ldr	r2, [r0, #12]
 80112f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80112f4:	4605      	mov	r5, r0
 80112f6:	bb02      	cbnz	r2, 801133a <_dtoa_r+0xa62>
 80112f8:	4601      	mov	r1, r0
 80112fa:	ee18 0a10 	vmov	r0, s16
 80112fe:	f000 fb75 	bl	80119ec <__mcmp>
 8011302:	4602      	mov	r2, r0
 8011304:	4629      	mov	r1, r5
 8011306:	4620      	mov	r0, r4
 8011308:	9207      	str	r2, [sp, #28]
 801130a:	f000 f92d 	bl	8011568 <_Bfree>
 801130e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011312:	ea43 0102 	orr.w	r1, r3, r2
 8011316:	9b04      	ldr	r3, [sp, #16]
 8011318:	430b      	orrs	r3, r1
 801131a:	464d      	mov	r5, r9
 801131c:	d10f      	bne.n	801133e <_dtoa_r+0xa66>
 801131e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011322:	d02a      	beq.n	801137a <_dtoa_r+0xaa2>
 8011324:	9b03      	ldr	r3, [sp, #12]
 8011326:	2b00      	cmp	r3, #0
 8011328:	dd02      	ble.n	8011330 <_dtoa_r+0xa58>
 801132a:	9b02      	ldr	r3, [sp, #8]
 801132c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011330:	f88b a000 	strb.w	sl, [fp]
 8011334:	e775      	b.n	8011222 <_dtoa_r+0x94a>
 8011336:	4638      	mov	r0, r7
 8011338:	e7ba      	b.n	80112b0 <_dtoa_r+0x9d8>
 801133a:	2201      	movs	r2, #1
 801133c:	e7e2      	b.n	8011304 <_dtoa_r+0xa2c>
 801133e:	9b03      	ldr	r3, [sp, #12]
 8011340:	2b00      	cmp	r3, #0
 8011342:	db04      	blt.n	801134e <_dtoa_r+0xa76>
 8011344:	9906      	ldr	r1, [sp, #24]
 8011346:	430b      	orrs	r3, r1
 8011348:	9904      	ldr	r1, [sp, #16]
 801134a:	430b      	orrs	r3, r1
 801134c:	d122      	bne.n	8011394 <_dtoa_r+0xabc>
 801134e:	2a00      	cmp	r2, #0
 8011350:	ddee      	ble.n	8011330 <_dtoa_r+0xa58>
 8011352:	ee18 1a10 	vmov	r1, s16
 8011356:	2201      	movs	r2, #1
 8011358:	4620      	mov	r0, r4
 801135a:	f000 fad7 	bl	801190c <__lshift>
 801135e:	4631      	mov	r1, r6
 8011360:	ee08 0a10 	vmov	s16, r0
 8011364:	f000 fb42 	bl	80119ec <__mcmp>
 8011368:	2800      	cmp	r0, #0
 801136a:	dc03      	bgt.n	8011374 <_dtoa_r+0xa9c>
 801136c:	d1e0      	bne.n	8011330 <_dtoa_r+0xa58>
 801136e:	f01a 0f01 	tst.w	sl, #1
 8011372:	d0dd      	beq.n	8011330 <_dtoa_r+0xa58>
 8011374:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011378:	d1d7      	bne.n	801132a <_dtoa_r+0xa52>
 801137a:	2339      	movs	r3, #57	; 0x39
 801137c:	f88b 3000 	strb.w	r3, [fp]
 8011380:	462b      	mov	r3, r5
 8011382:	461d      	mov	r5, r3
 8011384:	3b01      	subs	r3, #1
 8011386:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801138a:	2a39      	cmp	r2, #57	; 0x39
 801138c:	d071      	beq.n	8011472 <_dtoa_r+0xb9a>
 801138e:	3201      	adds	r2, #1
 8011390:	701a      	strb	r2, [r3, #0]
 8011392:	e746      	b.n	8011222 <_dtoa_r+0x94a>
 8011394:	2a00      	cmp	r2, #0
 8011396:	dd07      	ble.n	80113a8 <_dtoa_r+0xad0>
 8011398:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801139c:	d0ed      	beq.n	801137a <_dtoa_r+0xaa2>
 801139e:	f10a 0301 	add.w	r3, sl, #1
 80113a2:	f88b 3000 	strb.w	r3, [fp]
 80113a6:	e73c      	b.n	8011222 <_dtoa_r+0x94a>
 80113a8:	9b05      	ldr	r3, [sp, #20]
 80113aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80113ae:	4599      	cmp	r9, r3
 80113b0:	d047      	beq.n	8011442 <_dtoa_r+0xb6a>
 80113b2:	ee18 1a10 	vmov	r1, s16
 80113b6:	2300      	movs	r3, #0
 80113b8:	220a      	movs	r2, #10
 80113ba:	4620      	mov	r0, r4
 80113bc:	f000 f8f6 	bl	80115ac <__multadd>
 80113c0:	45b8      	cmp	r8, r7
 80113c2:	ee08 0a10 	vmov	s16, r0
 80113c6:	f04f 0300 	mov.w	r3, #0
 80113ca:	f04f 020a 	mov.w	r2, #10
 80113ce:	4641      	mov	r1, r8
 80113d0:	4620      	mov	r0, r4
 80113d2:	d106      	bne.n	80113e2 <_dtoa_r+0xb0a>
 80113d4:	f000 f8ea 	bl	80115ac <__multadd>
 80113d8:	4680      	mov	r8, r0
 80113da:	4607      	mov	r7, r0
 80113dc:	f109 0901 	add.w	r9, r9, #1
 80113e0:	e772      	b.n	80112c8 <_dtoa_r+0x9f0>
 80113e2:	f000 f8e3 	bl	80115ac <__multadd>
 80113e6:	4639      	mov	r1, r7
 80113e8:	4680      	mov	r8, r0
 80113ea:	2300      	movs	r3, #0
 80113ec:	220a      	movs	r2, #10
 80113ee:	4620      	mov	r0, r4
 80113f0:	f000 f8dc 	bl	80115ac <__multadd>
 80113f4:	4607      	mov	r7, r0
 80113f6:	e7f1      	b.n	80113dc <_dtoa_r+0xb04>
 80113f8:	9b03      	ldr	r3, [sp, #12]
 80113fa:	9302      	str	r3, [sp, #8]
 80113fc:	9d01      	ldr	r5, [sp, #4]
 80113fe:	ee18 0a10 	vmov	r0, s16
 8011402:	4631      	mov	r1, r6
 8011404:	f7ff f9da 	bl	80107bc <quorem>
 8011408:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801140c:	9b01      	ldr	r3, [sp, #4]
 801140e:	f805 ab01 	strb.w	sl, [r5], #1
 8011412:	1aea      	subs	r2, r5, r3
 8011414:	9b02      	ldr	r3, [sp, #8]
 8011416:	4293      	cmp	r3, r2
 8011418:	dd09      	ble.n	801142e <_dtoa_r+0xb56>
 801141a:	ee18 1a10 	vmov	r1, s16
 801141e:	2300      	movs	r3, #0
 8011420:	220a      	movs	r2, #10
 8011422:	4620      	mov	r0, r4
 8011424:	f000 f8c2 	bl	80115ac <__multadd>
 8011428:	ee08 0a10 	vmov	s16, r0
 801142c:	e7e7      	b.n	80113fe <_dtoa_r+0xb26>
 801142e:	9b02      	ldr	r3, [sp, #8]
 8011430:	2b00      	cmp	r3, #0
 8011432:	bfc8      	it	gt
 8011434:	461d      	movgt	r5, r3
 8011436:	9b01      	ldr	r3, [sp, #4]
 8011438:	bfd8      	it	le
 801143a:	2501      	movle	r5, #1
 801143c:	441d      	add	r5, r3
 801143e:	f04f 0800 	mov.w	r8, #0
 8011442:	ee18 1a10 	vmov	r1, s16
 8011446:	2201      	movs	r2, #1
 8011448:	4620      	mov	r0, r4
 801144a:	f000 fa5f 	bl	801190c <__lshift>
 801144e:	4631      	mov	r1, r6
 8011450:	ee08 0a10 	vmov	s16, r0
 8011454:	f000 faca 	bl	80119ec <__mcmp>
 8011458:	2800      	cmp	r0, #0
 801145a:	dc91      	bgt.n	8011380 <_dtoa_r+0xaa8>
 801145c:	d102      	bne.n	8011464 <_dtoa_r+0xb8c>
 801145e:	f01a 0f01 	tst.w	sl, #1
 8011462:	d18d      	bne.n	8011380 <_dtoa_r+0xaa8>
 8011464:	462b      	mov	r3, r5
 8011466:	461d      	mov	r5, r3
 8011468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801146c:	2a30      	cmp	r2, #48	; 0x30
 801146e:	d0fa      	beq.n	8011466 <_dtoa_r+0xb8e>
 8011470:	e6d7      	b.n	8011222 <_dtoa_r+0x94a>
 8011472:	9a01      	ldr	r2, [sp, #4]
 8011474:	429a      	cmp	r2, r3
 8011476:	d184      	bne.n	8011382 <_dtoa_r+0xaaa>
 8011478:	9b00      	ldr	r3, [sp, #0]
 801147a:	3301      	adds	r3, #1
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	2331      	movs	r3, #49	; 0x31
 8011480:	7013      	strb	r3, [r2, #0]
 8011482:	e6ce      	b.n	8011222 <_dtoa_r+0x94a>
 8011484:	4b09      	ldr	r3, [pc, #36]	; (80114ac <_dtoa_r+0xbd4>)
 8011486:	f7ff ba95 	b.w	80109b4 <_dtoa_r+0xdc>
 801148a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801148c:	2b00      	cmp	r3, #0
 801148e:	f47f aa6e 	bne.w	801096e <_dtoa_r+0x96>
 8011492:	4b07      	ldr	r3, [pc, #28]	; (80114b0 <_dtoa_r+0xbd8>)
 8011494:	f7ff ba8e 	b.w	80109b4 <_dtoa_r+0xdc>
 8011498:	9b02      	ldr	r3, [sp, #8]
 801149a:	2b00      	cmp	r3, #0
 801149c:	dcae      	bgt.n	80113fc <_dtoa_r+0xb24>
 801149e:	9b06      	ldr	r3, [sp, #24]
 80114a0:	2b02      	cmp	r3, #2
 80114a2:	f73f aea8 	bgt.w	80111f6 <_dtoa_r+0x91e>
 80114a6:	e7a9      	b.n	80113fc <_dtoa_r+0xb24>
 80114a8:	08013383 	.word	0x08013383
 80114ac:	080132e0 	.word	0x080132e0
 80114b0:	08013304 	.word	0x08013304

080114b4 <_localeconv_r>:
 80114b4:	4800      	ldr	r0, [pc, #0]	; (80114b8 <_localeconv_r+0x4>)
 80114b6:	4770      	bx	lr
 80114b8:	20000290 	.word	0x20000290

080114bc <malloc>:
 80114bc:	4b02      	ldr	r3, [pc, #8]	; (80114c8 <malloc+0xc>)
 80114be:	4601      	mov	r1, r0
 80114c0:	6818      	ldr	r0, [r3, #0]
 80114c2:	f000 bc17 	b.w	8011cf4 <_malloc_r>
 80114c6:	bf00      	nop
 80114c8:	2000013c 	.word	0x2000013c

080114cc <memcpy>:
 80114cc:	440a      	add	r2, r1
 80114ce:	4291      	cmp	r1, r2
 80114d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80114d4:	d100      	bne.n	80114d8 <memcpy+0xc>
 80114d6:	4770      	bx	lr
 80114d8:	b510      	push	{r4, lr}
 80114da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114e2:	4291      	cmp	r1, r2
 80114e4:	d1f9      	bne.n	80114da <memcpy+0xe>
 80114e6:	bd10      	pop	{r4, pc}

080114e8 <_Balloc>:
 80114e8:	b570      	push	{r4, r5, r6, lr}
 80114ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80114ec:	4604      	mov	r4, r0
 80114ee:	460d      	mov	r5, r1
 80114f0:	b976      	cbnz	r6, 8011510 <_Balloc+0x28>
 80114f2:	2010      	movs	r0, #16
 80114f4:	f7ff ffe2 	bl	80114bc <malloc>
 80114f8:	4602      	mov	r2, r0
 80114fa:	6260      	str	r0, [r4, #36]	; 0x24
 80114fc:	b920      	cbnz	r0, 8011508 <_Balloc+0x20>
 80114fe:	4b18      	ldr	r3, [pc, #96]	; (8011560 <_Balloc+0x78>)
 8011500:	4818      	ldr	r0, [pc, #96]	; (8011564 <_Balloc+0x7c>)
 8011502:	2166      	movs	r1, #102	; 0x66
 8011504:	f000 fdd6 	bl	80120b4 <__assert_func>
 8011508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801150c:	6006      	str	r6, [r0, #0]
 801150e:	60c6      	str	r6, [r0, #12]
 8011510:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011512:	68f3      	ldr	r3, [r6, #12]
 8011514:	b183      	cbz	r3, 8011538 <_Balloc+0x50>
 8011516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011518:	68db      	ldr	r3, [r3, #12]
 801151a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801151e:	b9b8      	cbnz	r0, 8011550 <_Balloc+0x68>
 8011520:	2101      	movs	r1, #1
 8011522:	fa01 f605 	lsl.w	r6, r1, r5
 8011526:	1d72      	adds	r2, r6, #5
 8011528:	0092      	lsls	r2, r2, #2
 801152a:	4620      	mov	r0, r4
 801152c:	f000 fb60 	bl	8011bf0 <_calloc_r>
 8011530:	b160      	cbz	r0, 801154c <_Balloc+0x64>
 8011532:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011536:	e00e      	b.n	8011556 <_Balloc+0x6e>
 8011538:	2221      	movs	r2, #33	; 0x21
 801153a:	2104      	movs	r1, #4
 801153c:	4620      	mov	r0, r4
 801153e:	f000 fb57 	bl	8011bf0 <_calloc_r>
 8011542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011544:	60f0      	str	r0, [r6, #12]
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1e4      	bne.n	8011516 <_Balloc+0x2e>
 801154c:	2000      	movs	r0, #0
 801154e:	bd70      	pop	{r4, r5, r6, pc}
 8011550:	6802      	ldr	r2, [r0, #0]
 8011552:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011556:	2300      	movs	r3, #0
 8011558:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801155c:	e7f7      	b.n	801154e <_Balloc+0x66>
 801155e:	bf00      	nop
 8011560:	08013311 	.word	0x08013311
 8011564:	08013394 	.word	0x08013394

08011568 <_Bfree>:
 8011568:	b570      	push	{r4, r5, r6, lr}
 801156a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801156c:	4605      	mov	r5, r0
 801156e:	460c      	mov	r4, r1
 8011570:	b976      	cbnz	r6, 8011590 <_Bfree+0x28>
 8011572:	2010      	movs	r0, #16
 8011574:	f7ff ffa2 	bl	80114bc <malloc>
 8011578:	4602      	mov	r2, r0
 801157a:	6268      	str	r0, [r5, #36]	; 0x24
 801157c:	b920      	cbnz	r0, 8011588 <_Bfree+0x20>
 801157e:	4b09      	ldr	r3, [pc, #36]	; (80115a4 <_Bfree+0x3c>)
 8011580:	4809      	ldr	r0, [pc, #36]	; (80115a8 <_Bfree+0x40>)
 8011582:	218a      	movs	r1, #138	; 0x8a
 8011584:	f000 fd96 	bl	80120b4 <__assert_func>
 8011588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801158c:	6006      	str	r6, [r0, #0]
 801158e:	60c6      	str	r6, [r0, #12]
 8011590:	b13c      	cbz	r4, 80115a2 <_Bfree+0x3a>
 8011592:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011594:	6862      	ldr	r2, [r4, #4]
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801159c:	6021      	str	r1, [r4, #0]
 801159e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80115a2:	bd70      	pop	{r4, r5, r6, pc}
 80115a4:	08013311 	.word	0x08013311
 80115a8:	08013394 	.word	0x08013394

080115ac <__multadd>:
 80115ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115b0:	690d      	ldr	r5, [r1, #16]
 80115b2:	4607      	mov	r7, r0
 80115b4:	460c      	mov	r4, r1
 80115b6:	461e      	mov	r6, r3
 80115b8:	f101 0c14 	add.w	ip, r1, #20
 80115bc:	2000      	movs	r0, #0
 80115be:	f8dc 3000 	ldr.w	r3, [ip]
 80115c2:	b299      	uxth	r1, r3
 80115c4:	fb02 6101 	mla	r1, r2, r1, r6
 80115c8:	0c1e      	lsrs	r6, r3, #16
 80115ca:	0c0b      	lsrs	r3, r1, #16
 80115cc:	fb02 3306 	mla	r3, r2, r6, r3
 80115d0:	b289      	uxth	r1, r1
 80115d2:	3001      	adds	r0, #1
 80115d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80115d8:	4285      	cmp	r5, r0
 80115da:	f84c 1b04 	str.w	r1, [ip], #4
 80115de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80115e2:	dcec      	bgt.n	80115be <__multadd+0x12>
 80115e4:	b30e      	cbz	r6, 801162a <__multadd+0x7e>
 80115e6:	68a3      	ldr	r3, [r4, #8]
 80115e8:	42ab      	cmp	r3, r5
 80115ea:	dc19      	bgt.n	8011620 <__multadd+0x74>
 80115ec:	6861      	ldr	r1, [r4, #4]
 80115ee:	4638      	mov	r0, r7
 80115f0:	3101      	adds	r1, #1
 80115f2:	f7ff ff79 	bl	80114e8 <_Balloc>
 80115f6:	4680      	mov	r8, r0
 80115f8:	b928      	cbnz	r0, 8011606 <__multadd+0x5a>
 80115fa:	4602      	mov	r2, r0
 80115fc:	4b0c      	ldr	r3, [pc, #48]	; (8011630 <__multadd+0x84>)
 80115fe:	480d      	ldr	r0, [pc, #52]	; (8011634 <__multadd+0x88>)
 8011600:	21b5      	movs	r1, #181	; 0xb5
 8011602:	f000 fd57 	bl	80120b4 <__assert_func>
 8011606:	6922      	ldr	r2, [r4, #16]
 8011608:	3202      	adds	r2, #2
 801160a:	f104 010c 	add.w	r1, r4, #12
 801160e:	0092      	lsls	r2, r2, #2
 8011610:	300c      	adds	r0, #12
 8011612:	f7ff ff5b 	bl	80114cc <memcpy>
 8011616:	4621      	mov	r1, r4
 8011618:	4638      	mov	r0, r7
 801161a:	f7ff ffa5 	bl	8011568 <_Bfree>
 801161e:	4644      	mov	r4, r8
 8011620:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011624:	3501      	adds	r5, #1
 8011626:	615e      	str	r6, [r3, #20]
 8011628:	6125      	str	r5, [r4, #16]
 801162a:	4620      	mov	r0, r4
 801162c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011630:	08013383 	.word	0x08013383
 8011634:	08013394 	.word	0x08013394

08011638 <__hi0bits>:
 8011638:	0c03      	lsrs	r3, r0, #16
 801163a:	041b      	lsls	r3, r3, #16
 801163c:	b9d3      	cbnz	r3, 8011674 <__hi0bits+0x3c>
 801163e:	0400      	lsls	r0, r0, #16
 8011640:	2310      	movs	r3, #16
 8011642:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011646:	bf04      	itt	eq
 8011648:	0200      	lsleq	r0, r0, #8
 801164a:	3308      	addeq	r3, #8
 801164c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011650:	bf04      	itt	eq
 8011652:	0100      	lsleq	r0, r0, #4
 8011654:	3304      	addeq	r3, #4
 8011656:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801165a:	bf04      	itt	eq
 801165c:	0080      	lsleq	r0, r0, #2
 801165e:	3302      	addeq	r3, #2
 8011660:	2800      	cmp	r0, #0
 8011662:	db05      	blt.n	8011670 <__hi0bits+0x38>
 8011664:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011668:	f103 0301 	add.w	r3, r3, #1
 801166c:	bf08      	it	eq
 801166e:	2320      	moveq	r3, #32
 8011670:	4618      	mov	r0, r3
 8011672:	4770      	bx	lr
 8011674:	2300      	movs	r3, #0
 8011676:	e7e4      	b.n	8011642 <__hi0bits+0xa>

08011678 <__lo0bits>:
 8011678:	6803      	ldr	r3, [r0, #0]
 801167a:	f013 0207 	ands.w	r2, r3, #7
 801167e:	4601      	mov	r1, r0
 8011680:	d00b      	beq.n	801169a <__lo0bits+0x22>
 8011682:	07da      	lsls	r2, r3, #31
 8011684:	d423      	bmi.n	80116ce <__lo0bits+0x56>
 8011686:	0798      	lsls	r0, r3, #30
 8011688:	bf49      	itett	mi
 801168a:	085b      	lsrmi	r3, r3, #1
 801168c:	089b      	lsrpl	r3, r3, #2
 801168e:	2001      	movmi	r0, #1
 8011690:	600b      	strmi	r3, [r1, #0]
 8011692:	bf5c      	itt	pl
 8011694:	600b      	strpl	r3, [r1, #0]
 8011696:	2002      	movpl	r0, #2
 8011698:	4770      	bx	lr
 801169a:	b298      	uxth	r0, r3
 801169c:	b9a8      	cbnz	r0, 80116ca <__lo0bits+0x52>
 801169e:	0c1b      	lsrs	r3, r3, #16
 80116a0:	2010      	movs	r0, #16
 80116a2:	b2da      	uxtb	r2, r3
 80116a4:	b90a      	cbnz	r2, 80116aa <__lo0bits+0x32>
 80116a6:	3008      	adds	r0, #8
 80116a8:	0a1b      	lsrs	r3, r3, #8
 80116aa:	071a      	lsls	r2, r3, #28
 80116ac:	bf04      	itt	eq
 80116ae:	091b      	lsreq	r3, r3, #4
 80116b0:	3004      	addeq	r0, #4
 80116b2:	079a      	lsls	r2, r3, #30
 80116b4:	bf04      	itt	eq
 80116b6:	089b      	lsreq	r3, r3, #2
 80116b8:	3002      	addeq	r0, #2
 80116ba:	07da      	lsls	r2, r3, #31
 80116bc:	d403      	bmi.n	80116c6 <__lo0bits+0x4e>
 80116be:	085b      	lsrs	r3, r3, #1
 80116c0:	f100 0001 	add.w	r0, r0, #1
 80116c4:	d005      	beq.n	80116d2 <__lo0bits+0x5a>
 80116c6:	600b      	str	r3, [r1, #0]
 80116c8:	4770      	bx	lr
 80116ca:	4610      	mov	r0, r2
 80116cc:	e7e9      	b.n	80116a2 <__lo0bits+0x2a>
 80116ce:	2000      	movs	r0, #0
 80116d0:	4770      	bx	lr
 80116d2:	2020      	movs	r0, #32
 80116d4:	4770      	bx	lr
	...

080116d8 <__i2b>:
 80116d8:	b510      	push	{r4, lr}
 80116da:	460c      	mov	r4, r1
 80116dc:	2101      	movs	r1, #1
 80116de:	f7ff ff03 	bl	80114e8 <_Balloc>
 80116e2:	4602      	mov	r2, r0
 80116e4:	b928      	cbnz	r0, 80116f2 <__i2b+0x1a>
 80116e6:	4b05      	ldr	r3, [pc, #20]	; (80116fc <__i2b+0x24>)
 80116e8:	4805      	ldr	r0, [pc, #20]	; (8011700 <__i2b+0x28>)
 80116ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80116ee:	f000 fce1 	bl	80120b4 <__assert_func>
 80116f2:	2301      	movs	r3, #1
 80116f4:	6144      	str	r4, [r0, #20]
 80116f6:	6103      	str	r3, [r0, #16]
 80116f8:	bd10      	pop	{r4, pc}
 80116fa:	bf00      	nop
 80116fc:	08013383 	.word	0x08013383
 8011700:	08013394 	.word	0x08013394

08011704 <__multiply>:
 8011704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011708:	4691      	mov	r9, r2
 801170a:	690a      	ldr	r2, [r1, #16]
 801170c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011710:	429a      	cmp	r2, r3
 8011712:	bfb8      	it	lt
 8011714:	460b      	movlt	r3, r1
 8011716:	460c      	mov	r4, r1
 8011718:	bfbc      	itt	lt
 801171a:	464c      	movlt	r4, r9
 801171c:	4699      	movlt	r9, r3
 801171e:	6927      	ldr	r7, [r4, #16]
 8011720:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011724:	68a3      	ldr	r3, [r4, #8]
 8011726:	6861      	ldr	r1, [r4, #4]
 8011728:	eb07 060a 	add.w	r6, r7, sl
 801172c:	42b3      	cmp	r3, r6
 801172e:	b085      	sub	sp, #20
 8011730:	bfb8      	it	lt
 8011732:	3101      	addlt	r1, #1
 8011734:	f7ff fed8 	bl	80114e8 <_Balloc>
 8011738:	b930      	cbnz	r0, 8011748 <__multiply+0x44>
 801173a:	4602      	mov	r2, r0
 801173c:	4b44      	ldr	r3, [pc, #272]	; (8011850 <__multiply+0x14c>)
 801173e:	4845      	ldr	r0, [pc, #276]	; (8011854 <__multiply+0x150>)
 8011740:	f240 115d 	movw	r1, #349	; 0x15d
 8011744:	f000 fcb6 	bl	80120b4 <__assert_func>
 8011748:	f100 0514 	add.w	r5, r0, #20
 801174c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011750:	462b      	mov	r3, r5
 8011752:	2200      	movs	r2, #0
 8011754:	4543      	cmp	r3, r8
 8011756:	d321      	bcc.n	801179c <__multiply+0x98>
 8011758:	f104 0314 	add.w	r3, r4, #20
 801175c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011760:	f109 0314 	add.w	r3, r9, #20
 8011764:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011768:	9202      	str	r2, [sp, #8]
 801176a:	1b3a      	subs	r2, r7, r4
 801176c:	3a15      	subs	r2, #21
 801176e:	f022 0203 	bic.w	r2, r2, #3
 8011772:	3204      	adds	r2, #4
 8011774:	f104 0115 	add.w	r1, r4, #21
 8011778:	428f      	cmp	r7, r1
 801177a:	bf38      	it	cc
 801177c:	2204      	movcc	r2, #4
 801177e:	9201      	str	r2, [sp, #4]
 8011780:	9a02      	ldr	r2, [sp, #8]
 8011782:	9303      	str	r3, [sp, #12]
 8011784:	429a      	cmp	r2, r3
 8011786:	d80c      	bhi.n	80117a2 <__multiply+0x9e>
 8011788:	2e00      	cmp	r6, #0
 801178a:	dd03      	ble.n	8011794 <__multiply+0x90>
 801178c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011790:	2b00      	cmp	r3, #0
 8011792:	d05a      	beq.n	801184a <__multiply+0x146>
 8011794:	6106      	str	r6, [r0, #16]
 8011796:	b005      	add	sp, #20
 8011798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801179c:	f843 2b04 	str.w	r2, [r3], #4
 80117a0:	e7d8      	b.n	8011754 <__multiply+0x50>
 80117a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80117a6:	f1ba 0f00 	cmp.w	sl, #0
 80117aa:	d024      	beq.n	80117f6 <__multiply+0xf2>
 80117ac:	f104 0e14 	add.w	lr, r4, #20
 80117b0:	46a9      	mov	r9, r5
 80117b2:	f04f 0c00 	mov.w	ip, #0
 80117b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80117ba:	f8d9 1000 	ldr.w	r1, [r9]
 80117be:	fa1f fb82 	uxth.w	fp, r2
 80117c2:	b289      	uxth	r1, r1
 80117c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80117c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80117cc:	f8d9 2000 	ldr.w	r2, [r9]
 80117d0:	4461      	add	r1, ip
 80117d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80117d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80117da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80117de:	b289      	uxth	r1, r1
 80117e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80117e4:	4577      	cmp	r7, lr
 80117e6:	f849 1b04 	str.w	r1, [r9], #4
 80117ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80117ee:	d8e2      	bhi.n	80117b6 <__multiply+0xb2>
 80117f0:	9a01      	ldr	r2, [sp, #4]
 80117f2:	f845 c002 	str.w	ip, [r5, r2]
 80117f6:	9a03      	ldr	r2, [sp, #12]
 80117f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80117fc:	3304      	adds	r3, #4
 80117fe:	f1b9 0f00 	cmp.w	r9, #0
 8011802:	d020      	beq.n	8011846 <__multiply+0x142>
 8011804:	6829      	ldr	r1, [r5, #0]
 8011806:	f104 0c14 	add.w	ip, r4, #20
 801180a:	46ae      	mov	lr, r5
 801180c:	f04f 0a00 	mov.w	sl, #0
 8011810:	f8bc b000 	ldrh.w	fp, [ip]
 8011814:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011818:	fb09 220b 	mla	r2, r9, fp, r2
 801181c:	4492      	add	sl, r2
 801181e:	b289      	uxth	r1, r1
 8011820:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011824:	f84e 1b04 	str.w	r1, [lr], #4
 8011828:	f85c 2b04 	ldr.w	r2, [ip], #4
 801182c:	f8be 1000 	ldrh.w	r1, [lr]
 8011830:	0c12      	lsrs	r2, r2, #16
 8011832:	fb09 1102 	mla	r1, r9, r2, r1
 8011836:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801183a:	4567      	cmp	r7, ip
 801183c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011840:	d8e6      	bhi.n	8011810 <__multiply+0x10c>
 8011842:	9a01      	ldr	r2, [sp, #4]
 8011844:	50a9      	str	r1, [r5, r2]
 8011846:	3504      	adds	r5, #4
 8011848:	e79a      	b.n	8011780 <__multiply+0x7c>
 801184a:	3e01      	subs	r6, #1
 801184c:	e79c      	b.n	8011788 <__multiply+0x84>
 801184e:	bf00      	nop
 8011850:	08013383 	.word	0x08013383
 8011854:	08013394 	.word	0x08013394

08011858 <__pow5mult>:
 8011858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801185c:	4615      	mov	r5, r2
 801185e:	f012 0203 	ands.w	r2, r2, #3
 8011862:	4606      	mov	r6, r0
 8011864:	460f      	mov	r7, r1
 8011866:	d007      	beq.n	8011878 <__pow5mult+0x20>
 8011868:	4c25      	ldr	r4, [pc, #148]	; (8011900 <__pow5mult+0xa8>)
 801186a:	3a01      	subs	r2, #1
 801186c:	2300      	movs	r3, #0
 801186e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011872:	f7ff fe9b 	bl	80115ac <__multadd>
 8011876:	4607      	mov	r7, r0
 8011878:	10ad      	asrs	r5, r5, #2
 801187a:	d03d      	beq.n	80118f8 <__pow5mult+0xa0>
 801187c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801187e:	b97c      	cbnz	r4, 80118a0 <__pow5mult+0x48>
 8011880:	2010      	movs	r0, #16
 8011882:	f7ff fe1b 	bl	80114bc <malloc>
 8011886:	4602      	mov	r2, r0
 8011888:	6270      	str	r0, [r6, #36]	; 0x24
 801188a:	b928      	cbnz	r0, 8011898 <__pow5mult+0x40>
 801188c:	4b1d      	ldr	r3, [pc, #116]	; (8011904 <__pow5mult+0xac>)
 801188e:	481e      	ldr	r0, [pc, #120]	; (8011908 <__pow5mult+0xb0>)
 8011890:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011894:	f000 fc0e 	bl	80120b4 <__assert_func>
 8011898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801189c:	6004      	str	r4, [r0, #0]
 801189e:	60c4      	str	r4, [r0, #12]
 80118a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80118a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118a8:	b94c      	cbnz	r4, 80118be <__pow5mult+0x66>
 80118aa:	f240 2171 	movw	r1, #625	; 0x271
 80118ae:	4630      	mov	r0, r6
 80118b0:	f7ff ff12 	bl	80116d8 <__i2b>
 80118b4:	2300      	movs	r3, #0
 80118b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80118ba:	4604      	mov	r4, r0
 80118bc:	6003      	str	r3, [r0, #0]
 80118be:	f04f 0900 	mov.w	r9, #0
 80118c2:	07eb      	lsls	r3, r5, #31
 80118c4:	d50a      	bpl.n	80118dc <__pow5mult+0x84>
 80118c6:	4639      	mov	r1, r7
 80118c8:	4622      	mov	r2, r4
 80118ca:	4630      	mov	r0, r6
 80118cc:	f7ff ff1a 	bl	8011704 <__multiply>
 80118d0:	4639      	mov	r1, r7
 80118d2:	4680      	mov	r8, r0
 80118d4:	4630      	mov	r0, r6
 80118d6:	f7ff fe47 	bl	8011568 <_Bfree>
 80118da:	4647      	mov	r7, r8
 80118dc:	106d      	asrs	r5, r5, #1
 80118de:	d00b      	beq.n	80118f8 <__pow5mult+0xa0>
 80118e0:	6820      	ldr	r0, [r4, #0]
 80118e2:	b938      	cbnz	r0, 80118f4 <__pow5mult+0x9c>
 80118e4:	4622      	mov	r2, r4
 80118e6:	4621      	mov	r1, r4
 80118e8:	4630      	mov	r0, r6
 80118ea:	f7ff ff0b 	bl	8011704 <__multiply>
 80118ee:	6020      	str	r0, [r4, #0]
 80118f0:	f8c0 9000 	str.w	r9, [r0]
 80118f4:	4604      	mov	r4, r0
 80118f6:	e7e4      	b.n	80118c2 <__pow5mult+0x6a>
 80118f8:	4638      	mov	r0, r7
 80118fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118fe:	bf00      	nop
 8011900:	080134e0 	.word	0x080134e0
 8011904:	08013311 	.word	0x08013311
 8011908:	08013394 	.word	0x08013394

0801190c <__lshift>:
 801190c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011910:	460c      	mov	r4, r1
 8011912:	6849      	ldr	r1, [r1, #4]
 8011914:	6923      	ldr	r3, [r4, #16]
 8011916:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801191a:	68a3      	ldr	r3, [r4, #8]
 801191c:	4607      	mov	r7, r0
 801191e:	4691      	mov	r9, r2
 8011920:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011924:	f108 0601 	add.w	r6, r8, #1
 8011928:	42b3      	cmp	r3, r6
 801192a:	db0b      	blt.n	8011944 <__lshift+0x38>
 801192c:	4638      	mov	r0, r7
 801192e:	f7ff fddb 	bl	80114e8 <_Balloc>
 8011932:	4605      	mov	r5, r0
 8011934:	b948      	cbnz	r0, 801194a <__lshift+0x3e>
 8011936:	4602      	mov	r2, r0
 8011938:	4b2a      	ldr	r3, [pc, #168]	; (80119e4 <__lshift+0xd8>)
 801193a:	482b      	ldr	r0, [pc, #172]	; (80119e8 <__lshift+0xdc>)
 801193c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011940:	f000 fbb8 	bl	80120b4 <__assert_func>
 8011944:	3101      	adds	r1, #1
 8011946:	005b      	lsls	r3, r3, #1
 8011948:	e7ee      	b.n	8011928 <__lshift+0x1c>
 801194a:	2300      	movs	r3, #0
 801194c:	f100 0114 	add.w	r1, r0, #20
 8011950:	f100 0210 	add.w	r2, r0, #16
 8011954:	4618      	mov	r0, r3
 8011956:	4553      	cmp	r3, sl
 8011958:	db37      	blt.n	80119ca <__lshift+0xbe>
 801195a:	6920      	ldr	r0, [r4, #16]
 801195c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011960:	f104 0314 	add.w	r3, r4, #20
 8011964:	f019 091f 	ands.w	r9, r9, #31
 8011968:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801196c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011970:	d02f      	beq.n	80119d2 <__lshift+0xc6>
 8011972:	f1c9 0e20 	rsb	lr, r9, #32
 8011976:	468a      	mov	sl, r1
 8011978:	f04f 0c00 	mov.w	ip, #0
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	fa02 f209 	lsl.w	r2, r2, r9
 8011982:	ea42 020c 	orr.w	r2, r2, ip
 8011986:	f84a 2b04 	str.w	r2, [sl], #4
 801198a:	f853 2b04 	ldr.w	r2, [r3], #4
 801198e:	4298      	cmp	r0, r3
 8011990:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011994:	d8f2      	bhi.n	801197c <__lshift+0x70>
 8011996:	1b03      	subs	r3, r0, r4
 8011998:	3b15      	subs	r3, #21
 801199a:	f023 0303 	bic.w	r3, r3, #3
 801199e:	3304      	adds	r3, #4
 80119a0:	f104 0215 	add.w	r2, r4, #21
 80119a4:	4290      	cmp	r0, r2
 80119a6:	bf38      	it	cc
 80119a8:	2304      	movcc	r3, #4
 80119aa:	f841 c003 	str.w	ip, [r1, r3]
 80119ae:	f1bc 0f00 	cmp.w	ip, #0
 80119b2:	d001      	beq.n	80119b8 <__lshift+0xac>
 80119b4:	f108 0602 	add.w	r6, r8, #2
 80119b8:	3e01      	subs	r6, #1
 80119ba:	4638      	mov	r0, r7
 80119bc:	612e      	str	r6, [r5, #16]
 80119be:	4621      	mov	r1, r4
 80119c0:	f7ff fdd2 	bl	8011568 <_Bfree>
 80119c4:	4628      	mov	r0, r5
 80119c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80119ce:	3301      	adds	r3, #1
 80119d0:	e7c1      	b.n	8011956 <__lshift+0x4a>
 80119d2:	3904      	subs	r1, #4
 80119d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80119d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80119dc:	4298      	cmp	r0, r3
 80119de:	d8f9      	bhi.n	80119d4 <__lshift+0xc8>
 80119e0:	e7ea      	b.n	80119b8 <__lshift+0xac>
 80119e2:	bf00      	nop
 80119e4:	08013383 	.word	0x08013383
 80119e8:	08013394 	.word	0x08013394

080119ec <__mcmp>:
 80119ec:	b530      	push	{r4, r5, lr}
 80119ee:	6902      	ldr	r2, [r0, #16]
 80119f0:	690c      	ldr	r4, [r1, #16]
 80119f2:	1b12      	subs	r2, r2, r4
 80119f4:	d10e      	bne.n	8011a14 <__mcmp+0x28>
 80119f6:	f100 0314 	add.w	r3, r0, #20
 80119fa:	3114      	adds	r1, #20
 80119fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a0c:	42a5      	cmp	r5, r4
 8011a0e:	d003      	beq.n	8011a18 <__mcmp+0x2c>
 8011a10:	d305      	bcc.n	8011a1e <__mcmp+0x32>
 8011a12:	2201      	movs	r2, #1
 8011a14:	4610      	mov	r0, r2
 8011a16:	bd30      	pop	{r4, r5, pc}
 8011a18:	4283      	cmp	r3, r0
 8011a1a:	d3f3      	bcc.n	8011a04 <__mcmp+0x18>
 8011a1c:	e7fa      	b.n	8011a14 <__mcmp+0x28>
 8011a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8011a22:	e7f7      	b.n	8011a14 <__mcmp+0x28>

08011a24 <__mdiff>:
 8011a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a28:	460c      	mov	r4, r1
 8011a2a:	4606      	mov	r6, r0
 8011a2c:	4611      	mov	r1, r2
 8011a2e:	4620      	mov	r0, r4
 8011a30:	4690      	mov	r8, r2
 8011a32:	f7ff ffdb 	bl	80119ec <__mcmp>
 8011a36:	1e05      	subs	r5, r0, #0
 8011a38:	d110      	bne.n	8011a5c <__mdiff+0x38>
 8011a3a:	4629      	mov	r1, r5
 8011a3c:	4630      	mov	r0, r6
 8011a3e:	f7ff fd53 	bl	80114e8 <_Balloc>
 8011a42:	b930      	cbnz	r0, 8011a52 <__mdiff+0x2e>
 8011a44:	4b3a      	ldr	r3, [pc, #232]	; (8011b30 <__mdiff+0x10c>)
 8011a46:	4602      	mov	r2, r0
 8011a48:	f240 2132 	movw	r1, #562	; 0x232
 8011a4c:	4839      	ldr	r0, [pc, #228]	; (8011b34 <__mdiff+0x110>)
 8011a4e:	f000 fb31 	bl	80120b4 <__assert_func>
 8011a52:	2301      	movs	r3, #1
 8011a54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a5c:	bfa4      	itt	ge
 8011a5e:	4643      	movge	r3, r8
 8011a60:	46a0      	movge	r8, r4
 8011a62:	4630      	mov	r0, r6
 8011a64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011a68:	bfa6      	itte	ge
 8011a6a:	461c      	movge	r4, r3
 8011a6c:	2500      	movge	r5, #0
 8011a6e:	2501      	movlt	r5, #1
 8011a70:	f7ff fd3a 	bl	80114e8 <_Balloc>
 8011a74:	b920      	cbnz	r0, 8011a80 <__mdiff+0x5c>
 8011a76:	4b2e      	ldr	r3, [pc, #184]	; (8011b30 <__mdiff+0x10c>)
 8011a78:	4602      	mov	r2, r0
 8011a7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011a7e:	e7e5      	b.n	8011a4c <__mdiff+0x28>
 8011a80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011a84:	6926      	ldr	r6, [r4, #16]
 8011a86:	60c5      	str	r5, [r0, #12]
 8011a88:	f104 0914 	add.w	r9, r4, #20
 8011a8c:	f108 0514 	add.w	r5, r8, #20
 8011a90:	f100 0e14 	add.w	lr, r0, #20
 8011a94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011a98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011a9c:	f108 0210 	add.w	r2, r8, #16
 8011aa0:	46f2      	mov	sl, lr
 8011aa2:	2100      	movs	r1, #0
 8011aa4:	f859 3b04 	ldr.w	r3, [r9], #4
 8011aa8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011aac:	fa1f f883 	uxth.w	r8, r3
 8011ab0:	fa11 f18b 	uxtah	r1, r1, fp
 8011ab4:	0c1b      	lsrs	r3, r3, #16
 8011ab6:	eba1 0808 	sub.w	r8, r1, r8
 8011aba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011abe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011ac2:	fa1f f888 	uxth.w	r8, r8
 8011ac6:	1419      	asrs	r1, r3, #16
 8011ac8:	454e      	cmp	r6, r9
 8011aca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011ace:	f84a 3b04 	str.w	r3, [sl], #4
 8011ad2:	d8e7      	bhi.n	8011aa4 <__mdiff+0x80>
 8011ad4:	1b33      	subs	r3, r6, r4
 8011ad6:	3b15      	subs	r3, #21
 8011ad8:	f023 0303 	bic.w	r3, r3, #3
 8011adc:	3304      	adds	r3, #4
 8011ade:	3415      	adds	r4, #21
 8011ae0:	42a6      	cmp	r6, r4
 8011ae2:	bf38      	it	cc
 8011ae4:	2304      	movcc	r3, #4
 8011ae6:	441d      	add	r5, r3
 8011ae8:	4473      	add	r3, lr
 8011aea:	469e      	mov	lr, r3
 8011aec:	462e      	mov	r6, r5
 8011aee:	4566      	cmp	r6, ip
 8011af0:	d30e      	bcc.n	8011b10 <__mdiff+0xec>
 8011af2:	f10c 0203 	add.w	r2, ip, #3
 8011af6:	1b52      	subs	r2, r2, r5
 8011af8:	f022 0203 	bic.w	r2, r2, #3
 8011afc:	3d03      	subs	r5, #3
 8011afe:	45ac      	cmp	ip, r5
 8011b00:	bf38      	it	cc
 8011b02:	2200      	movcc	r2, #0
 8011b04:	441a      	add	r2, r3
 8011b06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011b0a:	b17b      	cbz	r3, 8011b2c <__mdiff+0x108>
 8011b0c:	6107      	str	r7, [r0, #16]
 8011b0e:	e7a3      	b.n	8011a58 <__mdiff+0x34>
 8011b10:	f856 8b04 	ldr.w	r8, [r6], #4
 8011b14:	fa11 f288 	uxtah	r2, r1, r8
 8011b18:	1414      	asrs	r4, r2, #16
 8011b1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011b1e:	b292      	uxth	r2, r2
 8011b20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011b24:	f84e 2b04 	str.w	r2, [lr], #4
 8011b28:	1421      	asrs	r1, r4, #16
 8011b2a:	e7e0      	b.n	8011aee <__mdiff+0xca>
 8011b2c:	3f01      	subs	r7, #1
 8011b2e:	e7ea      	b.n	8011b06 <__mdiff+0xe2>
 8011b30:	08013383 	.word	0x08013383
 8011b34:	08013394 	.word	0x08013394

08011b38 <__d2b>:
 8011b38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011b3c:	4689      	mov	r9, r1
 8011b3e:	2101      	movs	r1, #1
 8011b40:	ec57 6b10 	vmov	r6, r7, d0
 8011b44:	4690      	mov	r8, r2
 8011b46:	f7ff fccf 	bl	80114e8 <_Balloc>
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	b930      	cbnz	r0, 8011b5c <__d2b+0x24>
 8011b4e:	4602      	mov	r2, r0
 8011b50:	4b25      	ldr	r3, [pc, #148]	; (8011be8 <__d2b+0xb0>)
 8011b52:	4826      	ldr	r0, [pc, #152]	; (8011bec <__d2b+0xb4>)
 8011b54:	f240 310a 	movw	r1, #778	; 0x30a
 8011b58:	f000 faac 	bl	80120b4 <__assert_func>
 8011b5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011b60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011b64:	bb35      	cbnz	r5, 8011bb4 <__d2b+0x7c>
 8011b66:	2e00      	cmp	r6, #0
 8011b68:	9301      	str	r3, [sp, #4]
 8011b6a:	d028      	beq.n	8011bbe <__d2b+0x86>
 8011b6c:	4668      	mov	r0, sp
 8011b6e:	9600      	str	r6, [sp, #0]
 8011b70:	f7ff fd82 	bl	8011678 <__lo0bits>
 8011b74:	9900      	ldr	r1, [sp, #0]
 8011b76:	b300      	cbz	r0, 8011bba <__d2b+0x82>
 8011b78:	9a01      	ldr	r2, [sp, #4]
 8011b7a:	f1c0 0320 	rsb	r3, r0, #32
 8011b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b82:	430b      	orrs	r3, r1
 8011b84:	40c2      	lsrs	r2, r0
 8011b86:	6163      	str	r3, [r4, #20]
 8011b88:	9201      	str	r2, [sp, #4]
 8011b8a:	9b01      	ldr	r3, [sp, #4]
 8011b8c:	61a3      	str	r3, [r4, #24]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	bf14      	ite	ne
 8011b92:	2202      	movne	r2, #2
 8011b94:	2201      	moveq	r2, #1
 8011b96:	6122      	str	r2, [r4, #16]
 8011b98:	b1d5      	cbz	r5, 8011bd0 <__d2b+0x98>
 8011b9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011b9e:	4405      	add	r5, r0
 8011ba0:	f8c9 5000 	str.w	r5, [r9]
 8011ba4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011ba8:	f8c8 0000 	str.w	r0, [r8]
 8011bac:	4620      	mov	r0, r4
 8011bae:	b003      	add	sp, #12
 8011bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011bb8:	e7d5      	b.n	8011b66 <__d2b+0x2e>
 8011bba:	6161      	str	r1, [r4, #20]
 8011bbc:	e7e5      	b.n	8011b8a <__d2b+0x52>
 8011bbe:	a801      	add	r0, sp, #4
 8011bc0:	f7ff fd5a 	bl	8011678 <__lo0bits>
 8011bc4:	9b01      	ldr	r3, [sp, #4]
 8011bc6:	6163      	str	r3, [r4, #20]
 8011bc8:	2201      	movs	r2, #1
 8011bca:	6122      	str	r2, [r4, #16]
 8011bcc:	3020      	adds	r0, #32
 8011bce:	e7e3      	b.n	8011b98 <__d2b+0x60>
 8011bd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011bd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011bd8:	f8c9 0000 	str.w	r0, [r9]
 8011bdc:	6918      	ldr	r0, [r3, #16]
 8011bde:	f7ff fd2b 	bl	8011638 <__hi0bits>
 8011be2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011be6:	e7df      	b.n	8011ba8 <__d2b+0x70>
 8011be8:	08013383 	.word	0x08013383
 8011bec:	08013394 	.word	0x08013394

08011bf0 <_calloc_r>:
 8011bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011bf2:	fba1 2402 	umull	r2, r4, r1, r2
 8011bf6:	b94c      	cbnz	r4, 8011c0c <_calloc_r+0x1c>
 8011bf8:	4611      	mov	r1, r2
 8011bfa:	9201      	str	r2, [sp, #4]
 8011bfc:	f000 f87a 	bl	8011cf4 <_malloc_r>
 8011c00:	9a01      	ldr	r2, [sp, #4]
 8011c02:	4605      	mov	r5, r0
 8011c04:	b930      	cbnz	r0, 8011c14 <_calloc_r+0x24>
 8011c06:	4628      	mov	r0, r5
 8011c08:	b003      	add	sp, #12
 8011c0a:	bd30      	pop	{r4, r5, pc}
 8011c0c:	220c      	movs	r2, #12
 8011c0e:	6002      	str	r2, [r0, #0]
 8011c10:	2500      	movs	r5, #0
 8011c12:	e7f8      	b.n	8011c06 <_calloc_r+0x16>
 8011c14:	4621      	mov	r1, r4
 8011c16:	f7fe f93f 	bl	800fe98 <memset>
 8011c1a:	e7f4      	b.n	8011c06 <_calloc_r+0x16>

08011c1c <_free_r>:
 8011c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c1e:	2900      	cmp	r1, #0
 8011c20:	d044      	beq.n	8011cac <_free_r+0x90>
 8011c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c26:	9001      	str	r0, [sp, #4]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	f1a1 0404 	sub.w	r4, r1, #4
 8011c2e:	bfb8      	it	lt
 8011c30:	18e4      	addlt	r4, r4, r3
 8011c32:	f000 fa9b 	bl	801216c <__malloc_lock>
 8011c36:	4a1e      	ldr	r2, [pc, #120]	; (8011cb0 <_free_r+0x94>)
 8011c38:	9801      	ldr	r0, [sp, #4]
 8011c3a:	6813      	ldr	r3, [r2, #0]
 8011c3c:	b933      	cbnz	r3, 8011c4c <_free_r+0x30>
 8011c3e:	6063      	str	r3, [r4, #4]
 8011c40:	6014      	str	r4, [r2, #0]
 8011c42:	b003      	add	sp, #12
 8011c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c48:	f000 ba96 	b.w	8012178 <__malloc_unlock>
 8011c4c:	42a3      	cmp	r3, r4
 8011c4e:	d908      	bls.n	8011c62 <_free_r+0x46>
 8011c50:	6825      	ldr	r5, [r4, #0]
 8011c52:	1961      	adds	r1, r4, r5
 8011c54:	428b      	cmp	r3, r1
 8011c56:	bf01      	itttt	eq
 8011c58:	6819      	ldreq	r1, [r3, #0]
 8011c5a:	685b      	ldreq	r3, [r3, #4]
 8011c5c:	1949      	addeq	r1, r1, r5
 8011c5e:	6021      	streq	r1, [r4, #0]
 8011c60:	e7ed      	b.n	8011c3e <_free_r+0x22>
 8011c62:	461a      	mov	r2, r3
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	b10b      	cbz	r3, 8011c6c <_free_r+0x50>
 8011c68:	42a3      	cmp	r3, r4
 8011c6a:	d9fa      	bls.n	8011c62 <_free_r+0x46>
 8011c6c:	6811      	ldr	r1, [r2, #0]
 8011c6e:	1855      	adds	r5, r2, r1
 8011c70:	42a5      	cmp	r5, r4
 8011c72:	d10b      	bne.n	8011c8c <_free_r+0x70>
 8011c74:	6824      	ldr	r4, [r4, #0]
 8011c76:	4421      	add	r1, r4
 8011c78:	1854      	adds	r4, r2, r1
 8011c7a:	42a3      	cmp	r3, r4
 8011c7c:	6011      	str	r1, [r2, #0]
 8011c7e:	d1e0      	bne.n	8011c42 <_free_r+0x26>
 8011c80:	681c      	ldr	r4, [r3, #0]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	6053      	str	r3, [r2, #4]
 8011c86:	4421      	add	r1, r4
 8011c88:	6011      	str	r1, [r2, #0]
 8011c8a:	e7da      	b.n	8011c42 <_free_r+0x26>
 8011c8c:	d902      	bls.n	8011c94 <_free_r+0x78>
 8011c8e:	230c      	movs	r3, #12
 8011c90:	6003      	str	r3, [r0, #0]
 8011c92:	e7d6      	b.n	8011c42 <_free_r+0x26>
 8011c94:	6825      	ldr	r5, [r4, #0]
 8011c96:	1961      	adds	r1, r4, r5
 8011c98:	428b      	cmp	r3, r1
 8011c9a:	bf04      	itt	eq
 8011c9c:	6819      	ldreq	r1, [r3, #0]
 8011c9e:	685b      	ldreq	r3, [r3, #4]
 8011ca0:	6063      	str	r3, [r4, #4]
 8011ca2:	bf04      	itt	eq
 8011ca4:	1949      	addeq	r1, r1, r5
 8011ca6:	6021      	streq	r1, [r4, #0]
 8011ca8:	6054      	str	r4, [r2, #4]
 8011caa:	e7ca      	b.n	8011c42 <_free_r+0x26>
 8011cac:	b003      	add	sp, #12
 8011cae:	bd30      	pop	{r4, r5, pc}
 8011cb0:	20003384 	.word	0x20003384

08011cb4 <sbrk_aligned>:
 8011cb4:	b570      	push	{r4, r5, r6, lr}
 8011cb6:	4e0e      	ldr	r6, [pc, #56]	; (8011cf0 <sbrk_aligned+0x3c>)
 8011cb8:	460c      	mov	r4, r1
 8011cba:	6831      	ldr	r1, [r6, #0]
 8011cbc:	4605      	mov	r5, r0
 8011cbe:	b911      	cbnz	r1, 8011cc6 <sbrk_aligned+0x12>
 8011cc0:	f000 f9e8 	bl	8012094 <_sbrk_r>
 8011cc4:	6030      	str	r0, [r6, #0]
 8011cc6:	4621      	mov	r1, r4
 8011cc8:	4628      	mov	r0, r5
 8011cca:	f000 f9e3 	bl	8012094 <_sbrk_r>
 8011cce:	1c43      	adds	r3, r0, #1
 8011cd0:	d00a      	beq.n	8011ce8 <sbrk_aligned+0x34>
 8011cd2:	1cc4      	adds	r4, r0, #3
 8011cd4:	f024 0403 	bic.w	r4, r4, #3
 8011cd8:	42a0      	cmp	r0, r4
 8011cda:	d007      	beq.n	8011cec <sbrk_aligned+0x38>
 8011cdc:	1a21      	subs	r1, r4, r0
 8011cde:	4628      	mov	r0, r5
 8011ce0:	f000 f9d8 	bl	8012094 <_sbrk_r>
 8011ce4:	3001      	adds	r0, #1
 8011ce6:	d101      	bne.n	8011cec <sbrk_aligned+0x38>
 8011ce8:	f04f 34ff 	mov.w	r4, #4294967295
 8011cec:	4620      	mov	r0, r4
 8011cee:	bd70      	pop	{r4, r5, r6, pc}
 8011cf0:	20003388 	.word	0x20003388

08011cf4 <_malloc_r>:
 8011cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf8:	1ccd      	adds	r5, r1, #3
 8011cfa:	f025 0503 	bic.w	r5, r5, #3
 8011cfe:	3508      	adds	r5, #8
 8011d00:	2d0c      	cmp	r5, #12
 8011d02:	bf38      	it	cc
 8011d04:	250c      	movcc	r5, #12
 8011d06:	2d00      	cmp	r5, #0
 8011d08:	4607      	mov	r7, r0
 8011d0a:	db01      	blt.n	8011d10 <_malloc_r+0x1c>
 8011d0c:	42a9      	cmp	r1, r5
 8011d0e:	d905      	bls.n	8011d1c <_malloc_r+0x28>
 8011d10:	230c      	movs	r3, #12
 8011d12:	603b      	str	r3, [r7, #0]
 8011d14:	2600      	movs	r6, #0
 8011d16:	4630      	mov	r0, r6
 8011d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d1c:	4e2e      	ldr	r6, [pc, #184]	; (8011dd8 <_malloc_r+0xe4>)
 8011d1e:	f000 fa25 	bl	801216c <__malloc_lock>
 8011d22:	6833      	ldr	r3, [r6, #0]
 8011d24:	461c      	mov	r4, r3
 8011d26:	bb34      	cbnz	r4, 8011d76 <_malloc_r+0x82>
 8011d28:	4629      	mov	r1, r5
 8011d2a:	4638      	mov	r0, r7
 8011d2c:	f7ff ffc2 	bl	8011cb4 <sbrk_aligned>
 8011d30:	1c43      	adds	r3, r0, #1
 8011d32:	4604      	mov	r4, r0
 8011d34:	d14d      	bne.n	8011dd2 <_malloc_r+0xde>
 8011d36:	6834      	ldr	r4, [r6, #0]
 8011d38:	4626      	mov	r6, r4
 8011d3a:	2e00      	cmp	r6, #0
 8011d3c:	d140      	bne.n	8011dc0 <_malloc_r+0xcc>
 8011d3e:	6823      	ldr	r3, [r4, #0]
 8011d40:	4631      	mov	r1, r6
 8011d42:	4638      	mov	r0, r7
 8011d44:	eb04 0803 	add.w	r8, r4, r3
 8011d48:	f000 f9a4 	bl	8012094 <_sbrk_r>
 8011d4c:	4580      	cmp	r8, r0
 8011d4e:	d13a      	bne.n	8011dc6 <_malloc_r+0xd2>
 8011d50:	6821      	ldr	r1, [r4, #0]
 8011d52:	3503      	adds	r5, #3
 8011d54:	1a6d      	subs	r5, r5, r1
 8011d56:	f025 0503 	bic.w	r5, r5, #3
 8011d5a:	3508      	adds	r5, #8
 8011d5c:	2d0c      	cmp	r5, #12
 8011d5e:	bf38      	it	cc
 8011d60:	250c      	movcc	r5, #12
 8011d62:	4629      	mov	r1, r5
 8011d64:	4638      	mov	r0, r7
 8011d66:	f7ff ffa5 	bl	8011cb4 <sbrk_aligned>
 8011d6a:	3001      	adds	r0, #1
 8011d6c:	d02b      	beq.n	8011dc6 <_malloc_r+0xd2>
 8011d6e:	6823      	ldr	r3, [r4, #0]
 8011d70:	442b      	add	r3, r5
 8011d72:	6023      	str	r3, [r4, #0]
 8011d74:	e00e      	b.n	8011d94 <_malloc_r+0xa0>
 8011d76:	6822      	ldr	r2, [r4, #0]
 8011d78:	1b52      	subs	r2, r2, r5
 8011d7a:	d41e      	bmi.n	8011dba <_malloc_r+0xc6>
 8011d7c:	2a0b      	cmp	r2, #11
 8011d7e:	d916      	bls.n	8011dae <_malloc_r+0xba>
 8011d80:	1961      	adds	r1, r4, r5
 8011d82:	42a3      	cmp	r3, r4
 8011d84:	6025      	str	r5, [r4, #0]
 8011d86:	bf18      	it	ne
 8011d88:	6059      	strne	r1, [r3, #4]
 8011d8a:	6863      	ldr	r3, [r4, #4]
 8011d8c:	bf08      	it	eq
 8011d8e:	6031      	streq	r1, [r6, #0]
 8011d90:	5162      	str	r2, [r4, r5]
 8011d92:	604b      	str	r3, [r1, #4]
 8011d94:	4638      	mov	r0, r7
 8011d96:	f104 060b 	add.w	r6, r4, #11
 8011d9a:	f000 f9ed 	bl	8012178 <__malloc_unlock>
 8011d9e:	f026 0607 	bic.w	r6, r6, #7
 8011da2:	1d23      	adds	r3, r4, #4
 8011da4:	1af2      	subs	r2, r6, r3
 8011da6:	d0b6      	beq.n	8011d16 <_malloc_r+0x22>
 8011da8:	1b9b      	subs	r3, r3, r6
 8011daa:	50a3      	str	r3, [r4, r2]
 8011dac:	e7b3      	b.n	8011d16 <_malloc_r+0x22>
 8011dae:	6862      	ldr	r2, [r4, #4]
 8011db0:	42a3      	cmp	r3, r4
 8011db2:	bf0c      	ite	eq
 8011db4:	6032      	streq	r2, [r6, #0]
 8011db6:	605a      	strne	r2, [r3, #4]
 8011db8:	e7ec      	b.n	8011d94 <_malloc_r+0xa0>
 8011dba:	4623      	mov	r3, r4
 8011dbc:	6864      	ldr	r4, [r4, #4]
 8011dbe:	e7b2      	b.n	8011d26 <_malloc_r+0x32>
 8011dc0:	4634      	mov	r4, r6
 8011dc2:	6876      	ldr	r6, [r6, #4]
 8011dc4:	e7b9      	b.n	8011d3a <_malloc_r+0x46>
 8011dc6:	230c      	movs	r3, #12
 8011dc8:	603b      	str	r3, [r7, #0]
 8011dca:	4638      	mov	r0, r7
 8011dcc:	f000 f9d4 	bl	8012178 <__malloc_unlock>
 8011dd0:	e7a1      	b.n	8011d16 <_malloc_r+0x22>
 8011dd2:	6025      	str	r5, [r4, #0]
 8011dd4:	e7de      	b.n	8011d94 <_malloc_r+0xa0>
 8011dd6:	bf00      	nop
 8011dd8:	20003384 	.word	0x20003384

08011ddc <__ssputs_r>:
 8011ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011de0:	688e      	ldr	r6, [r1, #8]
 8011de2:	429e      	cmp	r6, r3
 8011de4:	4682      	mov	sl, r0
 8011de6:	460c      	mov	r4, r1
 8011de8:	4690      	mov	r8, r2
 8011dea:	461f      	mov	r7, r3
 8011dec:	d838      	bhi.n	8011e60 <__ssputs_r+0x84>
 8011dee:	898a      	ldrh	r2, [r1, #12]
 8011df0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011df4:	d032      	beq.n	8011e5c <__ssputs_r+0x80>
 8011df6:	6825      	ldr	r5, [r4, #0]
 8011df8:	6909      	ldr	r1, [r1, #16]
 8011dfa:	eba5 0901 	sub.w	r9, r5, r1
 8011dfe:	6965      	ldr	r5, [r4, #20]
 8011e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e08:	3301      	adds	r3, #1
 8011e0a:	444b      	add	r3, r9
 8011e0c:	106d      	asrs	r5, r5, #1
 8011e0e:	429d      	cmp	r5, r3
 8011e10:	bf38      	it	cc
 8011e12:	461d      	movcc	r5, r3
 8011e14:	0553      	lsls	r3, r2, #21
 8011e16:	d531      	bpl.n	8011e7c <__ssputs_r+0xa0>
 8011e18:	4629      	mov	r1, r5
 8011e1a:	f7ff ff6b 	bl	8011cf4 <_malloc_r>
 8011e1e:	4606      	mov	r6, r0
 8011e20:	b950      	cbnz	r0, 8011e38 <__ssputs_r+0x5c>
 8011e22:	230c      	movs	r3, #12
 8011e24:	f8ca 3000 	str.w	r3, [sl]
 8011e28:	89a3      	ldrh	r3, [r4, #12]
 8011e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e2e:	81a3      	strh	r3, [r4, #12]
 8011e30:	f04f 30ff 	mov.w	r0, #4294967295
 8011e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e38:	6921      	ldr	r1, [r4, #16]
 8011e3a:	464a      	mov	r2, r9
 8011e3c:	f7ff fb46 	bl	80114cc <memcpy>
 8011e40:	89a3      	ldrh	r3, [r4, #12]
 8011e42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e4a:	81a3      	strh	r3, [r4, #12]
 8011e4c:	6126      	str	r6, [r4, #16]
 8011e4e:	6165      	str	r5, [r4, #20]
 8011e50:	444e      	add	r6, r9
 8011e52:	eba5 0509 	sub.w	r5, r5, r9
 8011e56:	6026      	str	r6, [r4, #0]
 8011e58:	60a5      	str	r5, [r4, #8]
 8011e5a:	463e      	mov	r6, r7
 8011e5c:	42be      	cmp	r6, r7
 8011e5e:	d900      	bls.n	8011e62 <__ssputs_r+0x86>
 8011e60:	463e      	mov	r6, r7
 8011e62:	6820      	ldr	r0, [r4, #0]
 8011e64:	4632      	mov	r2, r6
 8011e66:	4641      	mov	r1, r8
 8011e68:	f000 f966 	bl	8012138 <memmove>
 8011e6c:	68a3      	ldr	r3, [r4, #8]
 8011e6e:	1b9b      	subs	r3, r3, r6
 8011e70:	60a3      	str	r3, [r4, #8]
 8011e72:	6823      	ldr	r3, [r4, #0]
 8011e74:	4433      	add	r3, r6
 8011e76:	6023      	str	r3, [r4, #0]
 8011e78:	2000      	movs	r0, #0
 8011e7a:	e7db      	b.n	8011e34 <__ssputs_r+0x58>
 8011e7c:	462a      	mov	r2, r5
 8011e7e:	f000 f981 	bl	8012184 <_realloc_r>
 8011e82:	4606      	mov	r6, r0
 8011e84:	2800      	cmp	r0, #0
 8011e86:	d1e1      	bne.n	8011e4c <__ssputs_r+0x70>
 8011e88:	6921      	ldr	r1, [r4, #16]
 8011e8a:	4650      	mov	r0, sl
 8011e8c:	f7ff fec6 	bl	8011c1c <_free_r>
 8011e90:	e7c7      	b.n	8011e22 <__ssputs_r+0x46>
	...

08011e94 <_svfiprintf_r>:
 8011e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e98:	4698      	mov	r8, r3
 8011e9a:	898b      	ldrh	r3, [r1, #12]
 8011e9c:	061b      	lsls	r3, r3, #24
 8011e9e:	b09d      	sub	sp, #116	; 0x74
 8011ea0:	4607      	mov	r7, r0
 8011ea2:	460d      	mov	r5, r1
 8011ea4:	4614      	mov	r4, r2
 8011ea6:	d50e      	bpl.n	8011ec6 <_svfiprintf_r+0x32>
 8011ea8:	690b      	ldr	r3, [r1, #16]
 8011eaa:	b963      	cbnz	r3, 8011ec6 <_svfiprintf_r+0x32>
 8011eac:	2140      	movs	r1, #64	; 0x40
 8011eae:	f7ff ff21 	bl	8011cf4 <_malloc_r>
 8011eb2:	6028      	str	r0, [r5, #0]
 8011eb4:	6128      	str	r0, [r5, #16]
 8011eb6:	b920      	cbnz	r0, 8011ec2 <_svfiprintf_r+0x2e>
 8011eb8:	230c      	movs	r3, #12
 8011eba:	603b      	str	r3, [r7, #0]
 8011ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ec0:	e0d1      	b.n	8012066 <_svfiprintf_r+0x1d2>
 8011ec2:	2340      	movs	r3, #64	; 0x40
 8011ec4:	616b      	str	r3, [r5, #20]
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8011eca:	2320      	movs	r3, #32
 8011ecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ed4:	2330      	movs	r3, #48	; 0x30
 8011ed6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012080 <_svfiprintf_r+0x1ec>
 8011eda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ede:	f04f 0901 	mov.w	r9, #1
 8011ee2:	4623      	mov	r3, r4
 8011ee4:	469a      	mov	sl, r3
 8011ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eea:	b10a      	cbz	r2, 8011ef0 <_svfiprintf_r+0x5c>
 8011eec:	2a25      	cmp	r2, #37	; 0x25
 8011eee:	d1f9      	bne.n	8011ee4 <_svfiprintf_r+0x50>
 8011ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8011ef4:	d00b      	beq.n	8011f0e <_svfiprintf_r+0x7a>
 8011ef6:	465b      	mov	r3, fp
 8011ef8:	4622      	mov	r2, r4
 8011efa:	4629      	mov	r1, r5
 8011efc:	4638      	mov	r0, r7
 8011efe:	f7ff ff6d 	bl	8011ddc <__ssputs_r>
 8011f02:	3001      	adds	r0, #1
 8011f04:	f000 80aa 	beq.w	801205c <_svfiprintf_r+0x1c8>
 8011f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f0a:	445a      	add	r2, fp
 8011f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8011f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	f000 80a2 	beq.w	801205c <_svfiprintf_r+0x1c8>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f22:	f10a 0a01 	add.w	sl, sl, #1
 8011f26:	9304      	str	r3, [sp, #16]
 8011f28:	9307      	str	r3, [sp, #28]
 8011f2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f2e:	931a      	str	r3, [sp, #104]	; 0x68
 8011f30:	4654      	mov	r4, sl
 8011f32:	2205      	movs	r2, #5
 8011f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f38:	4851      	ldr	r0, [pc, #324]	; (8012080 <_svfiprintf_r+0x1ec>)
 8011f3a:	f7ee f959 	bl	80001f0 <memchr>
 8011f3e:	9a04      	ldr	r2, [sp, #16]
 8011f40:	b9d8      	cbnz	r0, 8011f7a <_svfiprintf_r+0xe6>
 8011f42:	06d0      	lsls	r0, r2, #27
 8011f44:	bf44      	itt	mi
 8011f46:	2320      	movmi	r3, #32
 8011f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f4c:	0711      	lsls	r1, r2, #28
 8011f4e:	bf44      	itt	mi
 8011f50:	232b      	movmi	r3, #43	; 0x2b
 8011f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f56:	f89a 3000 	ldrb.w	r3, [sl]
 8011f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8011f5c:	d015      	beq.n	8011f8a <_svfiprintf_r+0xf6>
 8011f5e:	9a07      	ldr	r2, [sp, #28]
 8011f60:	4654      	mov	r4, sl
 8011f62:	2000      	movs	r0, #0
 8011f64:	f04f 0c0a 	mov.w	ip, #10
 8011f68:	4621      	mov	r1, r4
 8011f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f6e:	3b30      	subs	r3, #48	; 0x30
 8011f70:	2b09      	cmp	r3, #9
 8011f72:	d94e      	bls.n	8012012 <_svfiprintf_r+0x17e>
 8011f74:	b1b0      	cbz	r0, 8011fa4 <_svfiprintf_r+0x110>
 8011f76:	9207      	str	r2, [sp, #28]
 8011f78:	e014      	b.n	8011fa4 <_svfiprintf_r+0x110>
 8011f7a:	eba0 0308 	sub.w	r3, r0, r8
 8011f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8011f82:	4313      	orrs	r3, r2
 8011f84:	9304      	str	r3, [sp, #16]
 8011f86:	46a2      	mov	sl, r4
 8011f88:	e7d2      	b.n	8011f30 <_svfiprintf_r+0x9c>
 8011f8a:	9b03      	ldr	r3, [sp, #12]
 8011f8c:	1d19      	adds	r1, r3, #4
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	9103      	str	r1, [sp, #12]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	bfbb      	ittet	lt
 8011f96:	425b      	neglt	r3, r3
 8011f98:	f042 0202 	orrlt.w	r2, r2, #2
 8011f9c:	9307      	strge	r3, [sp, #28]
 8011f9e:	9307      	strlt	r3, [sp, #28]
 8011fa0:	bfb8      	it	lt
 8011fa2:	9204      	strlt	r2, [sp, #16]
 8011fa4:	7823      	ldrb	r3, [r4, #0]
 8011fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8011fa8:	d10c      	bne.n	8011fc4 <_svfiprintf_r+0x130>
 8011faa:	7863      	ldrb	r3, [r4, #1]
 8011fac:	2b2a      	cmp	r3, #42	; 0x2a
 8011fae:	d135      	bne.n	801201c <_svfiprintf_r+0x188>
 8011fb0:	9b03      	ldr	r3, [sp, #12]
 8011fb2:	1d1a      	adds	r2, r3, #4
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	9203      	str	r2, [sp, #12]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	bfb8      	it	lt
 8011fbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8011fc0:	3402      	adds	r4, #2
 8011fc2:	9305      	str	r3, [sp, #20]
 8011fc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012090 <_svfiprintf_r+0x1fc>
 8011fc8:	7821      	ldrb	r1, [r4, #0]
 8011fca:	2203      	movs	r2, #3
 8011fcc:	4650      	mov	r0, sl
 8011fce:	f7ee f90f 	bl	80001f0 <memchr>
 8011fd2:	b140      	cbz	r0, 8011fe6 <_svfiprintf_r+0x152>
 8011fd4:	2340      	movs	r3, #64	; 0x40
 8011fd6:	eba0 000a 	sub.w	r0, r0, sl
 8011fda:	fa03 f000 	lsl.w	r0, r3, r0
 8011fde:	9b04      	ldr	r3, [sp, #16]
 8011fe0:	4303      	orrs	r3, r0
 8011fe2:	3401      	adds	r4, #1
 8011fe4:	9304      	str	r3, [sp, #16]
 8011fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fea:	4826      	ldr	r0, [pc, #152]	; (8012084 <_svfiprintf_r+0x1f0>)
 8011fec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ff0:	2206      	movs	r2, #6
 8011ff2:	f7ee f8fd 	bl	80001f0 <memchr>
 8011ff6:	2800      	cmp	r0, #0
 8011ff8:	d038      	beq.n	801206c <_svfiprintf_r+0x1d8>
 8011ffa:	4b23      	ldr	r3, [pc, #140]	; (8012088 <_svfiprintf_r+0x1f4>)
 8011ffc:	bb1b      	cbnz	r3, 8012046 <_svfiprintf_r+0x1b2>
 8011ffe:	9b03      	ldr	r3, [sp, #12]
 8012000:	3307      	adds	r3, #7
 8012002:	f023 0307 	bic.w	r3, r3, #7
 8012006:	3308      	adds	r3, #8
 8012008:	9303      	str	r3, [sp, #12]
 801200a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801200c:	4433      	add	r3, r6
 801200e:	9309      	str	r3, [sp, #36]	; 0x24
 8012010:	e767      	b.n	8011ee2 <_svfiprintf_r+0x4e>
 8012012:	fb0c 3202 	mla	r2, ip, r2, r3
 8012016:	460c      	mov	r4, r1
 8012018:	2001      	movs	r0, #1
 801201a:	e7a5      	b.n	8011f68 <_svfiprintf_r+0xd4>
 801201c:	2300      	movs	r3, #0
 801201e:	3401      	adds	r4, #1
 8012020:	9305      	str	r3, [sp, #20]
 8012022:	4619      	mov	r1, r3
 8012024:	f04f 0c0a 	mov.w	ip, #10
 8012028:	4620      	mov	r0, r4
 801202a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801202e:	3a30      	subs	r2, #48	; 0x30
 8012030:	2a09      	cmp	r2, #9
 8012032:	d903      	bls.n	801203c <_svfiprintf_r+0x1a8>
 8012034:	2b00      	cmp	r3, #0
 8012036:	d0c5      	beq.n	8011fc4 <_svfiprintf_r+0x130>
 8012038:	9105      	str	r1, [sp, #20]
 801203a:	e7c3      	b.n	8011fc4 <_svfiprintf_r+0x130>
 801203c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012040:	4604      	mov	r4, r0
 8012042:	2301      	movs	r3, #1
 8012044:	e7f0      	b.n	8012028 <_svfiprintf_r+0x194>
 8012046:	ab03      	add	r3, sp, #12
 8012048:	9300      	str	r3, [sp, #0]
 801204a:	462a      	mov	r2, r5
 801204c:	4b0f      	ldr	r3, [pc, #60]	; (801208c <_svfiprintf_r+0x1f8>)
 801204e:	a904      	add	r1, sp, #16
 8012050:	4638      	mov	r0, r7
 8012052:	f7fd ffc9 	bl	800ffe8 <_printf_float>
 8012056:	1c42      	adds	r2, r0, #1
 8012058:	4606      	mov	r6, r0
 801205a:	d1d6      	bne.n	801200a <_svfiprintf_r+0x176>
 801205c:	89ab      	ldrh	r3, [r5, #12]
 801205e:	065b      	lsls	r3, r3, #25
 8012060:	f53f af2c 	bmi.w	8011ebc <_svfiprintf_r+0x28>
 8012064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012066:	b01d      	add	sp, #116	; 0x74
 8012068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206c:	ab03      	add	r3, sp, #12
 801206e:	9300      	str	r3, [sp, #0]
 8012070:	462a      	mov	r2, r5
 8012072:	4b06      	ldr	r3, [pc, #24]	; (801208c <_svfiprintf_r+0x1f8>)
 8012074:	a904      	add	r1, sp, #16
 8012076:	4638      	mov	r0, r7
 8012078:	f7fe fa5a 	bl	8010530 <_printf_i>
 801207c:	e7eb      	b.n	8012056 <_svfiprintf_r+0x1c2>
 801207e:	bf00      	nop
 8012080:	080134ec 	.word	0x080134ec
 8012084:	080134f6 	.word	0x080134f6
 8012088:	0800ffe9 	.word	0x0800ffe9
 801208c:	08011ddd 	.word	0x08011ddd
 8012090:	080134f2 	.word	0x080134f2

08012094 <_sbrk_r>:
 8012094:	b538      	push	{r3, r4, r5, lr}
 8012096:	4d06      	ldr	r5, [pc, #24]	; (80120b0 <_sbrk_r+0x1c>)
 8012098:	2300      	movs	r3, #0
 801209a:	4604      	mov	r4, r0
 801209c:	4608      	mov	r0, r1
 801209e:	602b      	str	r3, [r5, #0]
 80120a0:	f7f0 febc 	bl	8002e1c <_sbrk>
 80120a4:	1c43      	adds	r3, r0, #1
 80120a6:	d102      	bne.n	80120ae <_sbrk_r+0x1a>
 80120a8:	682b      	ldr	r3, [r5, #0]
 80120aa:	b103      	cbz	r3, 80120ae <_sbrk_r+0x1a>
 80120ac:	6023      	str	r3, [r4, #0]
 80120ae:	bd38      	pop	{r3, r4, r5, pc}
 80120b0:	2000338c 	.word	0x2000338c

080120b4 <__assert_func>:
 80120b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120b6:	4614      	mov	r4, r2
 80120b8:	461a      	mov	r2, r3
 80120ba:	4b09      	ldr	r3, [pc, #36]	; (80120e0 <__assert_func+0x2c>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	4605      	mov	r5, r0
 80120c0:	68d8      	ldr	r0, [r3, #12]
 80120c2:	b14c      	cbz	r4, 80120d8 <__assert_func+0x24>
 80120c4:	4b07      	ldr	r3, [pc, #28]	; (80120e4 <__assert_func+0x30>)
 80120c6:	9100      	str	r1, [sp, #0]
 80120c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80120cc:	4906      	ldr	r1, [pc, #24]	; (80120e8 <__assert_func+0x34>)
 80120ce:	462b      	mov	r3, r5
 80120d0:	f000 f80e 	bl	80120f0 <fiprintf>
 80120d4:	f000 faac 	bl	8012630 <abort>
 80120d8:	4b04      	ldr	r3, [pc, #16]	; (80120ec <__assert_func+0x38>)
 80120da:	461c      	mov	r4, r3
 80120dc:	e7f3      	b.n	80120c6 <__assert_func+0x12>
 80120de:	bf00      	nop
 80120e0:	2000013c 	.word	0x2000013c
 80120e4:	080134fd 	.word	0x080134fd
 80120e8:	0801350a 	.word	0x0801350a
 80120ec:	08013538 	.word	0x08013538

080120f0 <fiprintf>:
 80120f0:	b40e      	push	{r1, r2, r3}
 80120f2:	b503      	push	{r0, r1, lr}
 80120f4:	4601      	mov	r1, r0
 80120f6:	ab03      	add	r3, sp, #12
 80120f8:	4805      	ldr	r0, [pc, #20]	; (8012110 <fiprintf+0x20>)
 80120fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80120fe:	6800      	ldr	r0, [r0, #0]
 8012100:	9301      	str	r3, [sp, #4]
 8012102:	f000 f897 	bl	8012234 <_vfiprintf_r>
 8012106:	b002      	add	sp, #8
 8012108:	f85d eb04 	ldr.w	lr, [sp], #4
 801210c:	b003      	add	sp, #12
 801210e:	4770      	bx	lr
 8012110:	2000013c 	.word	0x2000013c

08012114 <__ascii_mbtowc>:
 8012114:	b082      	sub	sp, #8
 8012116:	b901      	cbnz	r1, 801211a <__ascii_mbtowc+0x6>
 8012118:	a901      	add	r1, sp, #4
 801211a:	b142      	cbz	r2, 801212e <__ascii_mbtowc+0x1a>
 801211c:	b14b      	cbz	r3, 8012132 <__ascii_mbtowc+0x1e>
 801211e:	7813      	ldrb	r3, [r2, #0]
 8012120:	600b      	str	r3, [r1, #0]
 8012122:	7812      	ldrb	r2, [r2, #0]
 8012124:	1e10      	subs	r0, r2, #0
 8012126:	bf18      	it	ne
 8012128:	2001      	movne	r0, #1
 801212a:	b002      	add	sp, #8
 801212c:	4770      	bx	lr
 801212e:	4610      	mov	r0, r2
 8012130:	e7fb      	b.n	801212a <__ascii_mbtowc+0x16>
 8012132:	f06f 0001 	mvn.w	r0, #1
 8012136:	e7f8      	b.n	801212a <__ascii_mbtowc+0x16>

08012138 <memmove>:
 8012138:	4288      	cmp	r0, r1
 801213a:	b510      	push	{r4, lr}
 801213c:	eb01 0402 	add.w	r4, r1, r2
 8012140:	d902      	bls.n	8012148 <memmove+0x10>
 8012142:	4284      	cmp	r4, r0
 8012144:	4623      	mov	r3, r4
 8012146:	d807      	bhi.n	8012158 <memmove+0x20>
 8012148:	1e43      	subs	r3, r0, #1
 801214a:	42a1      	cmp	r1, r4
 801214c:	d008      	beq.n	8012160 <memmove+0x28>
 801214e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012156:	e7f8      	b.n	801214a <memmove+0x12>
 8012158:	4402      	add	r2, r0
 801215a:	4601      	mov	r1, r0
 801215c:	428a      	cmp	r2, r1
 801215e:	d100      	bne.n	8012162 <memmove+0x2a>
 8012160:	bd10      	pop	{r4, pc}
 8012162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801216a:	e7f7      	b.n	801215c <memmove+0x24>

0801216c <__malloc_lock>:
 801216c:	4801      	ldr	r0, [pc, #4]	; (8012174 <__malloc_lock+0x8>)
 801216e:	f000 bc1f 	b.w	80129b0 <__retarget_lock_acquire_recursive>
 8012172:	bf00      	nop
 8012174:	20003390 	.word	0x20003390

08012178 <__malloc_unlock>:
 8012178:	4801      	ldr	r0, [pc, #4]	; (8012180 <__malloc_unlock+0x8>)
 801217a:	f000 bc1a 	b.w	80129b2 <__retarget_lock_release_recursive>
 801217e:	bf00      	nop
 8012180:	20003390 	.word	0x20003390

08012184 <_realloc_r>:
 8012184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012188:	4680      	mov	r8, r0
 801218a:	4614      	mov	r4, r2
 801218c:	460e      	mov	r6, r1
 801218e:	b921      	cbnz	r1, 801219a <_realloc_r+0x16>
 8012190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012194:	4611      	mov	r1, r2
 8012196:	f7ff bdad 	b.w	8011cf4 <_malloc_r>
 801219a:	b92a      	cbnz	r2, 80121a8 <_realloc_r+0x24>
 801219c:	f7ff fd3e 	bl	8011c1c <_free_r>
 80121a0:	4625      	mov	r5, r4
 80121a2:	4628      	mov	r0, r5
 80121a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121a8:	f000 fc6a 	bl	8012a80 <_malloc_usable_size_r>
 80121ac:	4284      	cmp	r4, r0
 80121ae:	4607      	mov	r7, r0
 80121b0:	d802      	bhi.n	80121b8 <_realloc_r+0x34>
 80121b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80121b6:	d812      	bhi.n	80121de <_realloc_r+0x5a>
 80121b8:	4621      	mov	r1, r4
 80121ba:	4640      	mov	r0, r8
 80121bc:	f7ff fd9a 	bl	8011cf4 <_malloc_r>
 80121c0:	4605      	mov	r5, r0
 80121c2:	2800      	cmp	r0, #0
 80121c4:	d0ed      	beq.n	80121a2 <_realloc_r+0x1e>
 80121c6:	42bc      	cmp	r4, r7
 80121c8:	4622      	mov	r2, r4
 80121ca:	4631      	mov	r1, r6
 80121cc:	bf28      	it	cs
 80121ce:	463a      	movcs	r2, r7
 80121d0:	f7ff f97c 	bl	80114cc <memcpy>
 80121d4:	4631      	mov	r1, r6
 80121d6:	4640      	mov	r0, r8
 80121d8:	f7ff fd20 	bl	8011c1c <_free_r>
 80121dc:	e7e1      	b.n	80121a2 <_realloc_r+0x1e>
 80121de:	4635      	mov	r5, r6
 80121e0:	e7df      	b.n	80121a2 <_realloc_r+0x1e>

080121e2 <__sfputc_r>:
 80121e2:	6893      	ldr	r3, [r2, #8]
 80121e4:	3b01      	subs	r3, #1
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	b410      	push	{r4}
 80121ea:	6093      	str	r3, [r2, #8]
 80121ec:	da08      	bge.n	8012200 <__sfputc_r+0x1e>
 80121ee:	6994      	ldr	r4, [r2, #24]
 80121f0:	42a3      	cmp	r3, r4
 80121f2:	db01      	blt.n	80121f8 <__sfputc_r+0x16>
 80121f4:	290a      	cmp	r1, #10
 80121f6:	d103      	bne.n	8012200 <__sfputc_r+0x1e>
 80121f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121fc:	f000 b94a 	b.w	8012494 <__swbuf_r>
 8012200:	6813      	ldr	r3, [r2, #0]
 8012202:	1c58      	adds	r0, r3, #1
 8012204:	6010      	str	r0, [r2, #0]
 8012206:	7019      	strb	r1, [r3, #0]
 8012208:	4608      	mov	r0, r1
 801220a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801220e:	4770      	bx	lr

08012210 <__sfputs_r>:
 8012210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012212:	4606      	mov	r6, r0
 8012214:	460f      	mov	r7, r1
 8012216:	4614      	mov	r4, r2
 8012218:	18d5      	adds	r5, r2, r3
 801221a:	42ac      	cmp	r4, r5
 801221c:	d101      	bne.n	8012222 <__sfputs_r+0x12>
 801221e:	2000      	movs	r0, #0
 8012220:	e007      	b.n	8012232 <__sfputs_r+0x22>
 8012222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012226:	463a      	mov	r2, r7
 8012228:	4630      	mov	r0, r6
 801222a:	f7ff ffda 	bl	80121e2 <__sfputc_r>
 801222e:	1c43      	adds	r3, r0, #1
 8012230:	d1f3      	bne.n	801221a <__sfputs_r+0xa>
 8012232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012234 <_vfiprintf_r>:
 8012234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012238:	460d      	mov	r5, r1
 801223a:	b09d      	sub	sp, #116	; 0x74
 801223c:	4614      	mov	r4, r2
 801223e:	4698      	mov	r8, r3
 8012240:	4606      	mov	r6, r0
 8012242:	b118      	cbz	r0, 801224c <_vfiprintf_r+0x18>
 8012244:	6983      	ldr	r3, [r0, #24]
 8012246:	b90b      	cbnz	r3, 801224c <_vfiprintf_r+0x18>
 8012248:	f000 fb14 	bl	8012874 <__sinit>
 801224c:	4b89      	ldr	r3, [pc, #548]	; (8012474 <_vfiprintf_r+0x240>)
 801224e:	429d      	cmp	r5, r3
 8012250:	d11b      	bne.n	801228a <_vfiprintf_r+0x56>
 8012252:	6875      	ldr	r5, [r6, #4]
 8012254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012256:	07d9      	lsls	r1, r3, #31
 8012258:	d405      	bmi.n	8012266 <_vfiprintf_r+0x32>
 801225a:	89ab      	ldrh	r3, [r5, #12]
 801225c:	059a      	lsls	r2, r3, #22
 801225e:	d402      	bmi.n	8012266 <_vfiprintf_r+0x32>
 8012260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012262:	f000 fba5 	bl	80129b0 <__retarget_lock_acquire_recursive>
 8012266:	89ab      	ldrh	r3, [r5, #12]
 8012268:	071b      	lsls	r3, r3, #28
 801226a:	d501      	bpl.n	8012270 <_vfiprintf_r+0x3c>
 801226c:	692b      	ldr	r3, [r5, #16]
 801226e:	b9eb      	cbnz	r3, 80122ac <_vfiprintf_r+0x78>
 8012270:	4629      	mov	r1, r5
 8012272:	4630      	mov	r0, r6
 8012274:	f000 f96e 	bl	8012554 <__swsetup_r>
 8012278:	b1c0      	cbz	r0, 80122ac <_vfiprintf_r+0x78>
 801227a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801227c:	07dc      	lsls	r4, r3, #31
 801227e:	d50e      	bpl.n	801229e <_vfiprintf_r+0x6a>
 8012280:	f04f 30ff 	mov.w	r0, #4294967295
 8012284:	b01d      	add	sp, #116	; 0x74
 8012286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801228a:	4b7b      	ldr	r3, [pc, #492]	; (8012478 <_vfiprintf_r+0x244>)
 801228c:	429d      	cmp	r5, r3
 801228e:	d101      	bne.n	8012294 <_vfiprintf_r+0x60>
 8012290:	68b5      	ldr	r5, [r6, #8]
 8012292:	e7df      	b.n	8012254 <_vfiprintf_r+0x20>
 8012294:	4b79      	ldr	r3, [pc, #484]	; (801247c <_vfiprintf_r+0x248>)
 8012296:	429d      	cmp	r5, r3
 8012298:	bf08      	it	eq
 801229a:	68f5      	ldreq	r5, [r6, #12]
 801229c:	e7da      	b.n	8012254 <_vfiprintf_r+0x20>
 801229e:	89ab      	ldrh	r3, [r5, #12]
 80122a0:	0598      	lsls	r0, r3, #22
 80122a2:	d4ed      	bmi.n	8012280 <_vfiprintf_r+0x4c>
 80122a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122a6:	f000 fb84 	bl	80129b2 <__retarget_lock_release_recursive>
 80122aa:	e7e9      	b.n	8012280 <_vfiprintf_r+0x4c>
 80122ac:	2300      	movs	r3, #0
 80122ae:	9309      	str	r3, [sp, #36]	; 0x24
 80122b0:	2320      	movs	r3, #32
 80122b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80122ba:	2330      	movs	r3, #48	; 0x30
 80122bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012480 <_vfiprintf_r+0x24c>
 80122c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122c4:	f04f 0901 	mov.w	r9, #1
 80122c8:	4623      	mov	r3, r4
 80122ca:	469a      	mov	sl, r3
 80122cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122d0:	b10a      	cbz	r2, 80122d6 <_vfiprintf_r+0xa2>
 80122d2:	2a25      	cmp	r2, #37	; 0x25
 80122d4:	d1f9      	bne.n	80122ca <_vfiprintf_r+0x96>
 80122d6:	ebba 0b04 	subs.w	fp, sl, r4
 80122da:	d00b      	beq.n	80122f4 <_vfiprintf_r+0xc0>
 80122dc:	465b      	mov	r3, fp
 80122de:	4622      	mov	r2, r4
 80122e0:	4629      	mov	r1, r5
 80122e2:	4630      	mov	r0, r6
 80122e4:	f7ff ff94 	bl	8012210 <__sfputs_r>
 80122e8:	3001      	adds	r0, #1
 80122ea:	f000 80aa 	beq.w	8012442 <_vfiprintf_r+0x20e>
 80122ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122f0:	445a      	add	r2, fp
 80122f2:	9209      	str	r2, [sp, #36]	; 0x24
 80122f4:	f89a 3000 	ldrb.w	r3, [sl]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	f000 80a2 	beq.w	8012442 <_vfiprintf_r+0x20e>
 80122fe:	2300      	movs	r3, #0
 8012300:	f04f 32ff 	mov.w	r2, #4294967295
 8012304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012308:	f10a 0a01 	add.w	sl, sl, #1
 801230c:	9304      	str	r3, [sp, #16]
 801230e:	9307      	str	r3, [sp, #28]
 8012310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012314:	931a      	str	r3, [sp, #104]	; 0x68
 8012316:	4654      	mov	r4, sl
 8012318:	2205      	movs	r2, #5
 801231a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801231e:	4858      	ldr	r0, [pc, #352]	; (8012480 <_vfiprintf_r+0x24c>)
 8012320:	f7ed ff66 	bl	80001f0 <memchr>
 8012324:	9a04      	ldr	r2, [sp, #16]
 8012326:	b9d8      	cbnz	r0, 8012360 <_vfiprintf_r+0x12c>
 8012328:	06d1      	lsls	r1, r2, #27
 801232a:	bf44      	itt	mi
 801232c:	2320      	movmi	r3, #32
 801232e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012332:	0713      	lsls	r3, r2, #28
 8012334:	bf44      	itt	mi
 8012336:	232b      	movmi	r3, #43	; 0x2b
 8012338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801233c:	f89a 3000 	ldrb.w	r3, [sl]
 8012340:	2b2a      	cmp	r3, #42	; 0x2a
 8012342:	d015      	beq.n	8012370 <_vfiprintf_r+0x13c>
 8012344:	9a07      	ldr	r2, [sp, #28]
 8012346:	4654      	mov	r4, sl
 8012348:	2000      	movs	r0, #0
 801234a:	f04f 0c0a 	mov.w	ip, #10
 801234e:	4621      	mov	r1, r4
 8012350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012354:	3b30      	subs	r3, #48	; 0x30
 8012356:	2b09      	cmp	r3, #9
 8012358:	d94e      	bls.n	80123f8 <_vfiprintf_r+0x1c4>
 801235a:	b1b0      	cbz	r0, 801238a <_vfiprintf_r+0x156>
 801235c:	9207      	str	r2, [sp, #28]
 801235e:	e014      	b.n	801238a <_vfiprintf_r+0x156>
 8012360:	eba0 0308 	sub.w	r3, r0, r8
 8012364:	fa09 f303 	lsl.w	r3, r9, r3
 8012368:	4313      	orrs	r3, r2
 801236a:	9304      	str	r3, [sp, #16]
 801236c:	46a2      	mov	sl, r4
 801236e:	e7d2      	b.n	8012316 <_vfiprintf_r+0xe2>
 8012370:	9b03      	ldr	r3, [sp, #12]
 8012372:	1d19      	adds	r1, r3, #4
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	9103      	str	r1, [sp, #12]
 8012378:	2b00      	cmp	r3, #0
 801237a:	bfbb      	ittet	lt
 801237c:	425b      	neglt	r3, r3
 801237e:	f042 0202 	orrlt.w	r2, r2, #2
 8012382:	9307      	strge	r3, [sp, #28]
 8012384:	9307      	strlt	r3, [sp, #28]
 8012386:	bfb8      	it	lt
 8012388:	9204      	strlt	r2, [sp, #16]
 801238a:	7823      	ldrb	r3, [r4, #0]
 801238c:	2b2e      	cmp	r3, #46	; 0x2e
 801238e:	d10c      	bne.n	80123aa <_vfiprintf_r+0x176>
 8012390:	7863      	ldrb	r3, [r4, #1]
 8012392:	2b2a      	cmp	r3, #42	; 0x2a
 8012394:	d135      	bne.n	8012402 <_vfiprintf_r+0x1ce>
 8012396:	9b03      	ldr	r3, [sp, #12]
 8012398:	1d1a      	adds	r2, r3, #4
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	9203      	str	r2, [sp, #12]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	bfb8      	it	lt
 80123a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80123a6:	3402      	adds	r4, #2
 80123a8:	9305      	str	r3, [sp, #20]
 80123aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012490 <_vfiprintf_r+0x25c>
 80123ae:	7821      	ldrb	r1, [r4, #0]
 80123b0:	2203      	movs	r2, #3
 80123b2:	4650      	mov	r0, sl
 80123b4:	f7ed ff1c 	bl	80001f0 <memchr>
 80123b8:	b140      	cbz	r0, 80123cc <_vfiprintf_r+0x198>
 80123ba:	2340      	movs	r3, #64	; 0x40
 80123bc:	eba0 000a 	sub.w	r0, r0, sl
 80123c0:	fa03 f000 	lsl.w	r0, r3, r0
 80123c4:	9b04      	ldr	r3, [sp, #16]
 80123c6:	4303      	orrs	r3, r0
 80123c8:	3401      	adds	r4, #1
 80123ca:	9304      	str	r3, [sp, #16]
 80123cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123d0:	482c      	ldr	r0, [pc, #176]	; (8012484 <_vfiprintf_r+0x250>)
 80123d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123d6:	2206      	movs	r2, #6
 80123d8:	f7ed ff0a 	bl	80001f0 <memchr>
 80123dc:	2800      	cmp	r0, #0
 80123de:	d03f      	beq.n	8012460 <_vfiprintf_r+0x22c>
 80123e0:	4b29      	ldr	r3, [pc, #164]	; (8012488 <_vfiprintf_r+0x254>)
 80123e2:	bb1b      	cbnz	r3, 801242c <_vfiprintf_r+0x1f8>
 80123e4:	9b03      	ldr	r3, [sp, #12]
 80123e6:	3307      	adds	r3, #7
 80123e8:	f023 0307 	bic.w	r3, r3, #7
 80123ec:	3308      	adds	r3, #8
 80123ee:	9303      	str	r3, [sp, #12]
 80123f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123f2:	443b      	add	r3, r7
 80123f4:	9309      	str	r3, [sp, #36]	; 0x24
 80123f6:	e767      	b.n	80122c8 <_vfiprintf_r+0x94>
 80123f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80123fc:	460c      	mov	r4, r1
 80123fe:	2001      	movs	r0, #1
 8012400:	e7a5      	b.n	801234e <_vfiprintf_r+0x11a>
 8012402:	2300      	movs	r3, #0
 8012404:	3401      	adds	r4, #1
 8012406:	9305      	str	r3, [sp, #20]
 8012408:	4619      	mov	r1, r3
 801240a:	f04f 0c0a 	mov.w	ip, #10
 801240e:	4620      	mov	r0, r4
 8012410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012414:	3a30      	subs	r2, #48	; 0x30
 8012416:	2a09      	cmp	r2, #9
 8012418:	d903      	bls.n	8012422 <_vfiprintf_r+0x1ee>
 801241a:	2b00      	cmp	r3, #0
 801241c:	d0c5      	beq.n	80123aa <_vfiprintf_r+0x176>
 801241e:	9105      	str	r1, [sp, #20]
 8012420:	e7c3      	b.n	80123aa <_vfiprintf_r+0x176>
 8012422:	fb0c 2101 	mla	r1, ip, r1, r2
 8012426:	4604      	mov	r4, r0
 8012428:	2301      	movs	r3, #1
 801242a:	e7f0      	b.n	801240e <_vfiprintf_r+0x1da>
 801242c:	ab03      	add	r3, sp, #12
 801242e:	9300      	str	r3, [sp, #0]
 8012430:	462a      	mov	r2, r5
 8012432:	4b16      	ldr	r3, [pc, #88]	; (801248c <_vfiprintf_r+0x258>)
 8012434:	a904      	add	r1, sp, #16
 8012436:	4630      	mov	r0, r6
 8012438:	f7fd fdd6 	bl	800ffe8 <_printf_float>
 801243c:	4607      	mov	r7, r0
 801243e:	1c78      	adds	r0, r7, #1
 8012440:	d1d6      	bne.n	80123f0 <_vfiprintf_r+0x1bc>
 8012442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012444:	07d9      	lsls	r1, r3, #31
 8012446:	d405      	bmi.n	8012454 <_vfiprintf_r+0x220>
 8012448:	89ab      	ldrh	r3, [r5, #12]
 801244a:	059a      	lsls	r2, r3, #22
 801244c:	d402      	bmi.n	8012454 <_vfiprintf_r+0x220>
 801244e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012450:	f000 faaf 	bl	80129b2 <__retarget_lock_release_recursive>
 8012454:	89ab      	ldrh	r3, [r5, #12]
 8012456:	065b      	lsls	r3, r3, #25
 8012458:	f53f af12 	bmi.w	8012280 <_vfiprintf_r+0x4c>
 801245c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801245e:	e711      	b.n	8012284 <_vfiprintf_r+0x50>
 8012460:	ab03      	add	r3, sp, #12
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	462a      	mov	r2, r5
 8012466:	4b09      	ldr	r3, [pc, #36]	; (801248c <_vfiprintf_r+0x258>)
 8012468:	a904      	add	r1, sp, #16
 801246a:	4630      	mov	r0, r6
 801246c:	f7fe f860 	bl	8010530 <_printf_i>
 8012470:	e7e4      	b.n	801243c <_vfiprintf_r+0x208>
 8012472:	bf00      	nop
 8012474:	08013664 	.word	0x08013664
 8012478:	08013684 	.word	0x08013684
 801247c:	08013644 	.word	0x08013644
 8012480:	080134ec 	.word	0x080134ec
 8012484:	080134f6 	.word	0x080134f6
 8012488:	0800ffe9 	.word	0x0800ffe9
 801248c:	08012211 	.word	0x08012211
 8012490:	080134f2 	.word	0x080134f2

08012494 <__swbuf_r>:
 8012494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012496:	460e      	mov	r6, r1
 8012498:	4614      	mov	r4, r2
 801249a:	4605      	mov	r5, r0
 801249c:	b118      	cbz	r0, 80124a6 <__swbuf_r+0x12>
 801249e:	6983      	ldr	r3, [r0, #24]
 80124a0:	b90b      	cbnz	r3, 80124a6 <__swbuf_r+0x12>
 80124a2:	f000 f9e7 	bl	8012874 <__sinit>
 80124a6:	4b21      	ldr	r3, [pc, #132]	; (801252c <__swbuf_r+0x98>)
 80124a8:	429c      	cmp	r4, r3
 80124aa:	d12b      	bne.n	8012504 <__swbuf_r+0x70>
 80124ac:	686c      	ldr	r4, [r5, #4]
 80124ae:	69a3      	ldr	r3, [r4, #24]
 80124b0:	60a3      	str	r3, [r4, #8]
 80124b2:	89a3      	ldrh	r3, [r4, #12]
 80124b4:	071a      	lsls	r2, r3, #28
 80124b6:	d52f      	bpl.n	8012518 <__swbuf_r+0x84>
 80124b8:	6923      	ldr	r3, [r4, #16]
 80124ba:	b36b      	cbz	r3, 8012518 <__swbuf_r+0x84>
 80124bc:	6923      	ldr	r3, [r4, #16]
 80124be:	6820      	ldr	r0, [r4, #0]
 80124c0:	1ac0      	subs	r0, r0, r3
 80124c2:	6963      	ldr	r3, [r4, #20]
 80124c4:	b2f6      	uxtb	r6, r6
 80124c6:	4283      	cmp	r3, r0
 80124c8:	4637      	mov	r7, r6
 80124ca:	dc04      	bgt.n	80124d6 <__swbuf_r+0x42>
 80124cc:	4621      	mov	r1, r4
 80124ce:	4628      	mov	r0, r5
 80124d0:	f000 f93c 	bl	801274c <_fflush_r>
 80124d4:	bb30      	cbnz	r0, 8012524 <__swbuf_r+0x90>
 80124d6:	68a3      	ldr	r3, [r4, #8]
 80124d8:	3b01      	subs	r3, #1
 80124da:	60a3      	str	r3, [r4, #8]
 80124dc:	6823      	ldr	r3, [r4, #0]
 80124de:	1c5a      	adds	r2, r3, #1
 80124e0:	6022      	str	r2, [r4, #0]
 80124e2:	701e      	strb	r6, [r3, #0]
 80124e4:	6963      	ldr	r3, [r4, #20]
 80124e6:	3001      	adds	r0, #1
 80124e8:	4283      	cmp	r3, r0
 80124ea:	d004      	beq.n	80124f6 <__swbuf_r+0x62>
 80124ec:	89a3      	ldrh	r3, [r4, #12]
 80124ee:	07db      	lsls	r3, r3, #31
 80124f0:	d506      	bpl.n	8012500 <__swbuf_r+0x6c>
 80124f2:	2e0a      	cmp	r6, #10
 80124f4:	d104      	bne.n	8012500 <__swbuf_r+0x6c>
 80124f6:	4621      	mov	r1, r4
 80124f8:	4628      	mov	r0, r5
 80124fa:	f000 f927 	bl	801274c <_fflush_r>
 80124fe:	b988      	cbnz	r0, 8012524 <__swbuf_r+0x90>
 8012500:	4638      	mov	r0, r7
 8012502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012504:	4b0a      	ldr	r3, [pc, #40]	; (8012530 <__swbuf_r+0x9c>)
 8012506:	429c      	cmp	r4, r3
 8012508:	d101      	bne.n	801250e <__swbuf_r+0x7a>
 801250a:	68ac      	ldr	r4, [r5, #8]
 801250c:	e7cf      	b.n	80124ae <__swbuf_r+0x1a>
 801250e:	4b09      	ldr	r3, [pc, #36]	; (8012534 <__swbuf_r+0xa0>)
 8012510:	429c      	cmp	r4, r3
 8012512:	bf08      	it	eq
 8012514:	68ec      	ldreq	r4, [r5, #12]
 8012516:	e7ca      	b.n	80124ae <__swbuf_r+0x1a>
 8012518:	4621      	mov	r1, r4
 801251a:	4628      	mov	r0, r5
 801251c:	f000 f81a 	bl	8012554 <__swsetup_r>
 8012520:	2800      	cmp	r0, #0
 8012522:	d0cb      	beq.n	80124bc <__swbuf_r+0x28>
 8012524:	f04f 37ff 	mov.w	r7, #4294967295
 8012528:	e7ea      	b.n	8012500 <__swbuf_r+0x6c>
 801252a:	bf00      	nop
 801252c:	08013664 	.word	0x08013664
 8012530:	08013684 	.word	0x08013684
 8012534:	08013644 	.word	0x08013644

08012538 <__ascii_wctomb>:
 8012538:	b149      	cbz	r1, 801254e <__ascii_wctomb+0x16>
 801253a:	2aff      	cmp	r2, #255	; 0xff
 801253c:	bf85      	ittet	hi
 801253e:	238a      	movhi	r3, #138	; 0x8a
 8012540:	6003      	strhi	r3, [r0, #0]
 8012542:	700a      	strbls	r2, [r1, #0]
 8012544:	f04f 30ff 	movhi.w	r0, #4294967295
 8012548:	bf98      	it	ls
 801254a:	2001      	movls	r0, #1
 801254c:	4770      	bx	lr
 801254e:	4608      	mov	r0, r1
 8012550:	4770      	bx	lr
	...

08012554 <__swsetup_r>:
 8012554:	4b32      	ldr	r3, [pc, #200]	; (8012620 <__swsetup_r+0xcc>)
 8012556:	b570      	push	{r4, r5, r6, lr}
 8012558:	681d      	ldr	r5, [r3, #0]
 801255a:	4606      	mov	r6, r0
 801255c:	460c      	mov	r4, r1
 801255e:	b125      	cbz	r5, 801256a <__swsetup_r+0x16>
 8012560:	69ab      	ldr	r3, [r5, #24]
 8012562:	b913      	cbnz	r3, 801256a <__swsetup_r+0x16>
 8012564:	4628      	mov	r0, r5
 8012566:	f000 f985 	bl	8012874 <__sinit>
 801256a:	4b2e      	ldr	r3, [pc, #184]	; (8012624 <__swsetup_r+0xd0>)
 801256c:	429c      	cmp	r4, r3
 801256e:	d10f      	bne.n	8012590 <__swsetup_r+0x3c>
 8012570:	686c      	ldr	r4, [r5, #4]
 8012572:	89a3      	ldrh	r3, [r4, #12]
 8012574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012578:	0719      	lsls	r1, r3, #28
 801257a:	d42c      	bmi.n	80125d6 <__swsetup_r+0x82>
 801257c:	06dd      	lsls	r5, r3, #27
 801257e:	d411      	bmi.n	80125a4 <__swsetup_r+0x50>
 8012580:	2309      	movs	r3, #9
 8012582:	6033      	str	r3, [r6, #0]
 8012584:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012588:	81a3      	strh	r3, [r4, #12]
 801258a:	f04f 30ff 	mov.w	r0, #4294967295
 801258e:	e03e      	b.n	801260e <__swsetup_r+0xba>
 8012590:	4b25      	ldr	r3, [pc, #148]	; (8012628 <__swsetup_r+0xd4>)
 8012592:	429c      	cmp	r4, r3
 8012594:	d101      	bne.n	801259a <__swsetup_r+0x46>
 8012596:	68ac      	ldr	r4, [r5, #8]
 8012598:	e7eb      	b.n	8012572 <__swsetup_r+0x1e>
 801259a:	4b24      	ldr	r3, [pc, #144]	; (801262c <__swsetup_r+0xd8>)
 801259c:	429c      	cmp	r4, r3
 801259e:	bf08      	it	eq
 80125a0:	68ec      	ldreq	r4, [r5, #12]
 80125a2:	e7e6      	b.n	8012572 <__swsetup_r+0x1e>
 80125a4:	0758      	lsls	r0, r3, #29
 80125a6:	d512      	bpl.n	80125ce <__swsetup_r+0x7a>
 80125a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80125aa:	b141      	cbz	r1, 80125be <__swsetup_r+0x6a>
 80125ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80125b0:	4299      	cmp	r1, r3
 80125b2:	d002      	beq.n	80125ba <__swsetup_r+0x66>
 80125b4:	4630      	mov	r0, r6
 80125b6:	f7ff fb31 	bl	8011c1c <_free_r>
 80125ba:	2300      	movs	r3, #0
 80125bc:	6363      	str	r3, [r4, #52]	; 0x34
 80125be:	89a3      	ldrh	r3, [r4, #12]
 80125c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80125c4:	81a3      	strh	r3, [r4, #12]
 80125c6:	2300      	movs	r3, #0
 80125c8:	6063      	str	r3, [r4, #4]
 80125ca:	6923      	ldr	r3, [r4, #16]
 80125cc:	6023      	str	r3, [r4, #0]
 80125ce:	89a3      	ldrh	r3, [r4, #12]
 80125d0:	f043 0308 	orr.w	r3, r3, #8
 80125d4:	81a3      	strh	r3, [r4, #12]
 80125d6:	6923      	ldr	r3, [r4, #16]
 80125d8:	b94b      	cbnz	r3, 80125ee <__swsetup_r+0x9a>
 80125da:	89a3      	ldrh	r3, [r4, #12]
 80125dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80125e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125e4:	d003      	beq.n	80125ee <__swsetup_r+0x9a>
 80125e6:	4621      	mov	r1, r4
 80125e8:	4630      	mov	r0, r6
 80125ea:	f000 fa09 	bl	8012a00 <__smakebuf_r>
 80125ee:	89a0      	ldrh	r0, [r4, #12]
 80125f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80125f4:	f010 0301 	ands.w	r3, r0, #1
 80125f8:	d00a      	beq.n	8012610 <__swsetup_r+0xbc>
 80125fa:	2300      	movs	r3, #0
 80125fc:	60a3      	str	r3, [r4, #8]
 80125fe:	6963      	ldr	r3, [r4, #20]
 8012600:	425b      	negs	r3, r3
 8012602:	61a3      	str	r3, [r4, #24]
 8012604:	6923      	ldr	r3, [r4, #16]
 8012606:	b943      	cbnz	r3, 801261a <__swsetup_r+0xc6>
 8012608:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801260c:	d1ba      	bne.n	8012584 <__swsetup_r+0x30>
 801260e:	bd70      	pop	{r4, r5, r6, pc}
 8012610:	0781      	lsls	r1, r0, #30
 8012612:	bf58      	it	pl
 8012614:	6963      	ldrpl	r3, [r4, #20]
 8012616:	60a3      	str	r3, [r4, #8]
 8012618:	e7f4      	b.n	8012604 <__swsetup_r+0xb0>
 801261a:	2000      	movs	r0, #0
 801261c:	e7f7      	b.n	801260e <__swsetup_r+0xba>
 801261e:	bf00      	nop
 8012620:	2000013c 	.word	0x2000013c
 8012624:	08013664 	.word	0x08013664
 8012628:	08013684 	.word	0x08013684
 801262c:	08013644 	.word	0x08013644

08012630 <abort>:
 8012630:	b508      	push	{r3, lr}
 8012632:	2006      	movs	r0, #6
 8012634:	f000 fa54 	bl	8012ae0 <raise>
 8012638:	2001      	movs	r0, #1
 801263a:	f7f0 fb77 	bl	8002d2c <_exit>
	...

08012640 <__sflush_r>:
 8012640:	898a      	ldrh	r2, [r1, #12]
 8012642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012646:	4605      	mov	r5, r0
 8012648:	0710      	lsls	r0, r2, #28
 801264a:	460c      	mov	r4, r1
 801264c:	d458      	bmi.n	8012700 <__sflush_r+0xc0>
 801264e:	684b      	ldr	r3, [r1, #4]
 8012650:	2b00      	cmp	r3, #0
 8012652:	dc05      	bgt.n	8012660 <__sflush_r+0x20>
 8012654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012656:	2b00      	cmp	r3, #0
 8012658:	dc02      	bgt.n	8012660 <__sflush_r+0x20>
 801265a:	2000      	movs	r0, #0
 801265c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012662:	2e00      	cmp	r6, #0
 8012664:	d0f9      	beq.n	801265a <__sflush_r+0x1a>
 8012666:	2300      	movs	r3, #0
 8012668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801266c:	682f      	ldr	r7, [r5, #0]
 801266e:	602b      	str	r3, [r5, #0]
 8012670:	d032      	beq.n	80126d8 <__sflush_r+0x98>
 8012672:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012674:	89a3      	ldrh	r3, [r4, #12]
 8012676:	075a      	lsls	r2, r3, #29
 8012678:	d505      	bpl.n	8012686 <__sflush_r+0x46>
 801267a:	6863      	ldr	r3, [r4, #4]
 801267c:	1ac0      	subs	r0, r0, r3
 801267e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012680:	b10b      	cbz	r3, 8012686 <__sflush_r+0x46>
 8012682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012684:	1ac0      	subs	r0, r0, r3
 8012686:	2300      	movs	r3, #0
 8012688:	4602      	mov	r2, r0
 801268a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801268c:	6a21      	ldr	r1, [r4, #32]
 801268e:	4628      	mov	r0, r5
 8012690:	47b0      	blx	r6
 8012692:	1c43      	adds	r3, r0, #1
 8012694:	89a3      	ldrh	r3, [r4, #12]
 8012696:	d106      	bne.n	80126a6 <__sflush_r+0x66>
 8012698:	6829      	ldr	r1, [r5, #0]
 801269a:	291d      	cmp	r1, #29
 801269c:	d82c      	bhi.n	80126f8 <__sflush_r+0xb8>
 801269e:	4a2a      	ldr	r2, [pc, #168]	; (8012748 <__sflush_r+0x108>)
 80126a0:	40ca      	lsrs	r2, r1
 80126a2:	07d6      	lsls	r6, r2, #31
 80126a4:	d528      	bpl.n	80126f8 <__sflush_r+0xb8>
 80126a6:	2200      	movs	r2, #0
 80126a8:	6062      	str	r2, [r4, #4]
 80126aa:	04d9      	lsls	r1, r3, #19
 80126ac:	6922      	ldr	r2, [r4, #16]
 80126ae:	6022      	str	r2, [r4, #0]
 80126b0:	d504      	bpl.n	80126bc <__sflush_r+0x7c>
 80126b2:	1c42      	adds	r2, r0, #1
 80126b4:	d101      	bne.n	80126ba <__sflush_r+0x7a>
 80126b6:	682b      	ldr	r3, [r5, #0]
 80126b8:	b903      	cbnz	r3, 80126bc <__sflush_r+0x7c>
 80126ba:	6560      	str	r0, [r4, #84]	; 0x54
 80126bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126be:	602f      	str	r7, [r5, #0]
 80126c0:	2900      	cmp	r1, #0
 80126c2:	d0ca      	beq.n	801265a <__sflush_r+0x1a>
 80126c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126c8:	4299      	cmp	r1, r3
 80126ca:	d002      	beq.n	80126d2 <__sflush_r+0x92>
 80126cc:	4628      	mov	r0, r5
 80126ce:	f7ff faa5 	bl	8011c1c <_free_r>
 80126d2:	2000      	movs	r0, #0
 80126d4:	6360      	str	r0, [r4, #52]	; 0x34
 80126d6:	e7c1      	b.n	801265c <__sflush_r+0x1c>
 80126d8:	6a21      	ldr	r1, [r4, #32]
 80126da:	2301      	movs	r3, #1
 80126dc:	4628      	mov	r0, r5
 80126de:	47b0      	blx	r6
 80126e0:	1c41      	adds	r1, r0, #1
 80126e2:	d1c7      	bne.n	8012674 <__sflush_r+0x34>
 80126e4:	682b      	ldr	r3, [r5, #0]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d0c4      	beq.n	8012674 <__sflush_r+0x34>
 80126ea:	2b1d      	cmp	r3, #29
 80126ec:	d001      	beq.n	80126f2 <__sflush_r+0xb2>
 80126ee:	2b16      	cmp	r3, #22
 80126f0:	d101      	bne.n	80126f6 <__sflush_r+0xb6>
 80126f2:	602f      	str	r7, [r5, #0]
 80126f4:	e7b1      	b.n	801265a <__sflush_r+0x1a>
 80126f6:	89a3      	ldrh	r3, [r4, #12]
 80126f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126fc:	81a3      	strh	r3, [r4, #12]
 80126fe:	e7ad      	b.n	801265c <__sflush_r+0x1c>
 8012700:	690f      	ldr	r7, [r1, #16]
 8012702:	2f00      	cmp	r7, #0
 8012704:	d0a9      	beq.n	801265a <__sflush_r+0x1a>
 8012706:	0793      	lsls	r3, r2, #30
 8012708:	680e      	ldr	r6, [r1, #0]
 801270a:	bf08      	it	eq
 801270c:	694b      	ldreq	r3, [r1, #20]
 801270e:	600f      	str	r7, [r1, #0]
 8012710:	bf18      	it	ne
 8012712:	2300      	movne	r3, #0
 8012714:	eba6 0807 	sub.w	r8, r6, r7
 8012718:	608b      	str	r3, [r1, #8]
 801271a:	f1b8 0f00 	cmp.w	r8, #0
 801271e:	dd9c      	ble.n	801265a <__sflush_r+0x1a>
 8012720:	6a21      	ldr	r1, [r4, #32]
 8012722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012724:	4643      	mov	r3, r8
 8012726:	463a      	mov	r2, r7
 8012728:	4628      	mov	r0, r5
 801272a:	47b0      	blx	r6
 801272c:	2800      	cmp	r0, #0
 801272e:	dc06      	bgt.n	801273e <__sflush_r+0xfe>
 8012730:	89a3      	ldrh	r3, [r4, #12]
 8012732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012736:	81a3      	strh	r3, [r4, #12]
 8012738:	f04f 30ff 	mov.w	r0, #4294967295
 801273c:	e78e      	b.n	801265c <__sflush_r+0x1c>
 801273e:	4407      	add	r7, r0
 8012740:	eba8 0800 	sub.w	r8, r8, r0
 8012744:	e7e9      	b.n	801271a <__sflush_r+0xda>
 8012746:	bf00      	nop
 8012748:	20400001 	.word	0x20400001

0801274c <_fflush_r>:
 801274c:	b538      	push	{r3, r4, r5, lr}
 801274e:	690b      	ldr	r3, [r1, #16]
 8012750:	4605      	mov	r5, r0
 8012752:	460c      	mov	r4, r1
 8012754:	b913      	cbnz	r3, 801275c <_fflush_r+0x10>
 8012756:	2500      	movs	r5, #0
 8012758:	4628      	mov	r0, r5
 801275a:	bd38      	pop	{r3, r4, r5, pc}
 801275c:	b118      	cbz	r0, 8012766 <_fflush_r+0x1a>
 801275e:	6983      	ldr	r3, [r0, #24]
 8012760:	b90b      	cbnz	r3, 8012766 <_fflush_r+0x1a>
 8012762:	f000 f887 	bl	8012874 <__sinit>
 8012766:	4b14      	ldr	r3, [pc, #80]	; (80127b8 <_fflush_r+0x6c>)
 8012768:	429c      	cmp	r4, r3
 801276a:	d11b      	bne.n	80127a4 <_fflush_r+0x58>
 801276c:	686c      	ldr	r4, [r5, #4]
 801276e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d0ef      	beq.n	8012756 <_fflush_r+0xa>
 8012776:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012778:	07d0      	lsls	r0, r2, #31
 801277a:	d404      	bmi.n	8012786 <_fflush_r+0x3a>
 801277c:	0599      	lsls	r1, r3, #22
 801277e:	d402      	bmi.n	8012786 <_fflush_r+0x3a>
 8012780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012782:	f000 f915 	bl	80129b0 <__retarget_lock_acquire_recursive>
 8012786:	4628      	mov	r0, r5
 8012788:	4621      	mov	r1, r4
 801278a:	f7ff ff59 	bl	8012640 <__sflush_r>
 801278e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012790:	07da      	lsls	r2, r3, #31
 8012792:	4605      	mov	r5, r0
 8012794:	d4e0      	bmi.n	8012758 <_fflush_r+0xc>
 8012796:	89a3      	ldrh	r3, [r4, #12]
 8012798:	059b      	lsls	r3, r3, #22
 801279a:	d4dd      	bmi.n	8012758 <_fflush_r+0xc>
 801279c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801279e:	f000 f908 	bl	80129b2 <__retarget_lock_release_recursive>
 80127a2:	e7d9      	b.n	8012758 <_fflush_r+0xc>
 80127a4:	4b05      	ldr	r3, [pc, #20]	; (80127bc <_fflush_r+0x70>)
 80127a6:	429c      	cmp	r4, r3
 80127a8:	d101      	bne.n	80127ae <_fflush_r+0x62>
 80127aa:	68ac      	ldr	r4, [r5, #8]
 80127ac:	e7df      	b.n	801276e <_fflush_r+0x22>
 80127ae:	4b04      	ldr	r3, [pc, #16]	; (80127c0 <_fflush_r+0x74>)
 80127b0:	429c      	cmp	r4, r3
 80127b2:	bf08      	it	eq
 80127b4:	68ec      	ldreq	r4, [r5, #12]
 80127b6:	e7da      	b.n	801276e <_fflush_r+0x22>
 80127b8:	08013664 	.word	0x08013664
 80127bc:	08013684 	.word	0x08013684
 80127c0:	08013644 	.word	0x08013644

080127c4 <std>:
 80127c4:	2300      	movs	r3, #0
 80127c6:	b510      	push	{r4, lr}
 80127c8:	4604      	mov	r4, r0
 80127ca:	e9c0 3300 	strd	r3, r3, [r0]
 80127ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80127d2:	6083      	str	r3, [r0, #8]
 80127d4:	8181      	strh	r1, [r0, #12]
 80127d6:	6643      	str	r3, [r0, #100]	; 0x64
 80127d8:	81c2      	strh	r2, [r0, #14]
 80127da:	6183      	str	r3, [r0, #24]
 80127dc:	4619      	mov	r1, r3
 80127de:	2208      	movs	r2, #8
 80127e0:	305c      	adds	r0, #92	; 0x5c
 80127e2:	f7fd fb59 	bl	800fe98 <memset>
 80127e6:	4b05      	ldr	r3, [pc, #20]	; (80127fc <std+0x38>)
 80127e8:	6263      	str	r3, [r4, #36]	; 0x24
 80127ea:	4b05      	ldr	r3, [pc, #20]	; (8012800 <std+0x3c>)
 80127ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80127ee:	4b05      	ldr	r3, [pc, #20]	; (8012804 <std+0x40>)
 80127f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80127f2:	4b05      	ldr	r3, [pc, #20]	; (8012808 <std+0x44>)
 80127f4:	6224      	str	r4, [r4, #32]
 80127f6:	6323      	str	r3, [r4, #48]	; 0x30
 80127f8:	bd10      	pop	{r4, pc}
 80127fa:	bf00      	nop
 80127fc:	08012b19 	.word	0x08012b19
 8012800:	08012b3b 	.word	0x08012b3b
 8012804:	08012b73 	.word	0x08012b73
 8012808:	08012b97 	.word	0x08012b97

0801280c <_cleanup_r>:
 801280c:	4901      	ldr	r1, [pc, #4]	; (8012814 <_cleanup_r+0x8>)
 801280e:	f000 b8af 	b.w	8012970 <_fwalk_reent>
 8012812:	bf00      	nop
 8012814:	0801274d 	.word	0x0801274d

08012818 <__sfmoreglue>:
 8012818:	b570      	push	{r4, r5, r6, lr}
 801281a:	2268      	movs	r2, #104	; 0x68
 801281c:	1e4d      	subs	r5, r1, #1
 801281e:	4355      	muls	r5, r2
 8012820:	460e      	mov	r6, r1
 8012822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012826:	f7ff fa65 	bl	8011cf4 <_malloc_r>
 801282a:	4604      	mov	r4, r0
 801282c:	b140      	cbz	r0, 8012840 <__sfmoreglue+0x28>
 801282e:	2100      	movs	r1, #0
 8012830:	e9c0 1600 	strd	r1, r6, [r0]
 8012834:	300c      	adds	r0, #12
 8012836:	60a0      	str	r0, [r4, #8]
 8012838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801283c:	f7fd fb2c 	bl	800fe98 <memset>
 8012840:	4620      	mov	r0, r4
 8012842:	bd70      	pop	{r4, r5, r6, pc}

08012844 <__sfp_lock_acquire>:
 8012844:	4801      	ldr	r0, [pc, #4]	; (801284c <__sfp_lock_acquire+0x8>)
 8012846:	f000 b8b3 	b.w	80129b0 <__retarget_lock_acquire_recursive>
 801284a:	bf00      	nop
 801284c:	20003391 	.word	0x20003391

08012850 <__sfp_lock_release>:
 8012850:	4801      	ldr	r0, [pc, #4]	; (8012858 <__sfp_lock_release+0x8>)
 8012852:	f000 b8ae 	b.w	80129b2 <__retarget_lock_release_recursive>
 8012856:	bf00      	nop
 8012858:	20003391 	.word	0x20003391

0801285c <__sinit_lock_acquire>:
 801285c:	4801      	ldr	r0, [pc, #4]	; (8012864 <__sinit_lock_acquire+0x8>)
 801285e:	f000 b8a7 	b.w	80129b0 <__retarget_lock_acquire_recursive>
 8012862:	bf00      	nop
 8012864:	20003392 	.word	0x20003392

08012868 <__sinit_lock_release>:
 8012868:	4801      	ldr	r0, [pc, #4]	; (8012870 <__sinit_lock_release+0x8>)
 801286a:	f000 b8a2 	b.w	80129b2 <__retarget_lock_release_recursive>
 801286e:	bf00      	nop
 8012870:	20003392 	.word	0x20003392

08012874 <__sinit>:
 8012874:	b510      	push	{r4, lr}
 8012876:	4604      	mov	r4, r0
 8012878:	f7ff fff0 	bl	801285c <__sinit_lock_acquire>
 801287c:	69a3      	ldr	r3, [r4, #24]
 801287e:	b11b      	cbz	r3, 8012888 <__sinit+0x14>
 8012880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012884:	f7ff bff0 	b.w	8012868 <__sinit_lock_release>
 8012888:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801288c:	6523      	str	r3, [r4, #80]	; 0x50
 801288e:	4b13      	ldr	r3, [pc, #76]	; (80128dc <__sinit+0x68>)
 8012890:	4a13      	ldr	r2, [pc, #76]	; (80128e0 <__sinit+0x6c>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	62a2      	str	r2, [r4, #40]	; 0x28
 8012896:	42a3      	cmp	r3, r4
 8012898:	bf04      	itt	eq
 801289a:	2301      	moveq	r3, #1
 801289c:	61a3      	streq	r3, [r4, #24]
 801289e:	4620      	mov	r0, r4
 80128a0:	f000 f820 	bl	80128e4 <__sfp>
 80128a4:	6060      	str	r0, [r4, #4]
 80128a6:	4620      	mov	r0, r4
 80128a8:	f000 f81c 	bl	80128e4 <__sfp>
 80128ac:	60a0      	str	r0, [r4, #8]
 80128ae:	4620      	mov	r0, r4
 80128b0:	f000 f818 	bl	80128e4 <__sfp>
 80128b4:	2200      	movs	r2, #0
 80128b6:	60e0      	str	r0, [r4, #12]
 80128b8:	2104      	movs	r1, #4
 80128ba:	6860      	ldr	r0, [r4, #4]
 80128bc:	f7ff ff82 	bl	80127c4 <std>
 80128c0:	68a0      	ldr	r0, [r4, #8]
 80128c2:	2201      	movs	r2, #1
 80128c4:	2109      	movs	r1, #9
 80128c6:	f7ff ff7d 	bl	80127c4 <std>
 80128ca:	68e0      	ldr	r0, [r4, #12]
 80128cc:	2202      	movs	r2, #2
 80128ce:	2112      	movs	r1, #18
 80128d0:	f7ff ff78 	bl	80127c4 <std>
 80128d4:	2301      	movs	r3, #1
 80128d6:	61a3      	str	r3, [r4, #24]
 80128d8:	e7d2      	b.n	8012880 <__sinit+0xc>
 80128da:	bf00      	nop
 80128dc:	080132cc 	.word	0x080132cc
 80128e0:	0801280d 	.word	0x0801280d

080128e4 <__sfp>:
 80128e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128e6:	4607      	mov	r7, r0
 80128e8:	f7ff ffac 	bl	8012844 <__sfp_lock_acquire>
 80128ec:	4b1e      	ldr	r3, [pc, #120]	; (8012968 <__sfp+0x84>)
 80128ee:	681e      	ldr	r6, [r3, #0]
 80128f0:	69b3      	ldr	r3, [r6, #24]
 80128f2:	b913      	cbnz	r3, 80128fa <__sfp+0x16>
 80128f4:	4630      	mov	r0, r6
 80128f6:	f7ff ffbd 	bl	8012874 <__sinit>
 80128fa:	3648      	adds	r6, #72	; 0x48
 80128fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012900:	3b01      	subs	r3, #1
 8012902:	d503      	bpl.n	801290c <__sfp+0x28>
 8012904:	6833      	ldr	r3, [r6, #0]
 8012906:	b30b      	cbz	r3, 801294c <__sfp+0x68>
 8012908:	6836      	ldr	r6, [r6, #0]
 801290a:	e7f7      	b.n	80128fc <__sfp+0x18>
 801290c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012910:	b9d5      	cbnz	r5, 8012948 <__sfp+0x64>
 8012912:	4b16      	ldr	r3, [pc, #88]	; (801296c <__sfp+0x88>)
 8012914:	60e3      	str	r3, [r4, #12]
 8012916:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801291a:	6665      	str	r5, [r4, #100]	; 0x64
 801291c:	f000 f847 	bl	80129ae <__retarget_lock_init_recursive>
 8012920:	f7ff ff96 	bl	8012850 <__sfp_lock_release>
 8012924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801292c:	6025      	str	r5, [r4, #0]
 801292e:	61a5      	str	r5, [r4, #24]
 8012930:	2208      	movs	r2, #8
 8012932:	4629      	mov	r1, r5
 8012934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012938:	f7fd faae 	bl	800fe98 <memset>
 801293c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012944:	4620      	mov	r0, r4
 8012946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012948:	3468      	adds	r4, #104	; 0x68
 801294a:	e7d9      	b.n	8012900 <__sfp+0x1c>
 801294c:	2104      	movs	r1, #4
 801294e:	4638      	mov	r0, r7
 8012950:	f7ff ff62 	bl	8012818 <__sfmoreglue>
 8012954:	4604      	mov	r4, r0
 8012956:	6030      	str	r0, [r6, #0]
 8012958:	2800      	cmp	r0, #0
 801295a:	d1d5      	bne.n	8012908 <__sfp+0x24>
 801295c:	f7ff ff78 	bl	8012850 <__sfp_lock_release>
 8012960:	230c      	movs	r3, #12
 8012962:	603b      	str	r3, [r7, #0]
 8012964:	e7ee      	b.n	8012944 <__sfp+0x60>
 8012966:	bf00      	nop
 8012968:	080132cc 	.word	0x080132cc
 801296c:	ffff0001 	.word	0xffff0001

08012970 <_fwalk_reent>:
 8012970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012974:	4606      	mov	r6, r0
 8012976:	4688      	mov	r8, r1
 8012978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801297c:	2700      	movs	r7, #0
 801297e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012982:	f1b9 0901 	subs.w	r9, r9, #1
 8012986:	d505      	bpl.n	8012994 <_fwalk_reent+0x24>
 8012988:	6824      	ldr	r4, [r4, #0]
 801298a:	2c00      	cmp	r4, #0
 801298c:	d1f7      	bne.n	801297e <_fwalk_reent+0xe>
 801298e:	4638      	mov	r0, r7
 8012990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012994:	89ab      	ldrh	r3, [r5, #12]
 8012996:	2b01      	cmp	r3, #1
 8012998:	d907      	bls.n	80129aa <_fwalk_reent+0x3a>
 801299a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801299e:	3301      	adds	r3, #1
 80129a0:	d003      	beq.n	80129aa <_fwalk_reent+0x3a>
 80129a2:	4629      	mov	r1, r5
 80129a4:	4630      	mov	r0, r6
 80129a6:	47c0      	blx	r8
 80129a8:	4307      	orrs	r7, r0
 80129aa:	3568      	adds	r5, #104	; 0x68
 80129ac:	e7e9      	b.n	8012982 <_fwalk_reent+0x12>

080129ae <__retarget_lock_init_recursive>:
 80129ae:	4770      	bx	lr

080129b0 <__retarget_lock_acquire_recursive>:
 80129b0:	4770      	bx	lr

080129b2 <__retarget_lock_release_recursive>:
 80129b2:	4770      	bx	lr

080129b4 <__swhatbuf_r>:
 80129b4:	b570      	push	{r4, r5, r6, lr}
 80129b6:	460e      	mov	r6, r1
 80129b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129bc:	2900      	cmp	r1, #0
 80129be:	b096      	sub	sp, #88	; 0x58
 80129c0:	4614      	mov	r4, r2
 80129c2:	461d      	mov	r5, r3
 80129c4:	da08      	bge.n	80129d8 <__swhatbuf_r+0x24>
 80129c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80129ca:	2200      	movs	r2, #0
 80129cc:	602a      	str	r2, [r5, #0]
 80129ce:	061a      	lsls	r2, r3, #24
 80129d0:	d410      	bmi.n	80129f4 <__swhatbuf_r+0x40>
 80129d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80129d6:	e00e      	b.n	80129f6 <__swhatbuf_r+0x42>
 80129d8:	466a      	mov	r2, sp
 80129da:	f000 f903 	bl	8012be4 <_fstat_r>
 80129de:	2800      	cmp	r0, #0
 80129e0:	dbf1      	blt.n	80129c6 <__swhatbuf_r+0x12>
 80129e2:	9a01      	ldr	r2, [sp, #4]
 80129e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80129e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80129ec:	425a      	negs	r2, r3
 80129ee:	415a      	adcs	r2, r3
 80129f0:	602a      	str	r2, [r5, #0]
 80129f2:	e7ee      	b.n	80129d2 <__swhatbuf_r+0x1e>
 80129f4:	2340      	movs	r3, #64	; 0x40
 80129f6:	2000      	movs	r0, #0
 80129f8:	6023      	str	r3, [r4, #0]
 80129fa:	b016      	add	sp, #88	; 0x58
 80129fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08012a00 <__smakebuf_r>:
 8012a00:	898b      	ldrh	r3, [r1, #12]
 8012a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a04:	079d      	lsls	r5, r3, #30
 8012a06:	4606      	mov	r6, r0
 8012a08:	460c      	mov	r4, r1
 8012a0a:	d507      	bpl.n	8012a1c <__smakebuf_r+0x1c>
 8012a0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a10:	6023      	str	r3, [r4, #0]
 8012a12:	6123      	str	r3, [r4, #16]
 8012a14:	2301      	movs	r3, #1
 8012a16:	6163      	str	r3, [r4, #20]
 8012a18:	b002      	add	sp, #8
 8012a1a:	bd70      	pop	{r4, r5, r6, pc}
 8012a1c:	ab01      	add	r3, sp, #4
 8012a1e:	466a      	mov	r2, sp
 8012a20:	f7ff ffc8 	bl	80129b4 <__swhatbuf_r>
 8012a24:	9900      	ldr	r1, [sp, #0]
 8012a26:	4605      	mov	r5, r0
 8012a28:	4630      	mov	r0, r6
 8012a2a:	f7ff f963 	bl	8011cf4 <_malloc_r>
 8012a2e:	b948      	cbnz	r0, 8012a44 <__smakebuf_r+0x44>
 8012a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a34:	059a      	lsls	r2, r3, #22
 8012a36:	d4ef      	bmi.n	8012a18 <__smakebuf_r+0x18>
 8012a38:	f023 0303 	bic.w	r3, r3, #3
 8012a3c:	f043 0302 	orr.w	r3, r3, #2
 8012a40:	81a3      	strh	r3, [r4, #12]
 8012a42:	e7e3      	b.n	8012a0c <__smakebuf_r+0xc>
 8012a44:	4b0d      	ldr	r3, [pc, #52]	; (8012a7c <__smakebuf_r+0x7c>)
 8012a46:	62b3      	str	r3, [r6, #40]	; 0x28
 8012a48:	89a3      	ldrh	r3, [r4, #12]
 8012a4a:	6020      	str	r0, [r4, #0]
 8012a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a50:	81a3      	strh	r3, [r4, #12]
 8012a52:	9b00      	ldr	r3, [sp, #0]
 8012a54:	6163      	str	r3, [r4, #20]
 8012a56:	9b01      	ldr	r3, [sp, #4]
 8012a58:	6120      	str	r0, [r4, #16]
 8012a5a:	b15b      	cbz	r3, 8012a74 <__smakebuf_r+0x74>
 8012a5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a60:	4630      	mov	r0, r6
 8012a62:	f000 f8d1 	bl	8012c08 <_isatty_r>
 8012a66:	b128      	cbz	r0, 8012a74 <__smakebuf_r+0x74>
 8012a68:	89a3      	ldrh	r3, [r4, #12]
 8012a6a:	f023 0303 	bic.w	r3, r3, #3
 8012a6e:	f043 0301 	orr.w	r3, r3, #1
 8012a72:	81a3      	strh	r3, [r4, #12]
 8012a74:	89a0      	ldrh	r0, [r4, #12]
 8012a76:	4305      	orrs	r5, r0
 8012a78:	81a5      	strh	r5, [r4, #12]
 8012a7a:	e7cd      	b.n	8012a18 <__smakebuf_r+0x18>
 8012a7c:	0801280d 	.word	0x0801280d

08012a80 <_malloc_usable_size_r>:
 8012a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a84:	1f18      	subs	r0, r3, #4
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	bfbc      	itt	lt
 8012a8a:	580b      	ldrlt	r3, [r1, r0]
 8012a8c:	18c0      	addlt	r0, r0, r3
 8012a8e:	4770      	bx	lr

08012a90 <_raise_r>:
 8012a90:	291f      	cmp	r1, #31
 8012a92:	b538      	push	{r3, r4, r5, lr}
 8012a94:	4604      	mov	r4, r0
 8012a96:	460d      	mov	r5, r1
 8012a98:	d904      	bls.n	8012aa4 <_raise_r+0x14>
 8012a9a:	2316      	movs	r3, #22
 8012a9c:	6003      	str	r3, [r0, #0]
 8012a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa2:	bd38      	pop	{r3, r4, r5, pc}
 8012aa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012aa6:	b112      	cbz	r2, 8012aae <_raise_r+0x1e>
 8012aa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012aac:	b94b      	cbnz	r3, 8012ac2 <_raise_r+0x32>
 8012aae:	4620      	mov	r0, r4
 8012ab0:	f000 f830 	bl	8012b14 <_getpid_r>
 8012ab4:	462a      	mov	r2, r5
 8012ab6:	4601      	mov	r1, r0
 8012ab8:	4620      	mov	r0, r4
 8012aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012abe:	f000 b817 	b.w	8012af0 <_kill_r>
 8012ac2:	2b01      	cmp	r3, #1
 8012ac4:	d00a      	beq.n	8012adc <_raise_r+0x4c>
 8012ac6:	1c59      	adds	r1, r3, #1
 8012ac8:	d103      	bne.n	8012ad2 <_raise_r+0x42>
 8012aca:	2316      	movs	r3, #22
 8012acc:	6003      	str	r3, [r0, #0]
 8012ace:	2001      	movs	r0, #1
 8012ad0:	e7e7      	b.n	8012aa2 <_raise_r+0x12>
 8012ad2:	2400      	movs	r4, #0
 8012ad4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012ad8:	4628      	mov	r0, r5
 8012ada:	4798      	blx	r3
 8012adc:	2000      	movs	r0, #0
 8012ade:	e7e0      	b.n	8012aa2 <_raise_r+0x12>

08012ae0 <raise>:
 8012ae0:	4b02      	ldr	r3, [pc, #8]	; (8012aec <raise+0xc>)
 8012ae2:	4601      	mov	r1, r0
 8012ae4:	6818      	ldr	r0, [r3, #0]
 8012ae6:	f7ff bfd3 	b.w	8012a90 <_raise_r>
 8012aea:	bf00      	nop
 8012aec:	2000013c 	.word	0x2000013c

08012af0 <_kill_r>:
 8012af0:	b538      	push	{r3, r4, r5, lr}
 8012af2:	4d07      	ldr	r5, [pc, #28]	; (8012b10 <_kill_r+0x20>)
 8012af4:	2300      	movs	r3, #0
 8012af6:	4604      	mov	r4, r0
 8012af8:	4608      	mov	r0, r1
 8012afa:	4611      	mov	r1, r2
 8012afc:	602b      	str	r3, [r5, #0]
 8012afe:	f7f0 f905 	bl	8002d0c <_kill>
 8012b02:	1c43      	adds	r3, r0, #1
 8012b04:	d102      	bne.n	8012b0c <_kill_r+0x1c>
 8012b06:	682b      	ldr	r3, [r5, #0]
 8012b08:	b103      	cbz	r3, 8012b0c <_kill_r+0x1c>
 8012b0a:	6023      	str	r3, [r4, #0]
 8012b0c:	bd38      	pop	{r3, r4, r5, pc}
 8012b0e:	bf00      	nop
 8012b10:	2000338c 	.word	0x2000338c

08012b14 <_getpid_r>:
 8012b14:	f7f0 b8f2 	b.w	8002cfc <_getpid>

08012b18 <__sread>:
 8012b18:	b510      	push	{r4, lr}
 8012b1a:	460c      	mov	r4, r1
 8012b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b20:	f000 f894 	bl	8012c4c <_read_r>
 8012b24:	2800      	cmp	r0, #0
 8012b26:	bfab      	itete	ge
 8012b28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012b2a:	89a3      	ldrhlt	r3, [r4, #12]
 8012b2c:	181b      	addge	r3, r3, r0
 8012b2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012b32:	bfac      	ite	ge
 8012b34:	6563      	strge	r3, [r4, #84]	; 0x54
 8012b36:	81a3      	strhlt	r3, [r4, #12]
 8012b38:	bd10      	pop	{r4, pc}

08012b3a <__swrite>:
 8012b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b3e:	461f      	mov	r7, r3
 8012b40:	898b      	ldrh	r3, [r1, #12]
 8012b42:	05db      	lsls	r3, r3, #23
 8012b44:	4605      	mov	r5, r0
 8012b46:	460c      	mov	r4, r1
 8012b48:	4616      	mov	r6, r2
 8012b4a:	d505      	bpl.n	8012b58 <__swrite+0x1e>
 8012b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b50:	2302      	movs	r3, #2
 8012b52:	2200      	movs	r2, #0
 8012b54:	f000 f868 	bl	8012c28 <_lseek_r>
 8012b58:	89a3      	ldrh	r3, [r4, #12]
 8012b5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012b62:	81a3      	strh	r3, [r4, #12]
 8012b64:	4632      	mov	r2, r6
 8012b66:	463b      	mov	r3, r7
 8012b68:	4628      	mov	r0, r5
 8012b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b6e:	f000 b817 	b.w	8012ba0 <_write_r>

08012b72 <__sseek>:
 8012b72:	b510      	push	{r4, lr}
 8012b74:	460c      	mov	r4, r1
 8012b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b7a:	f000 f855 	bl	8012c28 <_lseek_r>
 8012b7e:	1c43      	adds	r3, r0, #1
 8012b80:	89a3      	ldrh	r3, [r4, #12]
 8012b82:	bf15      	itete	ne
 8012b84:	6560      	strne	r0, [r4, #84]	; 0x54
 8012b86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012b8e:	81a3      	strheq	r3, [r4, #12]
 8012b90:	bf18      	it	ne
 8012b92:	81a3      	strhne	r3, [r4, #12]
 8012b94:	bd10      	pop	{r4, pc}

08012b96 <__sclose>:
 8012b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b9a:	f000 b813 	b.w	8012bc4 <_close_r>
	...

08012ba0 <_write_r>:
 8012ba0:	b538      	push	{r3, r4, r5, lr}
 8012ba2:	4d07      	ldr	r5, [pc, #28]	; (8012bc0 <_write_r+0x20>)
 8012ba4:	4604      	mov	r4, r0
 8012ba6:	4608      	mov	r0, r1
 8012ba8:	4611      	mov	r1, r2
 8012baa:	2200      	movs	r2, #0
 8012bac:	602a      	str	r2, [r5, #0]
 8012bae:	461a      	mov	r2, r3
 8012bb0:	f7f0 f8e3 	bl	8002d7a <_write>
 8012bb4:	1c43      	adds	r3, r0, #1
 8012bb6:	d102      	bne.n	8012bbe <_write_r+0x1e>
 8012bb8:	682b      	ldr	r3, [r5, #0]
 8012bba:	b103      	cbz	r3, 8012bbe <_write_r+0x1e>
 8012bbc:	6023      	str	r3, [r4, #0]
 8012bbe:	bd38      	pop	{r3, r4, r5, pc}
 8012bc0:	2000338c 	.word	0x2000338c

08012bc4 <_close_r>:
 8012bc4:	b538      	push	{r3, r4, r5, lr}
 8012bc6:	4d06      	ldr	r5, [pc, #24]	; (8012be0 <_close_r+0x1c>)
 8012bc8:	2300      	movs	r3, #0
 8012bca:	4604      	mov	r4, r0
 8012bcc:	4608      	mov	r0, r1
 8012bce:	602b      	str	r3, [r5, #0]
 8012bd0:	f7f0 f8ef 	bl	8002db2 <_close>
 8012bd4:	1c43      	adds	r3, r0, #1
 8012bd6:	d102      	bne.n	8012bde <_close_r+0x1a>
 8012bd8:	682b      	ldr	r3, [r5, #0]
 8012bda:	b103      	cbz	r3, 8012bde <_close_r+0x1a>
 8012bdc:	6023      	str	r3, [r4, #0]
 8012bde:	bd38      	pop	{r3, r4, r5, pc}
 8012be0:	2000338c 	.word	0x2000338c

08012be4 <_fstat_r>:
 8012be4:	b538      	push	{r3, r4, r5, lr}
 8012be6:	4d07      	ldr	r5, [pc, #28]	; (8012c04 <_fstat_r+0x20>)
 8012be8:	2300      	movs	r3, #0
 8012bea:	4604      	mov	r4, r0
 8012bec:	4608      	mov	r0, r1
 8012bee:	4611      	mov	r1, r2
 8012bf0:	602b      	str	r3, [r5, #0]
 8012bf2:	f7f0 f8ea 	bl	8002dca <_fstat>
 8012bf6:	1c43      	adds	r3, r0, #1
 8012bf8:	d102      	bne.n	8012c00 <_fstat_r+0x1c>
 8012bfa:	682b      	ldr	r3, [r5, #0]
 8012bfc:	b103      	cbz	r3, 8012c00 <_fstat_r+0x1c>
 8012bfe:	6023      	str	r3, [r4, #0]
 8012c00:	bd38      	pop	{r3, r4, r5, pc}
 8012c02:	bf00      	nop
 8012c04:	2000338c 	.word	0x2000338c

08012c08 <_isatty_r>:
 8012c08:	b538      	push	{r3, r4, r5, lr}
 8012c0a:	4d06      	ldr	r5, [pc, #24]	; (8012c24 <_isatty_r+0x1c>)
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	4604      	mov	r4, r0
 8012c10:	4608      	mov	r0, r1
 8012c12:	602b      	str	r3, [r5, #0]
 8012c14:	f7f0 f8e9 	bl	8002dea <_isatty>
 8012c18:	1c43      	adds	r3, r0, #1
 8012c1a:	d102      	bne.n	8012c22 <_isatty_r+0x1a>
 8012c1c:	682b      	ldr	r3, [r5, #0]
 8012c1e:	b103      	cbz	r3, 8012c22 <_isatty_r+0x1a>
 8012c20:	6023      	str	r3, [r4, #0]
 8012c22:	bd38      	pop	{r3, r4, r5, pc}
 8012c24:	2000338c 	.word	0x2000338c

08012c28 <_lseek_r>:
 8012c28:	b538      	push	{r3, r4, r5, lr}
 8012c2a:	4d07      	ldr	r5, [pc, #28]	; (8012c48 <_lseek_r+0x20>)
 8012c2c:	4604      	mov	r4, r0
 8012c2e:	4608      	mov	r0, r1
 8012c30:	4611      	mov	r1, r2
 8012c32:	2200      	movs	r2, #0
 8012c34:	602a      	str	r2, [r5, #0]
 8012c36:	461a      	mov	r2, r3
 8012c38:	f7f0 f8e2 	bl	8002e00 <_lseek>
 8012c3c:	1c43      	adds	r3, r0, #1
 8012c3e:	d102      	bne.n	8012c46 <_lseek_r+0x1e>
 8012c40:	682b      	ldr	r3, [r5, #0]
 8012c42:	b103      	cbz	r3, 8012c46 <_lseek_r+0x1e>
 8012c44:	6023      	str	r3, [r4, #0]
 8012c46:	bd38      	pop	{r3, r4, r5, pc}
 8012c48:	2000338c 	.word	0x2000338c

08012c4c <_read_r>:
 8012c4c:	b538      	push	{r3, r4, r5, lr}
 8012c4e:	4d07      	ldr	r5, [pc, #28]	; (8012c6c <_read_r+0x20>)
 8012c50:	4604      	mov	r4, r0
 8012c52:	4608      	mov	r0, r1
 8012c54:	4611      	mov	r1, r2
 8012c56:	2200      	movs	r2, #0
 8012c58:	602a      	str	r2, [r5, #0]
 8012c5a:	461a      	mov	r2, r3
 8012c5c:	f7f0 f870 	bl	8002d40 <_read>
 8012c60:	1c43      	adds	r3, r0, #1
 8012c62:	d102      	bne.n	8012c6a <_read_r+0x1e>
 8012c64:	682b      	ldr	r3, [r5, #0]
 8012c66:	b103      	cbz	r3, 8012c6a <_read_r+0x1e>
 8012c68:	6023      	str	r3, [r4, #0]
 8012c6a:	bd38      	pop	{r3, r4, r5, pc}
 8012c6c:	2000338c 	.word	0x2000338c

08012c70 <_init>:
 8012c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c72:	bf00      	nop
 8012c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c76:	bc08      	pop	{r3}
 8012c78:	469e      	mov	lr, r3
 8012c7a:	4770      	bx	lr

08012c7c <_fini>:
 8012c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c7e:	bf00      	nop
 8012c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c82:	bc08      	pop	{r3}
 8012c84:	469e      	mov	lr, r3
 8012c86:	4770      	bx	lr
